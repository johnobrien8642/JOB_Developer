{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/JOB_Developer/client/src/components/posts/util/components/forms/Matched_Tag_Results.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from '@apollo/client';\nimport Queries from '../../../../../graphql/queries.js';\nimport PostFormUtil from '../../functions/post_form_util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  FETCH_MATCHING_TAGS\n} = Queries;\nconst {\n  handleFoundTag\n} = PostFormUtil;\n\nconst MatchedTagResults = ({\n  query,\n  tags,\n  setTags,\n  tag,\n  setTag\n}) => {\n  _s();\n\n  let {\n    error,\n    data\n  } = useQuery(FETCH_MATCHING_TAGS, {\n    variables: {\n      filter: query\n    }\n  });\n  if (error) return `Error: ${error}`;\n\n  const handleMatchedTagClassName = data => {\n    if (data.fetchMatchingTags.length > 0) {\n      return 'matchingTagsDD active';\n    } else {\n      return 'matchingTagsDD';\n    }\n  };\n\n  if (data) {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: handleMatchedTagClassName(data),\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"POPULAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), data.fetchMatchingTags.map((tag, i) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: e => {\n            handleFoundTag(tag.title, setTags, tags, setTag, tag);\n          },\n          children: tag.title.slice(1, tag.title.length)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"noMatchingTags\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this);\n  }\n};\n\n_s(MatchedTagResults, \"DSdyLdvljIVwoO801BWyR16nN2A=\", false, function () {\n  return [useQuery];\n});\n\n_c = MatchedTagResults;\nexport default MatchedTagResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"MatchedTagResults\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/src/components/posts/util/components/forms/Matched_Tag_Results.js"],"names":["React","useQuery","Queries","PostFormUtil","FETCH_MATCHING_TAGS","handleFoundTag","MatchedTagResults","query","tags","setTags","tag","setTag","error","data","variables","filter","handleMatchedTagClassName","fetchMatchingTags","length","map","i","e","title","slice"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,YAAP,MAAyB,mCAAzB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BF,OAAhC;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAqBF,YAA3B;;AAEA,MAAMG,iBAAiB,GAAG,CAAC;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,IAFuB;AAGvBC,EAAAA,OAHuB;AAIvBC,EAAAA,GAJuB;AAKvBC,EAAAA;AALuB,CAAD,KAMlB;AAAA;;AAEJ,MAAI;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBZ,QAAQ,CAACG,mBAAD,EAAsB;AAClDU,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAER;AADC;AADuC,GAAtB,CAA9B;AAMA,MAAIK,KAAJ,EAAW,OAAQ,UAASA,KAAM,EAAvB;;AAEX,QAAMI,yBAAyB,GAAIH,IAAD,IAAU;AAC1C,QAAIA,IAAI,CAACI,iBAAL,CAAuBC,MAAvB,GAAgC,CAApC,EAAuC;AACrC,aAAO,uBAAP;AACD,KAFD,MAEO;AACL,aAAO,gBAAP;AACD;AACF,GAND;;AAQA,MAAIL,IAAJ,EAAU;AACR,wBACE;AACE,MAAA,SAAS,EAAEG,yBAAyB,CAACH,IAAD,CADtC;AAAA,8BAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAIGA,IAAI,CAACI,iBAAL,CAAuBE,GAAvB,CAA2B,CAACT,GAAD,EAAMU,CAAN,KAAY;AACtC,4BACE;AAEE,UAAA,OAAO,EAAEC,CAAC,IAAI;AACZhB,YAAAA,cAAc,CACZK,GAAG,CAACY,KADQ,EAEZb,OAFY,EAEHD,IAFG,EAGZG,MAHY,EAGJD,GAHI,CAAd;AAKD,WARH;AAAA,oBAUGA,GAAG,CAACY,KAAJ,CAAUC,KAAV,CAAgB,CAAhB,EAAmBb,GAAG,CAACY,KAAJ,CAAUJ,MAA7B;AAVH,WACOE,CADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAcD,OAfA,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuBD,GAxBD,MAwBO;AACL,wBACE;AACE,MAAA,SAAS,EAAC;AADZ;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;AAEJ,CAzDD;;GAAMd,iB;UAQoBL,Q;;;KARpBK,iB;AA2DN,eAAeA,iBAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport Queries from '../../../../../graphql/queries.js';\nimport PostFormUtil from '../../functions/post_form_util.js';\nconst { FETCH_MATCHING_TAGS } = Queries;\nconst { handleFoundTag } = PostFormUtil;\n\nconst MatchedTagResults = ({\n    query,\n    tags,\n    setTags, \n    tag,\n    setTag, \n  }) => {\n    \n    let { error, data } = useQuery(FETCH_MATCHING_TAGS, {\n      variables: {\n        filter: query\n      }\n    })\n\n    if (error) return `Error: ${error}`;\n\n    const handleMatchedTagClassName = (data) => {\n      if (data.fetchMatchingTags.length > 0) {\n        return 'matchingTagsDD active'\n      } else {\n        return 'matchingTagsDD'\n      }\n    }\n\n    if (data) {\n      return (\n        <ul\n          className={handleMatchedTagClassName(data)}\n        >\n          <li>POPULAR</li>\n          {data.fetchMatchingTags.map((tag, i) => {\n            return (\n              <li \n                key={i}\n                onClick={e => {\n                  handleFoundTag(\n                    tag.title,\n                    setTags, tags,\n                    setTag, tag\n                  )\n                }}\n              >\n                {tag.title.slice(1, tag.title.length)}\n              </li>\n            )\n          })}\n        </ul>\n      )\n    } else {\n      return (\n        <ul\n          className='noMatchingTags'\n        >\n        </ul>\n      )\n    }\n\n}\n\nexport default MatchedTagResults;"]},"metadata":{},"sourceType":"module"}