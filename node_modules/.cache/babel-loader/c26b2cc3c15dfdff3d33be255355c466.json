{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OggParser = exports.SegmentTable = void 0;\n\nconst Token = require(\"token-types\");\n\nconst initDebug = require(\"debug\");\n\nconst Util_1 = require(\"../common/Util\");\n\nconst FourCC_1 = require(\"../common/FourCC\");\n\nconst VorbisParser_1 = require(\"./vorbis/VorbisParser\");\n\nconst OpusParser_1 = require(\"./opus/OpusParser\");\n\nconst SpeexParser_1 = require(\"./speex/SpeexParser\");\n\nconst BasicParser_1 = require(\"../common/BasicParser\");\n\nconst TheoraParser_1 = require(\"./theora/TheoraParser\");\n\nconst core_1 = require(\"strtok3/lib/core\");\n\nconst debug = initDebug('music-metadata:parser:ogg');\n\nclass SegmentTable {\n  constructor(header) {\n    this.len = header.page_segments;\n  }\n\n  static sum(buf, off, len) {\n    let s = 0;\n\n    for (let i = off; i < off + len; ++i) {\n      s += buf[i];\n    }\n\n    return s;\n  }\n\n  get(buf, off) {\n    return {\n      totalPageSize: SegmentTable.sum(buf, off, this.len)\n    };\n  }\n\n}\n\nexports.SegmentTable = SegmentTable;\n/**\r\n * Parser for Ogg logical bitstream framing\r\n */\n\nclass OggParser extends BasicParser_1.BasicParser {\n  /**\r\n   * Parse page\r\n   * @returns {Promise<void>}\r\n   */\n  async parse() {\n    debug('pos=%s, parsePage()', this.tokenizer.position);\n\n    try {\n      let header;\n\n      do {\n        header = await this.tokenizer.readToken(OggParser.Header);\n        if (header.capturePattern !== 'OggS') throw new Error('Invalid Ogg capture pattern');\n        this.metadata.setFormat('container', 'Ogg');\n        this.header = header;\n        this.pageNumber = header.pageSequenceNo;\n        debug('page#=%s, Ogg.id=%s', header.pageSequenceNo, header.capturePattern);\n        const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));\n        debug('totalPageSize=%s', segmentTable.totalPageSize);\n        const pageData = await this.tokenizer.readToken(new Token.BufferType(segmentTable.totalPageSize));\n        debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\n\n        if (header.headerType.firstPage) {\n          const id = new Token.StringType(7, 'ascii').get(pageData, 0);\n\n          switch (id) {\n            case '\\x01vorbis':\n              // Ogg/Vorbis\n              debug('Set page consumer to Ogg/Vorbis');\n              this.pageConsumer = new VorbisParser_1.VorbisParser(this.metadata, this.options);\n              break;\n\n            case 'OpusHea':\n              // Ogg/Opus\n              debug('Set page consumer to Ogg/Opus');\n              this.pageConsumer = new OpusParser_1.OpusParser(this.metadata, this.options, this.tokenizer);\n              break;\n\n            case 'Speex  ':\n              // Ogg/Speex\n              debug('Set page consumer to Ogg/Speex');\n              this.pageConsumer = new SpeexParser_1.SpeexParser(this.metadata, this.options, this.tokenizer);\n              break;\n\n            case 'fishead':\n            case '\\x00theora':\n              // Ogg/Theora\n              debug('Set page consumer to Ogg/Theora');\n              this.pageConsumer = new TheoraParser_1.TheoraParser(this.metadata, this.options, this.tokenizer);\n              break;\n\n            default:\n              throw new Error('gg audio-codec not recognized (id=' + id + ')');\n          }\n        }\n\n        this.pageConsumer.parsePage(header, pageData);\n      } while (!header.headerType.lastPage);\n    } catch (err) {\n      if (err instanceof core_1.EndOfStreamError) {\n        this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n        debug(`End-of-stream`);\n        this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n\n        if (this.header) {\n          this.pageConsumer.calculateDuration(this.header);\n        }\n      } else if (err.message.startsWith('FourCC')) {\n        if (this.pageNumber > 0) {\n          // ignore this error: work-around if last OGG-page is not marked with last-page flag\n          this.metadata.addWarning('Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag');\n          this.pageConsumer.flush();\n        }\n      } else {\n        throw err;\n      }\n    }\n  }\n\n}\n\nexports.OggParser = OggParser;\nOggParser.Header = {\n  len: 27,\n  get: (buf, off) => {\n    return {\n      capturePattern: FourCC_1.FourCcToken.get(buf, off),\n      version: buf.readUInt8(off + 4),\n      headerType: {\n        continued: Util_1.default.strtokBITSET.get(buf, off + 5, 0),\n        firstPage: Util_1.default.strtokBITSET.get(buf, off + 5, 1),\n        lastPage: Util_1.default.strtokBITSET.get(buf, off + 5, 2)\n      },\n      // packet_flag: buf.readUInt8(off + 5),\n      absoluteGranulePosition: buf.readIntLE(off + 6, 6),\n      streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\n      pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\n      pageChecksum: Token.UINT32_LE.get(buf, off + 22),\n      page_segments: buf.readUInt8(off + 26)\n    };\n  }\n};","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/music-metadata/lib/ogg/OggParser.js"],"names":["Object","defineProperty","exports","value","OggParser","SegmentTable","Token","require","initDebug","Util_1","FourCC_1","VorbisParser_1","OpusParser_1","SpeexParser_1","BasicParser_1","TheoraParser_1","core_1","debug","constructor","header","len","page_segments","sum","buf","off","s","i","get","totalPageSize","BasicParser","parse","tokenizer","position","readToken","Header","capturePattern","Error","metadata","setFormat","pageNumber","pageSequenceNo","segmentTable","pageData","BufferType","headerType","firstPage","lastPage","continued","id","StringType","pageConsumer","VorbisParser","options","OpusParser","SpeexParser","TheoraParser","parsePage","err","EndOfStreamError","addWarning","calculateDuration","message","startsWith","flush","FourCcToken","version","readUInt8","default","strtokBITSET","absoluteGranulePosition","readIntLE","streamSerialNumber","UINT32_LE","pageChecksum"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OggParser = exports.SegmentTable = void 0;\r\nconst Token = require(\"token-types\");\r\nconst initDebug = require(\"debug\");\r\nconst Util_1 = require(\"../common/Util\");\r\nconst FourCC_1 = require(\"../common/FourCC\");\r\nconst VorbisParser_1 = require(\"./vorbis/VorbisParser\");\r\nconst OpusParser_1 = require(\"./opus/OpusParser\");\r\nconst SpeexParser_1 = require(\"./speex/SpeexParser\");\r\nconst BasicParser_1 = require(\"../common/BasicParser\");\r\nconst TheoraParser_1 = require(\"./theora/TheoraParser\");\r\nconst core_1 = require(\"strtok3/lib/core\");\r\nconst debug = initDebug('music-metadata:parser:ogg');\r\nclass SegmentTable {\r\n    constructor(header) {\r\n        this.len = header.page_segments;\r\n    }\r\n    static sum(buf, off, len) {\r\n        let s = 0;\r\n        for (let i = off; i < off + len; ++i) {\r\n            s += buf[i];\r\n        }\r\n        return s;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\r\n        };\r\n    }\r\n}\r\nexports.SegmentTable = SegmentTable;\r\n/**\r\n * Parser for Ogg logical bitstream framing\r\n */\r\nclass OggParser extends BasicParser_1.BasicParser {\r\n    /**\r\n     * Parse page\r\n     * @returns {Promise<void>}\r\n     */\r\n    async parse() {\r\n        debug('pos=%s, parsePage()', this.tokenizer.position);\r\n        try {\r\n            let header;\r\n            do {\r\n                header = await this.tokenizer.readToken(OggParser.Header);\r\n                if (header.capturePattern !== 'OggS')\r\n                    throw new Error('Invalid Ogg capture pattern');\r\n                this.metadata.setFormat('container', 'Ogg');\r\n                this.header = header;\r\n                this.pageNumber = header.pageSequenceNo;\r\n                debug('page#=%s, Ogg.id=%s', header.pageSequenceNo, header.capturePattern);\r\n                const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));\r\n                debug('totalPageSize=%s', segmentTable.totalPageSize);\r\n                const pageData = await this.tokenizer.readToken(new Token.BufferType(segmentTable.totalPageSize));\r\n                debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\r\n                if (header.headerType.firstPage) {\r\n                    const id = new Token.StringType(7, 'ascii').get(pageData, 0);\r\n                    switch (id) {\r\n                        case '\\x01vorbis': // Ogg/Vorbis\r\n                            debug('Set page consumer to Ogg/Vorbis');\r\n                            this.pageConsumer = new VorbisParser_1.VorbisParser(this.metadata, this.options);\r\n                            break;\r\n                        case 'OpusHea': // Ogg/Opus\r\n                            debug('Set page consumer to Ogg/Opus');\r\n                            this.pageConsumer = new OpusParser_1.OpusParser(this.metadata, this.options, this.tokenizer);\r\n                            break;\r\n                        case 'Speex  ': // Ogg/Speex\r\n                            debug('Set page consumer to Ogg/Speex');\r\n                            this.pageConsumer = new SpeexParser_1.SpeexParser(this.metadata, this.options, this.tokenizer);\r\n                            break;\r\n                        case 'fishead':\r\n                        case '\\x00theora': // Ogg/Theora\r\n                            debug('Set page consumer to Ogg/Theora');\r\n                            this.pageConsumer = new TheoraParser_1.TheoraParser(this.metadata, this.options, this.tokenizer);\r\n                            break;\r\n                        default:\r\n                            throw new Error('gg audio-codec not recognized (id=' + id + ')');\r\n                    }\r\n                }\r\n                this.pageConsumer.parsePage(header, pageData);\r\n            } while (!header.headerType.lastPage);\r\n        }\r\n        catch (err) {\r\n            if (err instanceof core_1.EndOfStreamError) {\r\n                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\r\n                debug(`End-of-stream`);\r\n                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\r\n                if (this.header) {\r\n                    this.pageConsumer.calculateDuration(this.header);\r\n                }\r\n            }\r\n            else if (err.message.startsWith('FourCC')) {\r\n                if (this.pageNumber > 0) {\r\n                    // ignore this error: work-around if last OGG-page is not marked with last-page flag\r\n                    this.metadata.addWarning('Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag');\r\n                    this.pageConsumer.flush();\r\n                }\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.OggParser = OggParser;\r\nOggParser.Header = {\r\n    len: 27,\r\n    get: (buf, off) => {\r\n        return {\r\n            capturePattern: FourCC_1.FourCcToken.get(buf, off),\r\n            version: buf.readUInt8(off + 4),\r\n            headerType: {\r\n                continued: Util_1.default.strtokBITSET.get(buf, off + 5, 0),\r\n                firstPage: Util_1.default.strtokBITSET.get(buf, off + 5, 1),\r\n                lastPage: Util_1.default.strtokBITSET.get(buf, off + 5, 2)\r\n            },\r\n            // packet_flag: buf.readUInt8(off + 5),\r\n            absoluteGranulePosition: buf.readIntLE(off + 6, 6),\r\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\r\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\r\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\r\n            page_segments: buf.readUInt8(off + 26)\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}