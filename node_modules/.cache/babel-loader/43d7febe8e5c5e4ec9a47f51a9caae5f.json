{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractID3Parser = void 0;\n\nconst core_1 = require(\"strtok3/lib/core\");\n\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\n\nconst ID3v2Parser_1 = require(\"./ID3v2Parser\");\n\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\n\nconst _debug = require(\"debug\");\n\nconst BasicParser_1 = require(\"../common/BasicParser\");\n\nconst debug = _debug('music-metadata:parser:ID3');\n/**\r\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\r\n */\n\n\nclass AbstractID3Parser extends BasicParser_1.BasicParser {\n  constructor() {\n    super(...arguments);\n    this.id3parser = new ID3v2Parser_1.ID3v2Parser();\n  }\n\n  static async startsWithID3v2Header(tokenizer) {\n    return (await tokenizer.peekToken(ID3v2Token_1.ID3v2Header)).fileIdentifier === 'ID3';\n  }\n\n  async parse() {\n    try {\n      await this.parseID3v2();\n    } catch (err) {\n      if (err instanceof core_1.EndOfStreamError) {\n        debug(`End-of-stream`);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  finalize() {\n    return;\n  }\n\n  async parseID3v2() {\n    await this.tryReadId3v2Headers();\n    debug(\"End of ID3v2 header, go to MPEG-parser: pos=%s\", this.tokenizer.position);\n    await this._parse();\n\n    if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n      this.finalize();\n    } else {\n      const id3v1parser = new ID3v1Parser_1.ID3v1Parser();\n      await id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();\n      this.finalize();\n    }\n  }\n\n  async tryReadId3v2Headers() {\n    const id3Header = await this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\n\n    if (id3Header.fileIdentifier === \"ID3\") {\n      debug(\"Found ID3v2 header, pos=%s\", this.tokenizer.position);\n      await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n      return this.tryReadId3v2Headers();\n    }\n  }\n\n}\n\nexports.AbstractID3Parser = AbstractID3Parser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"names":["Object","defineProperty","exports","value","AbstractID3Parser","core_1","require","ID3v2Token_1","ID3v2Parser_1","ID3v1Parser_1","_debug","BasicParser_1","debug","BasicParser","constructor","arguments","id3parser","ID3v2Parser","startsWithID3v2Header","tokenizer","peekToken","ID3v2Header","fileIdentifier","parse","parseID3v2","err","EndOfStreamError","finalize","tryReadId3v2Headers","position","_parse","options","skipPostHeaders","metadata","hasAny","id3v1parser","ID3v1Parser","init","id3Header"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,eAAD,CAA7B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,sBAAD,CAA7B;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,OAAD,CAAtB;;AACA,MAAMK,aAAa,GAAGL,OAAO,CAAC,uBAAD,CAA7B;;AACA,MAAMM,KAAK,GAAGF,MAAM,CAAC,2BAAD,CAApB;AACA;AACA;AACA;;;AACA,MAAMN,iBAAN,SAAgCO,aAAa,CAACE,WAA9C,CAA0D;AACtDC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,SAAL,GAAiB,IAAIR,aAAa,CAACS,WAAlB,EAAjB;AACH;;AACiC,eAArBC,qBAAqB,CAACC,SAAD,EAAY;AAC1C,WAAO,CAAC,MAAMA,SAAS,CAACC,SAAV,CAAoBb,YAAY,CAACc,WAAjC,CAAP,EAAsDC,cAAtD,KAAyE,KAAhF;AACH;;AACU,QAALC,KAAK,GAAG;AACV,QAAI;AACA,YAAM,KAAKC,UAAL,EAAN;AACH,KAFD,CAGA,OAAOC,GAAP,EAAY;AACR,UAAIA,GAAG,YAAYpB,MAAM,CAACqB,gBAA1B,EAA4C;AACxCd,QAAAA,KAAK,CAAE,eAAF,CAAL;AACH,OAFD,MAGK;AACD,cAAMa,GAAN;AACH;AACJ;AACJ;;AACDE,EAAAA,QAAQ,GAAG;AACP;AACH;;AACe,QAAVH,UAAU,GAAG;AACf,UAAM,KAAKI,mBAAL,EAAN;AACAhB,IAAAA,KAAK,CAAC,gDAAD,EAAmD,KAAKO,SAAL,CAAeU,QAAlE,CAAL;AACA,UAAM,KAAKC,MAAL,EAAN;;AACA,QAAI,KAAKC,OAAL,CAAaC,eAAb,IAAgC,KAAKC,QAAL,CAAcC,MAAd,EAApC,EAA4D;AACxD,WAAKP,QAAL;AACH,KAFD,MAGK;AACD,YAAMQ,WAAW,GAAG,IAAI1B,aAAa,CAAC2B,WAAlB,EAApB;AACA,YAAMD,WAAW,CAACE,IAAZ,CAAiB,KAAKJ,QAAtB,EAAgC,KAAKd,SAArC,EAAgD,KAAKY,OAArD,EAA8DR,KAA9D,EAAN;AACA,WAAKI,QAAL;AACH;AACJ;;AACwB,QAAnBC,mBAAmB,GAAG;AACxB,UAAMU,SAAS,GAAG,MAAM,KAAKnB,SAAL,CAAeC,SAAf,CAAyBb,YAAY,CAACc,WAAtC,CAAxB;;AACA,QAAIiB,SAAS,CAAChB,cAAV,KAA6B,KAAjC,EAAwC;AACpCV,MAAAA,KAAK,CAAC,4BAAD,EAA+B,KAAKO,SAAL,CAAeU,QAA9C,CAAL;AACA,YAAM,KAAKb,SAAL,CAAeO,KAAf,CAAqB,KAAKU,QAA1B,EAAoC,KAAKd,SAAzC,EAAoD,KAAKY,OAAzD,CAAN;AACA,aAAO,KAAKH,mBAAL,EAAP;AACH;AACJ;;AA5CqD;;AA8C1D1B,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AbstractID3Parser = void 0;\r\nconst core_1 = require(\"strtok3/lib/core\");\r\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\r\nconst ID3v2Parser_1 = require(\"./ID3v2Parser\");\r\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\r\nconst _debug = require(\"debug\");\r\nconst BasicParser_1 = require(\"../common/BasicParser\");\r\nconst debug = _debug('music-metadata:parser:ID3');\r\n/**\r\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\r\n */\r\nclass AbstractID3Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.id3parser = new ID3v2Parser_1.ID3v2Parser();\r\n    }\r\n    static async startsWithID3v2Header(tokenizer) {\r\n        return (await tokenizer.peekToken(ID3v2Token_1.ID3v2Header)).fileIdentifier === 'ID3';\r\n    }\r\n    async parse() {\r\n        try {\r\n            await this.parseID3v2();\r\n        }\r\n        catch (err) {\r\n            if (err instanceof core_1.EndOfStreamError) {\r\n                debug(`End-of-stream`);\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    finalize() {\r\n        return;\r\n    }\r\n    async parseID3v2() {\r\n        await this.tryReadId3v2Headers();\r\n        debug(\"End of ID3v2 header, go to MPEG-parser: pos=%s\", this.tokenizer.position);\r\n        await this._parse();\r\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\r\n            this.finalize();\r\n        }\r\n        else {\r\n            const id3v1parser = new ID3v1Parser_1.ID3v1Parser();\r\n            await id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();\r\n            this.finalize();\r\n        }\r\n    }\r\n    async tryReadId3v2Headers() {\r\n        const id3Header = await this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\r\n        if (id3Header.fileIdentifier === \"ID3\") {\r\n            debug(\"Found ID3v2 header, pos=%s\", this.tokenizer.position);\r\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\r\n            return this.tryReadId3v2Headers();\r\n        }\r\n    }\r\n}\r\nexports.AbstractID3Parser = AbstractID3Parser;\r\n"]},"metadata":{},"sourceType":"script"}