{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ID3v2Parser = void 0;\n\nvar Token = require(\"token-types\");\n\nvar Util_1 = require(\"../common/Util\");\n\nvar FrameParser_1 = require(\"./FrameParser\");\n\nvar ID3v2Token_1 = require(\"./ID3v2Token\");\n\nvar ID3v2Parser = /*#__PURE__*/function () {\n  function ID3v2Parser() {\n    _classCallCheck(this, ID3v2Parser);\n  }\n\n  _createClass(ID3v2Parser, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(metadata, tokenizer, options) {\n        var id3Header;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.tokenizer = tokenizer;\n                this.metadata = metadata;\n                this.options = options;\n                _context.next = 5;\n                return this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\n\n              case 5:\n                id3Header = _context.sent;\n\n                if (!(id3Header.fileIdentifier !== 'ID3')) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\n\n              case 8:\n                this.id3Header = id3Header;\n                this.headerType = 'ID3v2.' + id3Header.version.major;\n\n                if (!id3Header.flags.isExtendedHeader) {\n                  _context.next = 14;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.parseExtendedHeader());\n\n              case 14:\n                return _context.abrupt(\"return\", this.parseId3Data(id3Header.size));\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function parse(_x, _x2, _x3) {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"parseExtendedHeader\",\n    value: function () {\n      var _parseExtendedHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var extendedHeader, dataRemaining;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\n\n              case 2:\n                extendedHeader = _context2.sent;\n                dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\n\n                if (!(dataRemaining > 0)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.parseExtendedHeaderData(dataRemaining, extendedHeader.size));\n\n              case 8:\n                return _context2.abrupt(\"return\", this.parseId3Data(this.id3Header.size - extendedHeader.size));\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function parseExtendedHeader() {\n        return _parseExtendedHeader.apply(this, arguments);\n      }\n\n      return parseExtendedHeader;\n    }()\n  }, {\n    key: \"parseExtendedHeaderData\",\n    value: function () {\n      var _parseExtendedHeaderData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dataRemaining, extendedHeaderSize) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                buffer = Buffer.alloc(dataRemaining);\n                _context3.next = 3;\n                return this.tokenizer.readBuffer(buffer, {\n                  length: dataRemaining\n                });\n\n              case 3:\n                return _context3.abrupt(\"return\", this.parseId3Data(this.id3Header.size - extendedHeaderSize));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function parseExtendedHeaderData(_x4, _x5) {\n        return _parseExtendedHeaderData.apply(this, arguments);\n      }\n\n      return parseExtendedHeaderData;\n    }()\n  }, {\n    key: \"parseId3Data\",\n    value: function () {\n      var _parseId3Data = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dataLen) {\n        var buffer, _iterator, _step, tag, _iterator2, _step2, text, _iterator3, _step3, value, _iterator4, _step4, _value, _iterator5, _step5, _value2;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                buffer = Buffer.alloc(dataLen);\n                _context4.next = 3;\n                return this.tokenizer.readBuffer(buffer, {\n                  length: dataLen\n                });\n\n              case 3:\n                _iterator = _createForOfIteratorHelper(this.parseMetadata(buffer));\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    tag = _step.value;\n\n                    if (tag.id === 'TXXX') {\n                      if (tag.value) {\n                        _iterator2 = _createForOfIteratorHelper(tag.value.text);\n\n                        try {\n                          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                            text = _step2.value;\n                            this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\n                          }\n                        } catch (err) {\n                          _iterator2.e(err);\n                        } finally {\n                          _iterator2.f();\n                        }\n                      }\n                    } else if (tag.id === 'COM') {\n                      _iterator3 = _createForOfIteratorHelper(tag.value);\n\n                      try {\n                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                          value = _step3.value;\n                          this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\n                        }\n                      } catch (err) {\n                        _iterator3.e(err);\n                      } finally {\n                        _iterator3.f();\n                      }\n                    } else if (tag.id === 'COMM') {\n                      _iterator4 = _createForOfIteratorHelper(tag.value);\n\n                      try {\n                        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                          _value = _step4.value;\n                          this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, _value.description), _value);\n                        }\n                      } catch (err) {\n                        _iterator4.e(err);\n                      } finally {\n                        _iterator4.f();\n                      }\n                    } else if (Array.isArray(tag.value)) {\n                      _iterator5 = _createForOfIteratorHelper(tag.value);\n\n                      try {\n                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                          _value2 = _step5.value;\n                          this.addTag(tag.id, _value2);\n                        }\n                      } catch (err) {\n                        _iterator5.e(err);\n                      } finally {\n                        _iterator5.f();\n                      }\n                    } else {\n                      this.addTag(tag.id, tag.value);\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function parseId3Data(_x6) {\n        return _parseId3Data.apply(this, arguments);\n      }\n\n      return parseId3Data;\n    }()\n  }, {\n    key: \"addTag\",\n    value: function addTag(id, value) {\n      this.metadata.addTag(this.headerType, id, value);\n    }\n  }, {\n    key: \"parseMetadata\",\n    value: function parseMetadata(data) {\n      var offset = 0;\n      var tags = [];\n\n      while (true) {\n        if (offset === data.length) break;\n        var frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n\n        if (offset + frameHeaderLength > data.length) {\n          this.metadata.addWarning('Illegal ID3v2 tag length');\n          break;\n        }\n\n        var frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\n        var frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n        var frameDataBytes = data.slice(offset, offset += frameHeader.length);\n        var values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n\n        if (values) {\n          tags.push({\n            id: frameHeader.id,\n            value: values\n          });\n        }\n      }\n\n      return tags;\n    }\n  }, {\n    key: \"readFrameHeader\",\n    value: function readFrameHeader(v, majorVer) {\n      var header;\n\n      switch (majorVer) {\n        case 2:\n          header = {\n            id: v.toString('ascii', 0, 3),\n            length: Token.UINT24_BE.get(v, 3)\n          };\n\n          if (!header.id.match(/[A-Z0-9]{3}/g)) {\n            this.metadata.addWarning(\"Invalid ID3v2.\".concat(this.id3Header.version.major, \" frame-header-ID: \").concat(header.id));\n          }\n\n          break;\n\n        case 3:\n        case 4:\n          header = {\n            id: v.toString('ascii', 0, 4),\n            length: (majorVer === 4 ? ID3v2Token_1.UINT32SYNCSAFE : Token.UINT32_BE).get(v, 4),\n            flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\n          };\n\n          if (!header.id.match(/[A-Z0-9]{4}/g)) {\n            this.metadata.addWarning(\"Invalid ID3v2.\".concat(this.id3Header.version.major, \" frame-header-ID: \").concat(header.id));\n          }\n\n          break;\n\n        default:\n          throw new Error('Unexpected majorVer: ' + majorVer);\n      }\n\n      return header;\n    }\n  }], [{\n    key: \"removeUnsyncBytes\",\n    value: function removeUnsyncBytes(buffer) {\n      var readI = 0;\n      var writeI = 0;\n\n      while (readI < buffer.length - 1) {\n        if (readI !== writeI) {\n          buffer[writeI] = buffer[readI];\n        }\n\n        readI += buffer[readI] === 0xFF && buffer[readI + 1] === 0 ? 2 : 1;\n        writeI++;\n      }\n\n      if (readI < buffer.length) {\n        buffer[writeI++] = buffer[readI];\n      }\n\n      return buffer.slice(0, writeI);\n    }\n  }, {\n    key: \"getFrameHeaderLength\",\n    value: function getFrameHeaderLength(majorVer) {\n      switch (majorVer) {\n        case 2:\n          return 6;\n\n        case 3:\n        case 4:\n          return 10;\n\n        default:\n          throw new Error('header versionIndex is incorrect');\n      }\n    }\n  }, {\n    key: \"readFrameFlags\",\n    value: function readFrameFlags(b) {\n      return {\n        status: {\n          tag_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 6),\n          file_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 5),\n          read_only: Util_1.default.strtokBITSET.get(b, 0, 4)\n        },\n        format: {\n          grouping_identity: Util_1.default.strtokBITSET.get(b, 1, 7),\n          compression: Util_1.default.strtokBITSET.get(b, 1, 3),\n          encryption: Util_1.default.strtokBITSET.get(b, 1, 2),\n          unsynchronisation: Util_1.default.strtokBITSET.get(b, 1, 1),\n          data_length_indicator: Util_1.default.strtokBITSET.get(b, 1, 0)\n        }\n      };\n    }\n  }, {\n    key: \"readFrameData\",\n    value: function readFrameData(buf, frameHeader, majorVer, includeCovers, warningCollector) {\n      var frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\n\n      switch (majorVer) {\n        case 2:\n          return frameParser.readData(buf, frameHeader.id, includeCovers);\n\n        case 3:\n        case 4:\n          if (frameHeader.flags.format.unsynchronisation) {\n            buf = ID3v2Parser.removeUnsyncBytes(buf);\n          }\n\n          if (frameHeader.flags.format.data_length_indicator) {\n            buf = buf.slice(4, buf.length);\n          }\n\n          return frameParser.readData(buf, frameHeader.id, includeCovers);\n\n        default:\n          throw new Error('Unexpected majorVer: ' + majorVer);\n      }\n    }\n    /**\r\n     * Create a combined tag key, of tag & description\r\n     * @param {string} tag e.g.: COM\r\n     * @param {string} description e.g. iTunPGAP\r\n     * @returns {string} e.g. COM:iTunPGAP\r\n     */\n\n  }, {\n    key: \"makeDescriptionTagName\",\n    value: function makeDescriptionTagName(tag, description) {\n      return tag + (description ? ':' + description : '');\n    }\n  }]);\n\n  return ID3v2Parser;\n}();\n\nexports.ID3v2Parser = ID3v2Parser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"names":["Object","defineProperty","exports","value","ID3v2Parser","Token","require","Util_1","FrameParser_1","ID3v2Token_1","metadata","tokenizer","options","readToken","ID3v2Header","id3Header","fileIdentifier","Error","headerType","version","major","flags","isExtendedHeader","parseExtendedHeader","parseId3Data","size","ExtendedHeader","extendedHeader","dataRemaining","len","parseExtendedHeaderData","extendedHeaderSize","buffer","Buffer","alloc","readBuffer","length","dataLen","parseMetadata","tag","id","text","addTag","makeDescriptionTagName","description","Array","isArray","data","offset","tags","frameHeaderLength","getFrameHeaderLength","addWarning","frameHeaderBytes","slice","frameHeader","readFrameHeader","frameDataBytes","values","readFrameData","skipCovers","push","v","majorVer","header","toString","UINT24_BE","get","match","UINT32SYNCSAFE","UINT32_BE","readFrameFlags","readI","writeI","b","status","tag_alter_preservation","default","strtokBITSET","file_alter_preservation","read_only","format","grouping_identity","compression","encryption","unsynchronisation","data_length_indicator","buf","includeCovers","warningCollector","frameParser","FrameParser","readData","removeUnsyncBytes"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ID3v2Parser = void 0;\r\nconst Token = require(\"token-types\");\r\nconst Util_1 = require(\"../common/Util\");\r\nconst FrameParser_1 = require(\"./FrameParser\");\r\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\r\nclass ID3v2Parser {\r\n    static removeUnsyncBytes(buffer) {\r\n        let readI = 0;\r\n        let writeI = 0;\r\n        while (readI < buffer.length - 1) {\r\n            if (readI !== writeI) {\r\n                buffer[writeI] = buffer[readI];\r\n            }\r\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\r\n            writeI++;\r\n        }\r\n        if (readI < buffer.length) {\r\n            buffer[writeI++] = buffer[readI];\r\n        }\r\n        return buffer.slice(0, writeI);\r\n    }\r\n    static getFrameHeaderLength(majorVer) {\r\n        switch (majorVer) {\r\n            case 2:\r\n                return 6;\r\n            case 3:\r\n            case 4:\r\n                return 10;\r\n            default:\r\n                throw new Error('header versionIndex is incorrect');\r\n        }\r\n    }\r\n    static readFrameFlags(b) {\r\n        return {\r\n            status: {\r\n                tag_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 6),\r\n                file_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 5),\r\n                read_only: Util_1.default.strtokBITSET.get(b, 0, 4)\r\n            },\r\n            format: {\r\n                grouping_identity: Util_1.default.strtokBITSET.get(b, 1, 7),\r\n                compression: Util_1.default.strtokBITSET.get(b, 1, 3),\r\n                encryption: Util_1.default.strtokBITSET.get(b, 1, 2),\r\n                unsynchronisation: Util_1.default.strtokBITSET.get(b, 1, 1),\r\n                data_length_indicator: Util_1.default.strtokBITSET.get(b, 1, 0)\r\n            }\r\n        };\r\n    }\r\n    static readFrameData(buf, frameHeader, majorVer, includeCovers, warningCollector) {\r\n        const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\r\n        switch (majorVer) {\r\n            case 2:\r\n                return frameParser.readData(buf, frameHeader.id, includeCovers);\r\n            case 3:\r\n            case 4:\r\n                if (frameHeader.flags.format.unsynchronisation) {\r\n                    buf = ID3v2Parser.removeUnsyncBytes(buf);\r\n                }\r\n                if (frameHeader.flags.format.data_length_indicator) {\r\n                    buf = buf.slice(4, buf.length);\r\n                }\r\n                return frameParser.readData(buf, frameHeader.id, includeCovers);\r\n            default:\r\n                throw new Error('Unexpected majorVer: ' + majorVer);\r\n        }\r\n    }\r\n    /**\r\n     * Create a combined tag key, of tag & description\r\n     * @param {string} tag e.g.: COM\r\n     * @param {string} description e.g. iTunPGAP\r\n     * @returns {string} e.g. COM:iTunPGAP\r\n     */\r\n    static makeDescriptionTagName(tag, description) {\r\n        return tag + (description ? ':' + description : '');\r\n    }\r\n    async parse(metadata, tokenizer, options) {\r\n        this.tokenizer = tokenizer;\r\n        this.metadata = metadata;\r\n        this.options = options;\r\n        const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\r\n        if (id3Header.fileIdentifier !== 'ID3') {\r\n            throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\r\n        }\r\n        this.id3Header = id3Header;\r\n        this.headerType = ('ID3v2.' + id3Header.version.major);\r\n        if (id3Header.flags.isExtendedHeader) {\r\n            return this.parseExtendedHeader();\r\n        }\r\n        else {\r\n            return this.parseId3Data(id3Header.size);\r\n        }\r\n    }\r\n    async parseExtendedHeader() {\r\n        const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\r\n        const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\r\n        if (dataRemaining > 0) {\r\n            return this.parseExtendedHeaderData(dataRemaining, extendedHeader.size);\r\n        }\r\n        else {\r\n            return this.parseId3Data(this.id3Header.size - extendedHeader.size);\r\n        }\r\n    }\r\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\r\n        const buffer = Buffer.alloc(dataRemaining);\r\n        await this.tokenizer.readBuffer(buffer, { length: dataRemaining });\r\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\r\n    }\r\n    async parseId3Data(dataLen) {\r\n        const buffer = Buffer.alloc(dataLen);\r\n        await this.tokenizer.readBuffer(buffer, { length: dataLen });\r\n        for (const tag of this.parseMetadata(buffer)) {\r\n            if (tag.id === 'TXXX') {\r\n                if (tag.value) {\r\n                    for (const text of tag.value.text) {\r\n                        this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\r\n                    }\r\n                }\r\n            }\r\n            else if (tag.id === 'COM') {\r\n                for (const value of tag.value) {\r\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\r\n                }\r\n            }\r\n            else if (tag.id === 'COMM') {\r\n                for (const value of tag.value) {\r\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\r\n                }\r\n            }\r\n            else if (Array.isArray(tag.value)) {\r\n                for (const value of tag.value) {\r\n                    this.addTag(tag.id, value);\r\n                }\r\n            }\r\n            else {\r\n                this.addTag(tag.id, tag.value);\r\n            }\r\n        }\r\n    }\r\n    addTag(id, value) {\r\n        this.metadata.addTag(this.headerType, id, value);\r\n    }\r\n    parseMetadata(data) {\r\n        let offset = 0;\r\n        const tags = [];\r\n        while (true) {\r\n            if (offset === data.length)\r\n                break;\r\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\r\n            if (offset + frameHeaderLength > data.length) {\r\n                this.metadata.addWarning('Illegal ID3v2 tag length');\r\n                break;\r\n            }\r\n            const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\r\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\r\n            const frameDataBytes = data.slice(offset, offset += frameHeader.length);\r\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\r\n            if (values) {\r\n                tags.push({ id: frameHeader.id, value: values });\r\n            }\r\n        }\r\n        return tags;\r\n    }\r\n    readFrameHeader(v, majorVer) {\r\n        let header;\r\n        switch (majorVer) {\r\n            case 2:\r\n                header = {\r\n                    id: v.toString('ascii', 0, 3),\r\n                    length: Token.UINT24_BE.get(v, 3)\r\n                };\r\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\r\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\r\n                }\r\n                break;\r\n            case 3:\r\n            case 4:\r\n                header = {\r\n                    id: v.toString('ascii', 0, 4),\r\n                    length: (majorVer === 4 ? ID3v2Token_1.UINT32SYNCSAFE : Token.UINT32_BE).get(v, 4),\r\n                    flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\r\n                };\r\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\r\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('Unexpected majorVer: ' + majorVer);\r\n        }\r\n        return header;\r\n    }\r\n}\r\nexports.ID3v2Parser = ID3v2Parser;\r\n"]},"metadata":{},"sourceType":"script"}