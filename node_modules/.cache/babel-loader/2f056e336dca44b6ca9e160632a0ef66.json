{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReplayGain = void 0;\n\nconst Util_1 = require(\"../common/Util\");\n/**\r\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\r\n */\n\n\nvar NameCode;\n\n(function (NameCode) {\n  /**\r\n   * not set\r\n   */\n  NameCode[NameCode[\"not_set\"] = 0] = \"not_set\";\n  /**\r\n   * Radio Gain Adjustment\r\n   */\n\n  NameCode[NameCode[\"radio\"] = 1] = \"radio\";\n  /**\r\n   * Audiophile Gain Adjustment\r\n   */\n\n  NameCode[NameCode[\"audiophile\"] = 2] = \"audiophile\";\n})(NameCode || (NameCode = {}));\n/**\r\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\r\n */\n\n\nvar ReplayGainOriginator;\n\n(function (ReplayGainOriginator) {\n  /**\r\n   * Replay Gain unspecified\r\n   */\n  ReplayGainOriginator[ReplayGainOriginator[\"unspecified\"] = 0] = \"unspecified\";\n  /**\r\n   * Replay Gain pre-set by artist/producer/mastering engineer\r\n   */\n\n  ReplayGainOriginator[ReplayGainOriginator[\"engineer\"] = 1] = \"engineer\";\n  /**\r\n   * Replay Gain set by user\r\n   */\n\n  ReplayGainOriginator[ReplayGainOriginator[\"user\"] = 2] = \"user\";\n  /**\r\n   * Replay Gain determined automatically, as described on this site\r\n   */\n\n  ReplayGainOriginator[ReplayGainOriginator[\"automatic\"] = 3] = \"automatic\";\n  /**\r\n   * Set by simple RMS average\r\n   */\n\n  ReplayGainOriginator[ReplayGainOriginator[\"rms_average\"] = 4] = \"rms_average\";\n})(ReplayGainOriginator || (ReplayGainOriginator = {}));\n/**\r\n * Replay Gain Data Format\r\n *\r\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\r\n */\n\n\nexports.ReplayGain = {\n  len: 2,\n  get: (buf, off) => {\n    const gain_type = Util_1.default.getBitAllignedNumber(buf, off, 0, 3);\n    const sign = Util_1.default.getBitAllignedNumber(buf, off, 6, 1);\n    const gain_adj = Util_1.default.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\n\n    if (gain_type > 0) {\n      return {\n        type: Util_1.default.getBitAllignedNumber(buf, off, 0, 3),\n        origin: Util_1.default.getBitAllignedNumber(buf, off, 3, 3),\n        adjustment: sign ? -gain_adj : gain_adj\n      };\n    }\n\n    return undefined;\n  }\n};","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js"],"names":["Object","defineProperty","exports","value","ReplayGain","Util_1","require","NameCode","ReplayGainOriginator","len","get","buf","off","gain_type","default","getBitAllignedNumber","sign","gain_adj","type","origin","adjustment","undefined"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;AACA;AACA;AACA;;;AACA,IAAIC,QAAJ;;AACA,CAAC,UAAUA,QAAV,EAAoB;AACjB;AACJ;AACA;AACIA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,SAAD,CAAR,GAAsB,CAAvB,CAAR,GAAoC,SAApC;AACA;AACJ;AACA;;AACIA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,OAAD,CAAR,GAAoB,CAArB,CAAR,GAAkC,OAAlC;AACA;AACJ;AACA;;AACIA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,YAAD,CAAR,GAAyB,CAA1B,CAAR,GAAuC,YAAvC;AACH,CAbD,EAaGA,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CAbX;AAcA;AACA;AACA;;;AACA,IAAIC,oBAAJ;;AACA,CAAC,UAAUA,oBAAV,EAAgC;AAC7B;AACJ;AACA;AACIA,EAAAA,oBAAoB,CAACA,oBAAoB,CAAC,aAAD,CAApB,GAAsC,CAAvC,CAApB,GAAgE,aAAhE;AACA;AACJ;AACA;;AACIA,EAAAA,oBAAoB,CAACA,oBAAoB,CAAC,UAAD,CAApB,GAAmC,CAApC,CAApB,GAA6D,UAA7D;AACA;AACJ;AACA;;AACIA,EAAAA,oBAAoB,CAACA,oBAAoB,CAAC,MAAD,CAApB,GAA+B,CAAhC,CAApB,GAAyD,MAAzD;AACA;AACJ;AACA;;AACIA,EAAAA,oBAAoB,CAACA,oBAAoB,CAAC,WAAD,CAApB,GAAoC,CAArC,CAApB,GAA8D,WAA9D;AACA;AACJ;AACA;;AACIA,EAAAA,oBAAoB,CAACA,oBAAoB,CAAC,aAAD,CAApB,GAAsC,CAAvC,CAApB,GAAgE,aAAhE;AACH,CArBD,EAqBGA,oBAAoB,KAAKA,oBAAoB,GAAG,EAA5B,CArBvB;AAsBA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACE,UAAR,GAAqB;AACjBK,EAAAA,GAAG,EAAE,CADY;AAEjBC,EAAAA,GAAG,EAAE,CAACC,GAAD,EAAMC,GAAN,KAAc;AACf,UAAMC,SAAS,GAAGR,MAAM,CAACS,OAAP,CAAeC,oBAAf,CAAoCJ,GAApC,EAAyCC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CAAlB;AACA,UAAMI,IAAI,GAAGX,MAAM,CAACS,OAAP,CAAeC,oBAAf,CAAoCJ,GAApC,EAAyCC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CAAb;AACA,UAAMK,QAAQ,GAAGZ,MAAM,CAACS,OAAP,CAAeC,oBAAf,CAAoCJ,GAApC,EAAyCC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,IAAsD,IAAvE;;AACA,QAAIC,SAAS,GAAG,CAAhB,EAAmB;AACf,aAAO;AACHK,QAAAA,IAAI,EAAEb,MAAM,CAACS,OAAP,CAAeC,oBAAf,CAAoCJ,GAApC,EAAyCC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CADH;AAEHO,QAAAA,MAAM,EAAEd,MAAM,CAACS,OAAP,CAAeC,oBAAf,CAAoCJ,GAApC,EAAyCC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CAFL;AAGHQ,QAAAA,UAAU,EAAGJ,IAAI,GAAG,CAACC,QAAJ,GAAeA;AAH7B,OAAP;AAKH;;AACD,WAAOI,SAAP;AACH;AAdgB,CAArB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ReplayGain = void 0;\r\nconst Util_1 = require(\"../common/Util\");\r\n/**\r\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\r\n */\r\nvar NameCode;\r\n(function (NameCode) {\r\n    /**\r\n     * not set\r\n     */\r\n    NameCode[NameCode[\"not_set\"] = 0] = \"not_set\";\r\n    /**\r\n     * Radio Gain Adjustment\r\n     */\r\n    NameCode[NameCode[\"radio\"] = 1] = \"radio\";\r\n    /**\r\n     * Audiophile Gain Adjustment\r\n     */\r\n    NameCode[NameCode[\"audiophile\"] = 2] = \"audiophile\";\r\n})(NameCode || (NameCode = {}));\r\n/**\r\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\r\n */\r\nvar ReplayGainOriginator;\r\n(function (ReplayGainOriginator) {\r\n    /**\r\n     * Replay Gain unspecified\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"unspecified\"] = 0] = \"unspecified\";\r\n    /**\r\n     * Replay Gain pre-set by artist/producer/mastering engineer\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"engineer\"] = 1] = \"engineer\";\r\n    /**\r\n     * Replay Gain set by user\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"user\"] = 2] = \"user\";\r\n    /**\r\n     * Replay Gain determined automatically, as described on this site\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"automatic\"] = 3] = \"automatic\";\r\n    /**\r\n     * Set by simple RMS average\r\n     */\r\n    ReplayGainOriginator[ReplayGainOriginator[\"rms_average\"] = 4] = \"rms_average\";\r\n})(ReplayGainOriginator || (ReplayGainOriginator = {}));\r\n/**\r\n * Replay Gain Data Format\r\n *\r\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\r\n */\r\nexports.ReplayGain = {\r\n    len: 2,\r\n    get: (buf, off) => {\r\n        const gain_type = Util_1.default.getBitAllignedNumber(buf, off, 0, 3);\r\n        const sign = Util_1.default.getBitAllignedNumber(buf, off, 6, 1);\r\n        const gain_adj = Util_1.default.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\r\n        if (gain_type > 0) {\r\n            return {\r\n                type: Util_1.default.getBitAllignedNumber(buf, off, 0, 3),\r\n                origin: Util_1.default.getBitAllignedNumber(buf, off, 3, 3),\r\n                adjustment: (sign ? -gain_adj : gain_adj)\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}