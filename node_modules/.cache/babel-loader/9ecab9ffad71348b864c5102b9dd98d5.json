{"ast":null,"code":"\"use strict\";\n/**\r\n * Extended Lame Header\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtendedLameHeader = void 0;\n\nvar Token = require(\"token-types\");\n\nvar Util_1 = require(\"../common/Util\");\n\nvar ReplayGainDataFormat_1 = require(\"./ReplayGainDataFormat\");\n/**\r\n * Info Tag\r\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\r\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\r\n */\n\n\nexports.ExtendedLameHeader = {\n  len: 27,\n  get: function get(buf, off) {\n    var track_peak = Token.UINT32_BE.get(buf, off + 2);\n    return {\n      revision: Util_1.default.getBitAllignedNumber(buf, off, 0, 4),\n      vbr_method: Util_1.default.getBitAllignedNumber(buf, off, 4, 4),\n      lowpass_filter: 100 * Token.UINT8.get(buf, off + 1),\n      track_peak: track_peak === 0 ? undefined : track_peak / Math.pow(2, 23),\n      track_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 6),\n      album_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 8),\n      music_length: Token.UINT32_BE.get(buf, off + 20),\n      music_crc: Token.UINT8.get(buf, off + 24),\n      header_crc: Token.UINT16_BE.get(buf, off + 24)\n    };\n  }\n};","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js"],"names":["Object","defineProperty","exports","value","ExtendedLameHeader","Token","require","Util_1","ReplayGainDataFormat_1","len","get","buf","off","track_peak","UINT32_BE","revision","default","getBitAllignedNumber","vbr_method","lowpass_filter","UINT8","undefined","Math","pow","track_gain","ReplayGain","album_gain","music_length","music_crc","header_crc","UINT16_BE"],"mappings":"AAAA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAAtB;;AACA,IAAME,sBAAsB,GAAGF,OAAO,CAAC,wBAAD,CAAtC;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACE,kBAAR,GAA6B;AACzBK,EAAAA,GAAG,EAAE,EADoB;AAEzBC,EAAAA,GAAG,EAAE,aAACC,GAAD,EAAMC,GAAN,EAAc;AACf,QAAMC,UAAU,GAAGR,KAAK,CAACS,SAAN,CAAgBJ,GAAhB,CAAoBC,GAApB,EAAyBC,GAAG,GAAG,CAA/B,CAAnB;AACA,WAAO;AACHG,MAAAA,QAAQ,EAAER,MAAM,CAACS,OAAP,CAAeC,oBAAf,CAAoCN,GAApC,EAAyCC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CADP;AAEHM,MAAAA,UAAU,EAAEX,MAAM,CAACS,OAAP,CAAeC,oBAAf,CAAoCN,GAApC,EAAyCC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CAFT;AAGHO,MAAAA,cAAc,EAAE,MAAMd,KAAK,CAACe,KAAN,CAAYV,GAAZ,CAAgBC,GAAhB,EAAqBC,GAAG,GAAG,CAA3B,CAHnB;AAIHC,MAAAA,UAAU,EAAEA,UAAU,KAAK,CAAf,GAAmBQ,SAAnB,GAA+BR,UAAU,GAAGS,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAJrD;AAKHC,MAAAA,UAAU,EAAEhB,sBAAsB,CAACiB,UAAvB,CAAkCf,GAAlC,CAAsCC,GAAtC,EAA2C,CAA3C,CALT;AAMHe,MAAAA,UAAU,EAAElB,sBAAsB,CAACiB,UAAvB,CAAkCf,GAAlC,CAAsCC,GAAtC,EAA2C,CAA3C,CANT;AAOHgB,MAAAA,YAAY,EAAEtB,KAAK,CAACS,SAAN,CAAgBJ,GAAhB,CAAoBC,GAApB,EAAyBC,GAAG,GAAG,EAA/B,CAPX;AAQHgB,MAAAA,SAAS,EAAEvB,KAAK,CAACe,KAAN,CAAYV,GAAZ,CAAgBC,GAAhB,EAAqBC,GAAG,GAAG,EAA3B,CARR;AASHiB,MAAAA,UAAU,EAAExB,KAAK,CAACyB,SAAN,CAAgBpB,GAAhB,CAAoBC,GAApB,EAAyBC,GAAG,GAAG,EAA/B;AATT,KAAP;AAWH;AAfwB,CAA7B","sourcesContent":["\"use strict\";\r\n/**\r\n * Extended Lame Header\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ExtendedLameHeader = void 0;\r\nconst Token = require(\"token-types\");\r\nconst Util_1 = require(\"../common/Util\");\r\nconst ReplayGainDataFormat_1 = require(\"./ReplayGainDataFormat\");\r\n/**\r\n * Info Tag\r\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\r\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\r\n */\r\nexports.ExtendedLameHeader = {\r\n    len: 27,\r\n    get: (buf, off) => {\r\n        const track_peak = Token.UINT32_BE.get(buf, off + 2);\r\n        return {\r\n            revision: Util_1.default.getBitAllignedNumber(buf, off, 0, 4),\r\n            vbr_method: Util_1.default.getBitAllignedNumber(buf, off, 4, 4),\r\n            lowpass_filter: 100 * Token.UINT8.get(buf, off + 1),\r\n            track_peak: track_peak === 0 ? undefined : track_peak / Math.pow(2, 23),\r\n            track_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 6),\r\n            album_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 8),\r\n            music_length: Token.UINT32_BE.get(buf, off + 20),\r\n            music_crc: Token.UINT8.get(buf, off + 24),\r\n            header_crc: Token.UINT16_BE.get(buf, off + 24)\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}