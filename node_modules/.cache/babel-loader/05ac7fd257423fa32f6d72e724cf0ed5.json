{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AIFFParser = void 0;\n\nvar Token = require(\"token-types\");\n\nvar initDebug = require(\"debug\");\n\nvar strtok3 = require(\"strtok3/lib/core\");\n\nvar ID3v2Parser_1 = require(\"../id3v2/ID3v2Parser\");\n\nvar FourCC_1 = require(\"../common/FourCC\");\n\nvar BasicParser_1 = require(\"../common/BasicParser\");\n\nvar AiffToken = require(\"./AiffToken\");\n\nvar iff = require(\"../iff\");\n\nvar debug = initDebug('music-metadata:parser:aiff');\n/**\r\n * AIFF - Audio Interchange File Format\r\n *\r\n * Ref:\r\n *  http://www.onicos.com/staff/iz/formats/aiff.html\r\n *  http://muratnkonar.com/aiff/index.html\r\n *  http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html\r\n */\n\nvar AIFFParser = /*#__PURE__*/function (_BasicParser_1$BasicP) {\n  _inherits(AIFFParser, _BasicParser_1$BasicP);\n\n  var _super = _createSuper(AIFFParser);\n\n  function AIFFParser() {\n    _classCallCheck(this, AIFFParser);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AIFFParser, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var header, type, chunkHeader, nextChunk, bytesRead;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.tokenizer.readToken(iff.Header);\n\n              case 2:\n                header = _context.sent;\n\n                if (!(header.chunkID !== 'FORM')) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Invalid Chunk-ID, expected \\'FORM\\'');\n\n              case 5:\n                _context.next = 7;\n                return this.tokenizer.readToken(FourCC_1.FourCcToken);\n\n              case 7:\n                type = _context.sent;\n                _context.t0 = type;\n                _context.next = _context.t0 === 'AIFF' ? 11 : _context.t0 === 'AIFC' ? 14 : 17;\n                break;\n\n              case 11:\n                this.metadata.setFormat('container', type);\n                this.isCompressed = false;\n                return _context.abrupt(\"break\", 18);\n\n              case 14:\n                this.metadata.setFormat('container', 'AIFF-C');\n                this.isCompressed = true;\n                return _context.abrupt(\"break\", 18);\n\n              case 17:\n                throw Error('Unsupported AIFF type: ' + type);\n\n              case 18:\n                this.metadata.setFormat('lossless', !this.isCompressed);\n                _context.prev = 19;\n\n              case 20:\n                if (!(!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= iff.Header.len)) {\n                  _context.next = 34;\n                  break;\n                }\n\n                debug('Reading AIFF chunk at offset=' + this.tokenizer.position);\n                _context.next = 24;\n                return this.tokenizer.readToken(iff.Header);\n\n              case 24:\n                chunkHeader = _context.sent;\n                debug(\"Chunk id=\".concat(chunkHeader.chunkID));\n                nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);\n                _context.next = 29;\n                return this.readData(chunkHeader);\n\n              case 29:\n                bytesRead = _context.sent;\n                _context.next = 32;\n                return this.tokenizer.ignore(nextChunk - bytesRead);\n\n              case 32:\n                _context.next = 20;\n                break;\n\n              case 34:\n                _context.next = 43;\n                break;\n\n              case 36:\n                _context.prev = 36;\n                _context.t1 = _context[\"catch\"](19);\n\n                if (!(_context.t1 instanceof strtok3.EndOfStreamError)) {\n                  _context.next = 42;\n                  break;\n                }\n\n                debug(\"End-of-stream\");\n                _context.next = 43;\n                break;\n\n              case 42:\n                throw _context.t1;\n\n              case 43:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[19, 36]]);\n      }));\n\n      function parse() {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"readData\",\n    value: function () {\n      var _readData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(header) {\n        var common, id3_data, rst;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = header.chunkID;\n                _context2.next = _context2.t0 === 'COMM' ? 3 : _context2.t0 === 'ID3 ' ? 13 : _context2.t0 === 'SSND' ? 20 : 22;\n                break;\n\n              case 3:\n                _context2.next = 5;\n                return this.tokenizer.readToken(new AiffToken.Common(header, this.isCompressed));\n\n              case 5:\n                common = _context2.sent;\n                this.metadata.setFormat('bitsPerSample', common.sampleSize);\n                this.metadata.setFormat('sampleRate', common.sampleRate);\n                this.metadata.setFormat('numberOfChannels', common.numChannels);\n                this.metadata.setFormat('numberOfSamples', common.numSampleFrames);\n                this.metadata.setFormat('duration', common.numSampleFrames / common.sampleRate);\n                this.metadata.setFormat('codec', common.compressionName);\n                return _context2.abrupt(\"return\", header.chunkSize);\n\n              case 13:\n                _context2.next = 15;\n                return this.tokenizer.readToken(new Token.BufferType(header.chunkSize));\n\n              case 15:\n                id3_data = _context2.sent;\n                rst = strtok3.fromBuffer(id3_data);\n                _context2.next = 19;\n                return new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\n\n              case 19:\n                return _context2.abrupt(\"return\", header.chunkSize);\n\n              case 20:\n                // Sound Data Chunk\n                if (this.metadata.format.duration) {\n                  this.metadata.setFormat('bitrate', 8 * header.chunkSize / this.metadata.format.duration);\n                }\n\n                return _context2.abrupt(\"return\", 0);\n\n              case 22:\n                return _context2.abrupt(\"return\", 0);\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function readData(_x) {\n        return _readData.apply(this, arguments);\n      }\n\n      return readData;\n    }()\n  }]);\n\n  return AIFFParser;\n}(BasicParser_1.BasicParser);\n\nexports.AIFFParser = AIFFParser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/aiff/AiffParser.js"],"names":["Object","defineProperty","exports","value","AIFFParser","Token","require","initDebug","strtok3","ID3v2Parser_1","FourCC_1","BasicParser_1","AiffToken","iff","debug","tokenizer","readToken","Header","header","chunkID","Error","FourCcToken","type","metadata","setFormat","isCompressed","fileInfo","size","position","len","chunkHeader","nextChunk","Math","round","chunkSize","readData","bytesRead","ignore","EndOfStreamError","Common","common","sampleSize","sampleRate","numChannels","numSampleFrames","compressionName","BufferType","id3_data","rst","fromBuffer","ID3v2Parser","parse","options","format","duration","BasicParser"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AIFFParser = void 0;\r\nconst Token = require(\"token-types\");\r\nconst initDebug = require(\"debug\");\r\nconst strtok3 = require(\"strtok3/lib/core\");\r\nconst ID3v2Parser_1 = require(\"../id3v2/ID3v2Parser\");\r\nconst FourCC_1 = require(\"../common/FourCC\");\r\nconst BasicParser_1 = require(\"../common/BasicParser\");\r\nconst AiffToken = require(\"./AiffToken\");\r\nconst iff = require(\"../iff\");\r\nconst debug = initDebug('music-metadata:parser:aiff');\r\n/**\r\n * AIFF - Audio Interchange File Format\r\n *\r\n * Ref:\r\n *  http://www.onicos.com/staff/iz/formats/aiff.html\r\n *  http://muratnkonar.com/aiff/index.html\r\n *  http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html\r\n */\r\nclass AIFFParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(iff.Header);\r\n        if (header.chunkID !== 'FORM')\r\n            throw new Error('Invalid Chunk-ID, expected \\'FORM\\''); // Not AIFF format\r\n        const type = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n        switch (type) {\r\n            case 'AIFF':\r\n                this.metadata.setFormat('container', type);\r\n                this.isCompressed = false;\r\n                break;\r\n            case 'AIFC':\r\n                this.metadata.setFormat('container', 'AIFF-C');\r\n                this.isCompressed = true;\r\n                break;\r\n            default:\r\n                throw Error('Unsupported AIFF type: ' + type);\r\n        }\r\n        this.metadata.setFormat('lossless', !this.isCompressed);\r\n        try {\r\n            while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= iff.Header.len) {\r\n                debug('Reading AIFF chunk at offset=' + this.tokenizer.position);\r\n                const chunkHeader = await this.tokenizer.readToken(iff.Header);\r\n                debug(`Chunk id=${chunkHeader.chunkID}`);\r\n                const nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);\r\n                const bytesRead = await this.readData(chunkHeader);\r\n                await this.tokenizer.ignore(nextChunk - bytesRead);\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (err instanceof strtok3.EndOfStreamError) {\r\n                debug(`End-of-stream`);\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    async readData(header) {\r\n        switch (header.chunkID) {\r\n            case 'COMM': // The Common Chunk\r\n                const common = await this.tokenizer.readToken(new AiffToken.Common(header, this.isCompressed));\r\n                this.metadata.setFormat('bitsPerSample', common.sampleSize);\r\n                this.metadata.setFormat('sampleRate', common.sampleRate);\r\n                this.metadata.setFormat('numberOfChannels', common.numChannels);\r\n                this.metadata.setFormat('numberOfSamples', common.numSampleFrames);\r\n                this.metadata.setFormat('duration', common.numSampleFrames / common.sampleRate);\r\n                this.metadata.setFormat('codec', common.compressionName);\r\n                return header.chunkSize;\r\n            case 'ID3 ': // ID3-meta-data\r\n                const id3_data = await this.tokenizer.readToken(new Token.BufferType(header.chunkSize));\r\n                const rst = strtok3.fromBuffer(id3_data);\r\n                await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\r\n                return header.chunkSize;\r\n            case 'SSND': // Sound Data Chunk\r\n                if (this.metadata.format.duration) {\r\n                    this.metadata.setFormat('bitrate', 8 * header.chunkSize / this.metadata.format.duration);\r\n                }\r\n                return 0;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n}\r\nexports.AIFFParser = AIFFParser;\r\n"]},"metadata":{},"sourceType":"script"}