{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/types/create/PhotoPostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport randomstring from 'randomstring';\nimport Cookies from 'js-cookie';\nimport PhotoPostOrRegisterPhotoInput from '../../util/components/forms/inputTypes/Photo_Post_Or_Register_Photo_Input';\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text';\nimport Tags from '../../util/components/forms/Tags';\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close.js';\nimport Queries from '../../../../graphql/queries';\nimport Mutations from '../../../../graphql/mutations';\nimport PostFormUtil from '../../util/functions/post_form_util.js';\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  postCreate,\n  postUpdate\n} = UpdateCacheUtil;\nconst {\n  bodyPost,\n  mainPost,\n  handleFormData,\n  stripAllImgs,\n  handleUploadedFiles,\n  handleTagInput,\n  resetDisplayIdx,\n  handleMentions,\n  discardMentions,\n  handleAllTextPhotoPost,\n  allowScroll,\n  preventScroll\n} = PostFormUtil;\nconst {\n  CREATE_OR_UPDATE_POST\n} = Mutations;\nconst {\n  FETCH_USER_FEED\n} = Queries;\n\nconst PhotoPostForm = ({\n  mobile,\n  user,\n  post,\n  update,\n  setUpdate,\n  photoPostActive,\n  setPhotoPostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  _s();\n\n  let [mainImageFiles, setMainImageFiles] = useState([]);\n  let main = useRef([]);\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0);\n  let [confirmClose, setConfirmClose] = useState(false);\n  const formId = 'photoPostForm';\n  const formInputId = 'photoPostInput';\n  useEffect(() => {\n    preventScroll(photoPostActive, document);\n  }, [photoPostActive]);\n  useEffect(() => {\n    resetDisplayIdx(main);\n    resetDisplayIdx(body);\n  });\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, {\n      data\n    }) {\n      const {\n        createOrUpdatePost\n      } = data;\n      var currentUser = Cookies.get('currentUser');\n      var query = FETCH_USER_FEED;\n\n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query);\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query);\n      }\n    },\n\n    onCompleted() {\n      resetInputs();\n\n      if (post) {\n        setUpdate(update = false);\n        setUploading(uploading = false);\n      } else {\n        allowScroll(document);\n        setUploading(uploading = false);\n        setPhotoPostActive(photoPostActive = false);\n\n        if (mobile) {\n          setPostFormOpen(postFormOpen = false);\n        }\n\n        setUploading(uploading = false);\n      }\n    },\n\n    onError(error) {\n      console.log(error);\n    }\n\n  });\n\n  const resetInputs = () => {\n    setMainImageFiles(mainImageFiles = []);\n    setBodyImageFiles(bodyImageFiles = []);\n    setDescription(description = '');\n    body.current = [];\n    main.current = [];\n    allText.current = '';\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    var mainImagesFormData = handleFormData(mainImageFiles);\n    var bodyImagesFormData = handleFormData(bodyImageFiles);\n    Promise.all([mainPost(mainImagesFormData), bodyPost(bodyImagesFormData)]).then(([mainUploads, bodyUploads]) => {\n      var mentions = handleMentions(body, stripAllImgs);\n      discardMentions(post, mentions, objsToClean);\n      var descriptions = stripAllImgs(body);\n      handleAllTextPhotoPost(allText, descriptions);\n      var instanceData = {\n        variants: {\n          mainImages: handleUploadedFiles(main, mainUploads)\n        },\n        allText: allText.current,\n        descriptions: descriptions,\n        descriptionImages: handleUploadedFiles(body, bodyUploads),\n        mentions: mentions,\n        user: Cookies.get('currentUser'),\n        tags,\n        kind: 'PhotoPost',\n        objsToClean: objsToClean.current,\n        postId: post ? post._id : null\n      };\n      createOrUpdatePost({\n        variables: {\n          instanceData: instanceData\n        }\n      });\n    });\n  };\n\n  const disabledBool = () => {\n    return main.current.length === 0 && body.current.length === 0 && !description;\n  };\n\n  const handleTextPostFormClass = () => {\n    if (photoPostActive && !uploading || update) {\n      return 'postForm photoPostForm active';\n    } else if (photoPostActive && uploading) {\n      return 'postForm photoPostForm hidden';\n    } else {\n      return 'postForm photoPostForm none';\n    }\n  };\n\n  if (photoPostActive || update) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: update ? 'postFormContainer update' : 'postFormContainer',\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        user: update ? post.user : user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: handleTextPostFormClass(),\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          id: formId,\n          onSubmit: e => handleSubmit(e),\n          onKeyPress: e => {\n            e.key === 'Enter' && e.preventDefault();\n          },\n          encType: 'multipart/form-data',\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"userNameHeader\",\n            children: update ? post.user.blogName : user.blogName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PhotoPostOrRegisterPhotoInput, {\n            post: post,\n            update: update,\n            formId: formId,\n            formInputId: formInputId,\n            objsToClean: objsToClean,\n            main: main,\n            mainImageFiles: mainImageFiles,\n            setMainImageFiles: setMainImageFiles,\n            render: render,\n            setRender: setRender,\n            errMessage: errMessage,\n            setErrMessage: setErrMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(BodyImageAndText, {\n            displayBodyImageAndTextInput: true,\n            post: post,\n            update: update,\n            formId: formId,\n            formInputId: formInputId,\n            objsToClean: objsToClean,\n            body: body,\n            bodyImageFiles: bodyImageFiles,\n            setBodyImageFiles: setBodyImageFiles,\n            description: description,\n            setDescription: setDescription,\n            render: render,\n            setRender: setRender,\n            errMessage: errMessage,\n            setErrMessage: setErrMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Tags, {\n            post: post,\n            tag: tag,\n            setTag: setTag,\n            tags: tags,\n            setTags: setTags\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"closeOrPostContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"closeBtn\",\n              onClick: () => {\n                if (disabledBool()) {\n                  allowScroll(document);\n                  resetInputs();\n\n                  if (!update) {\n                    setPhotoPostActive(photoPostActive = false);\n                    setPostFormModal(postFormModal = false);\n                  } else {\n                    setUpdate(update = false);\n                  }\n\n                  if (mobile) {\n                    setPostFormOpen(postFormOpen = false);\n                  }\n                } else {\n                  setConfirmClose(confirmClose = true);\n                }\n              },\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(ConfirmClose, {\n              mobile: mobile,\n              update: update,\n              setUpdate: setUpdate,\n              confirmClose: confirmClose,\n              setConfirmClose: setConfirmClose,\n              allowScroll: allowScroll,\n              resetInputs: resetInputs,\n              setFormActive: setPhotoPostActive,\n              formActive: photoPostActive,\n              setPostFormModal: setPostFormModal,\n              postFormModal: postFormModal,\n              postFormOpen: postFormOpen,\n              setPostFormOpen: setPostFormOpen\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn',\n              disabled: disabledBool(),\n              onClick: () => {\n                if (description) {\n                  var textObj = {\n                    kind: 'text',\n                    srcType: 'text',\n                    content: description,\n                    displayIdx: body.current.length,\n                    uniqId: randomstring.generate({\n                      length: 12,\n                      charset: 'alphabetic'\n                    })\n                  };\n                  body.current.push(textObj);\n                  setDescription(description = '');\n                }\n\n                if (tag) {\n                  handleTagInput(tag, setTag, tags, setTags);\n                }\n\n                if (!update) {\n                  setPostFormModal(postFormModal = false);\n                }\n\n                setUploading(uploading = true);\n              },\n              children: post ? 'Update' : 'Post'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(PhotoPostForm, \"HJ77XVVJ7Rh6oUetCaCompwe3yg=\", false, function () {\n  return [useMutation];\n});\n\n_c = PhotoPostForm;\nexport default PhotoPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhotoPostForm\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/types/create/PhotoPostForm.js"],"names":["React","useState","useRef","useEffect","useMutation","randomstring","Cookies","PhotoPostOrRegisterPhotoInput","BodyImageAndText","Tags","ProfilePic","ConfirmClose","Queries","Mutations","PostFormUtil","UpdateCacheUtil","postCreate","postUpdate","bodyPost","mainPost","handleFormData","stripAllImgs","handleUploadedFiles","handleTagInput","resetDisplayIdx","handleMentions","discardMentions","handleAllTextPhotoPost","allowScroll","preventScroll","CREATE_OR_UPDATE_POST","FETCH_USER_FEED","PhotoPostForm","mobile","user","post","update","setUpdate","photoPostActive","setPhotoPostActive","postFormModal","setPostFormModal","postFormOpen","setPostFormOpen","uploading","setUploading","mainImageFiles","setMainImageFiles","main","objsToClean","description","setDescription","bodyImageFiles","setBodyImageFiles","body","allText","tag","setTag","tags","setTags","errMessage","setErrMessage","render","setRender","confirmClose","setConfirmClose","formId","formInputId","document","createOrUpdatePost","client","data","currentUser","get","query","onCompleted","resetInputs","onError","error","console","log","current","handleSubmit","e","preventDefault","mainImagesFormData","bodyImagesFormData","Promise","all","then","mainUploads","bodyUploads","mentions","descriptions","instanceData","variants","mainImages","descriptionImages","kind","postId","_id","variables","disabledBool","length","handleTextPostFormClass","key","blogName","textObj","srcType","content","displayIdx","uniqId","generate","charset","push"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport randomstring from 'randomstring';\nimport Cookies from 'js-cookie';\n\nimport PhotoPostOrRegisterPhotoInput from '../../util/components/forms/inputTypes/Photo_Post_Or_Register_Photo_Input'\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text'\nimport Tags from '../../util/components/forms/Tags'\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close.js';\n\nimport Queries from '../../../../graphql/queries';\nimport Mutations from '../../../../graphql/mutations';\nimport PostFormUtil from '../../util/functions/post_form_util.js'\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nconst { postCreate, postUpdate } = UpdateCacheUtil;\nconst { bodyPost, mainPost,\n        handleFormData, stripAllImgs,\n        handleUploadedFiles, handleTagInput,\n        resetDisplayIdx,\n        handleMentions, discardMentions,\n        handleAllTextPhotoPost, allowScroll,\n        preventScroll  } = PostFormUtil;\nconst { CREATE_OR_UPDATE_POST } = Mutations;\nconst { FETCH_USER_FEED } = Queries;\n\n\nconst PhotoPostForm = ({\n  mobile,\n  user,\n  post, \n  update,\n  setUpdate,\n  photoPostActive,\n  setPhotoPostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  let [mainImageFiles, setMainImageFiles] = useState([]);\n  let main = useRef([]);\n\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0)\n  let [confirmClose, setConfirmClose] = useState(false)\n  const formId = 'photoPostForm'\n  const formInputId = 'photoPostInput'\n\n  useEffect(() => {\n    \n    preventScroll(photoPostActive, document)\n    \n  }, [photoPostActive])\n\n  useEffect(() => {\n    resetDisplayIdx(main)\n    resetDisplayIdx(body)\n  })\n\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, { data }){\n      const { createOrUpdatePost } = data;\n      var currentUser = Cookies.get('currentUser')\n      var query = FETCH_USER_FEED\n      \n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query)\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query)\n      }\n    },\n    onCompleted() {\n      resetInputs();\n      if (post) {\n        setUpdate(update = false)\n        setUploading(uploading = false)\n      } else {\n        allowScroll(document)\n        setUploading(uploading = false)\n        setPhotoPostActive(photoPostActive = false)\n\n        if (mobile) {\n          setPostFormOpen(postFormOpen = false)\n        }\n\n        setUploading(uploading = false)\n      }\n    },\n    onError(error) {\n      console.log(error)\n    }\n  });\n\n  const resetInputs = () => {\n    setMainImageFiles(mainImageFiles = []);\n    setBodyImageFiles(bodyImageFiles = []);\n    setDescription(description = '');\n    body.current = [];\n    main.current = [];\n    allText.current = '';\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n  }\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    var mainImagesFormData = handleFormData(mainImageFiles)\n    var bodyImagesFormData = handleFormData(bodyImageFiles)\n\n    Promise.all([\n      mainPost(mainImagesFormData), \n      bodyPost(bodyImagesFormData)\n    ]).then(\n      ([mainUploads, bodyUploads]) => {\n\n        var mentions = handleMentions(body, stripAllImgs)\n        \n        discardMentions(post, mentions, objsToClean)\n\n        var descriptions = stripAllImgs(body)\n\n        handleAllTextPhotoPost(allText, descriptions)\n\n        var instanceData = {\n          variants: { mainImages: handleUploadedFiles(main, mainUploads) },\n          allText: allText.current,\n          descriptions: descriptions,\n          descriptionImages: handleUploadedFiles(body, bodyUploads),\n          mentions: mentions,\n          user: Cookies.get('currentUser'),\n          tags, kind: 'PhotoPost',\n          objsToClean: objsToClean.current,\n          postId: post ? post._id : null\n        }\n        \n        createOrUpdatePost({\n          variables: {\n            instanceData: instanceData\n          }\n        })\n      }\n    )\n  }\n\n  const disabledBool = () => {\n    return main.current.length === 0 && \n    body.current.length === 0 && \n    !description\n  }\n\n  const handleTextPostFormClass = () => {\n    if ((photoPostActive && !uploading) || update) {\n      return 'postForm photoPostForm active'\n    } else if (photoPostActive && uploading) {\n      return 'postForm photoPostForm hidden'\n    } else {\n      return 'postForm photoPostForm none'\n    }\n  }\n\n  if (photoPostActive || update) {\n    return (\n    <div\n      className={update ? 'postFormContainer update' : 'postFormContainer'}\n    >\n\n      <ProfilePic user={update ? post.user : user} />\n      \n      <div\n        className={handleTextPostFormClass()}\n      >\n        <form\n          id={formId}\n          onSubmit={e => handleSubmit(e)}\n          onKeyPress={e => { e.key === 'Enter' && e.preventDefault() }}\n          encType={'multipart/form-data'}\n        >\n\n          <h3\n            className='userNameHeader'\n          >{update ? post.user.blogName : user.blogName}</h3>\n        \n          <PhotoPostOrRegisterPhotoInput\n            post={post}\n            update={update}\n            formId={formId}\n            formInputId={formInputId}\n            objsToClean={objsToClean}\n            main={main}\n            mainImageFiles={mainImageFiles}\n            setMainImageFiles={setMainImageFiles}\n            render={render}\n            setRender={setRender}\n            errMessage={errMessage}\n            setErrMessage={setErrMessage}\n          />\n  \n          <BodyImageAndText\n            displayBodyImageAndTextInput={true}\n            post={post}\n            update={update}\n            formId={formId}\n            formInputId={formInputId}\n            objsToClean={objsToClean}\n            body={body}\n            bodyImageFiles={bodyImageFiles}\n            setBodyImageFiles={setBodyImageFiles}\n            description={description}\n            setDescription={setDescription}\n            render={render}\n            setRender={setRender}\n            errMessage={errMessage}\n            setErrMessage={setErrMessage}\n          />\n  \n          <Tags\n            post={post}\n            tag={tag}\n            setTag={setTag}\n            tags={tags}\n            setTags={setTags}\n          />\n        <div\n          className='closeOrPostContainer'\n        >\n          <div\n            className='closeBtn'\n            onClick={() => {\n              if (disabledBool()) {\n                allowScroll(document)\n                resetInputs()\n                \n                if (!update) {\n                  setPhotoPostActive(photoPostActive = false)\n                  setPostFormModal(postFormModal = false)\n                } else {\n                  setUpdate(update = false)\n                }\n\n                if (mobile) {\n                  setPostFormOpen(postFormOpen = false)\n                }\n              } else {\n                setConfirmClose(confirmClose = true)\n              }\n            }}\n          >\n            Close\n          </div>\n\n          <ConfirmClose\n            mobile={mobile}\n            update={update}\n            setUpdate={setUpdate}\n            confirmClose={confirmClose}\n            setConfirmClose={setConfirmClose}\n            allowScroll={allowScroll}\n            resetInputs={resetInputs}\n            setFormActive={setPhotoPostActive}\n            formActive={photoPostActive}\n            setPostFormModal={setPostFormModal}\n            postFormModal={postFormModal}\n            postFormOpen={postFormOpen}\n            setPostFormOpen={setPostFormOpen}\n          />\n  \n          <button\n            type='submit'\n            className={disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn'}\n            disabled={disabledBool()}\n            onClick={() => {\n              if (description) {\n                var textObj = {\n                  kind: 'text',\n                  srcType: 'text',\n                  content: description,\n                  displayIdx: body.current.length,\n                  uniqId: randomstring.generate({\n                    length: 12,\n                    charset: 'alphabetic'\n                  })\n                }\n\n                body.current.push(textObj)\n              \n                setDescription(description = '')\n              }\n              \n              if (tag) {\n                handleTagInput(\n                  tag, setTag,\n                  tags, setTags\n                )\n              }\n              \n              if (!update) {\n                setPostFormModal(postFormModal = false)\n              }\n\n              setUploading(uploading = true)\n            }}\n          >\n            {post ? 'Update': 'Post'}\n          </button>\n        </div>\n        </form>\n      </div>\n    </div>\n    )\n  } else {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default PhotoPostForm;"]},"metadata":{},"sourceType":"module"}