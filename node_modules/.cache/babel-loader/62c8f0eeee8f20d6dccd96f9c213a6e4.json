{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonTagMapper = void 0;\n\nclass CommonTagMapper {\n  constructor(tagTypes, tagMap) {\n    this.tagTypes = tagTypes;\n    this.tagMap = tagMap;\n  }\n\n  static toIntOrNull(str) {\n    const cleaned = parseInt(str, 10);\n    return isNaN(cleaned) ? null : cleaned;\n  } // TODO: a string of 1of1 would fail to be converted\n  // converts 1/10 to no : 1, of : 10\n  // or 1 to no : 1, of : 0\n\n\n  static normalizeTrack(origVal) {\n    const split = origVal.toString().split('/');\n    return {\n      no: parseInt(split[0], 10) || null,\n      of: parseInt(split[1], 10) || null\n    };\n  }\n  /**\r\n   * Process and set common tags\r\n   * write common tags to\r\n   * @param tag Native tag\r\n   * @param warnings Register warnings\r\n   * @return common name\r\n   */\n\n\n  mapGenericTag(tag, warnings) {\n    tag = {\n      id: tag.id,\n      value: tag.value\n    }; // clone object\n\n    this.postMap(tag, warnings); // Convert native tag event to generic 'alias' tag\n\n    const id = this.getCommonName(tag.id);\n    return id ? {\n      id,\n      value: tag.value\n    } : null;\n  }\n  /**\r\n   * Convert native tag key to common tag key\r\n   * @tag  Native header tag\r\n   * @return common tag name (alias)\r\n   */\n\n\n  getCommonName(tag) {\n    return this.tagMap[tag];\n  }\n  /**\r\n   * Handle post mapping exceptions / correction\r\n   * @param {string} tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\r\n   * @param {warnings} Used to register warnings\r\n   */\n\n\n  postMap(tag, warnings) {\n    return;\n  }\n\n}\n\nexports.CommonTagMapper = CommonTagMapper;\nCommonTagMapper.maxRatingScore = 1;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/common/GenericTagMapper.js"],"names":["Object","defineProperty","exports","value","CommonTagMapper","constructor","tagTypes","tagMap","toIntOrNull","str","cleaned","parseInt","isNaN","normalizeTrack","origVal","split","toString","no","of","mapGenericTag","tag","warnings","id","postMap","getCommonName","maxRatingScore"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,MAAMA,eAAN,CAAsB;AAClBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAC1B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACiB,SAAXC,WAAW,CAACC,GAAD,EAAM;AACpB,UAAMC,OAAO,GAAGC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAxB;AACA,WAAOG,KAAK,CAACF,OAAD,CAAL,GAAiB,IAAjB,GAAwBA,OAA/B;AACH,GARiB,CASlB;AACA;AACA;;;AACqB,SAAdG,cAAc,CAACC,OAAD,EAAU;AAC3B,UAAMC,KAAK,GAAGD,OAAO,CAACE,QAAR,GAAmBD,KAAnB,CAAyB,GAAzB,CAAd;AACA,WAAO;AACHE,MAAAA,EAAE,EAAEN,QAAQ,CAACI,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,IAA0B,IAD3B;AAEHG,MAAAA,EAAE,EAAEP,QAAQ,CAACI,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,IAA0B;AAF3B,KAAP;AAIH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACII,EAAAA,aAAa,CAACC,GAAD,EAAMC,QAAN,EAAgB;AACzBD,IAAAA,GAAG,GAAG;AAAEE,MAAAA,EAAE,EAAEF,GAAG,CAACE,EAAV;AAAcnB,MAAAA,KAAK,EAAEiB,GAAG,CAACjB;AAAzB,KAAN,CADyB,CACe;;AACxC,SAAKoB,OAAL,CAAaH,GAAb,EAAkBC,QAAlB,EAFyB,CAGzB;;AACA,UAAMC,EAAE,GAAG,KAAKE,aAAL,CAAmBJ,GAAG,CAACE,EAAvB,CAAX;AACA,WAAOA,EAAE,GAAG;AAAEA,MAAAA,EAAF;AAAMnB,MAAAA,KAAK,EAAEiB,GAAG,CAACjB;AAAjB,KAAH,GAA8B,IAAvC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIqB,EAAAA,aAAa,CAACJ,GAAD,EAAM;AACf,WAAO,KAAKb,MAAL,CAAYa,GAAZ,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,OAAO,CAACH,GAAD,EAAMC,QAAN,EAAgB;AACnB;AACH;;AAhDiB;;AAkDtBnB,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAA,eAAe,CAACqB,cAAhB,GAAiC,CAAjC","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CommonTagMapper = void 0;\r\nclass CommonTagMapper {\r\n    constructor(tagTypes, tagMap) {\r\n        this.tagTypes = tagTypes;\r\n        this.tagMap = tagMap;\r\n    }\r\n    static toIntOrNull(str) {\r\n        const cleaned = parseInt(str, 10);\r\n        return isNaN(cleaned) ? null : cleaned;\r\n    }\r\n    // TODO: a string of 1of1 would fail to be converted\r\n    // converts 1/10 to no : 1, of : 10\r\n    // or 1 to no : 1, of : 0\r\n    static normalizeTrack(origVal) {\r\n        const split = origVal.toString().split('/');\r\n        return {\r\n            no: parseInt(split[0], 10) || null,\r\n            of: parseInt(split[1], 10) || null\r\n        };\r\n    }\r\n    /**\r\n     * Process and set common tags\r\n     * write common tags to\r\n     * @param tag Native tag\r\n     * @param warnings Register warnings\r\n     * @return common name\r\n     */\r\n    mapGenericTag(tag, warnings) {\r\n        tag = { id: tag.id, value: tag.value }; // clone object\r\n        this.postMap(tag, warnings);\r\n        // Convert native tag event to generic 'alias' tag\r\n        const id = this.getCommonName(tag.id);\r\n        return id ? { id, value: tag.value } : null;\r\n    }\r\n    /**\r\n     * Convert native tag key to common tag key\r\n     * @tag  Native header tag\r\n     * @return common tag name (alias)\r\n     */\r\n    getCommonName(tag) {\r\n        return this.tagMap[tag];\r\n    }\r\n    /**\r\n     * Handle post mapping exceptions / correction\r\n     * @param {string} tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\r\n     * @param {warnings} Used to register warnings\r\n     */\r\n    postMap(tag, warnings) {\r\n        return;\r\n    }\r\n}\r\nexports.CommonTagMapper = CommonTagMapper;\r\nCommonTagMapper.maxRatingScore = 1;\r\n"]},"metadata":{},"sourceType":"script"}