{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WavPackParser = void 0;\n\nvar Token = require(\"token-types\");\n\nvar APEv2Parser_1 = require(\"../apev2/APEv2Parser\");\n\nvar FourCC_1 = require(\"../common/FourCC\");\n\nvar BasicParser_1 = require(\"../common/BasicParser\");\n\nvar WavPackToken_1 = require(\"./WavPackToken\");\n\nvar initDebug = require(\"debug\");\n\nvar debug = initDebug('music-metadata:parser:WavPack');\n/**\r\n * WavPack Parser\r\n */\n\nvar WavPackParser = /*#__PURE__*/function (_BasicParser_1$BasicP) {\n  _inherits(WavPackParser, _BasicParser_1$BasicP);\n\n  var _super = _createSuper(WavPackParser);\n\n  function WavPackParser() {\n    _classCallCheck(this, WavPackParser);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WavPackParser, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.audioDataSize = 0; // First parse all WavPack blocks\n\n                _context.next = 3;\n                return this.parseWavPackBlocks();\n\n              case 3:\n                return _context.abrupt(\"return\", APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function parse() {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"parseWavPackBlocks\",\n    value: function () {\n      var _parseWavPackBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var blockId, header, ignoreBytes;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.tokenizer.peekToken(FourCC_1.FourCcToken);\n\n              case 2:\n                blockId = _context2.sent;\n\n                if (!(blockId !== 'wvpk')) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"break\", 22);\n\n              case 5:\n                _context2.next = 7;\n                return this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);\n\n              case 7:\n                header = _context2.sent;\n\n                if (!(header.BlockID !== 'wvpk')) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                throw new Error('Invalid WavPack Block-ID');\n\n              case 10:\n                debug(\"WavPack header blockIndex=\".concat(header.blockIndex, \", len=\").concat(WavPackToken_1.WavPack.BlockHeaderToken.len));\n\n                if (header.blockIndex === 0 && !this.metadata.format.container) {\n                  this.metadata.setFormat('container', 'WavPack');\n                  this.metadata.setFormat('lossless', !header.flags.isHybrid); // tagTypes: this.type,\n\n                  this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n\n                  if (!header.flags.isDSD) {\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n                  }\n\n                  this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n                  this.metadata.setFormat('numberOfSamples', header.totalSamples);\n                  this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n                }\n\n                ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);\n\n                if (!(header.blockIndex === 0)) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.next = 16;\n                return this.parseMetadataSubBlock(header, ignoreBytes);\n\n              case 16:\n                _context2.next = 20;\n                break;\n\n              case 18:\n                _context2.next = 20;\n                return this.tokenizer.ignore(ignoreBytes);\n\n              case 20:\n                if (header.blockSamples > 0) {\n                  this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n                }\n\n              case 21:\n                if (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len) {\n                  _context2.next = 0;\n                  break;\n                }\n\n              case 22:\n                this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function parseWavPackBlocks() {\n        return _parseWavPackBlocks.apply(this, arguments);\n      }\n\n      return parseWavPackBlocks;\n    }()\n    /**\r\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\r\n     * @param remainingLength\r\n     */\n\n  }, {\n    key: \"parseMetadataSubBlock\",\n    value: function () {\n      var _parseMetadataSubBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(header, remainingLength) {\n        var id, dataSizeInWords, data, mp, samplingRate;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len)) {\n                  _context3.next = 36;\n                  break;\n                }\n\n                _context3.next = 3;\n                return this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);\n\n              case 3:\n                id = _context3.sent;\n                _context3.next = 6;\n                return this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n\n              case 6:\n                dataSizeInWords = _context3.sent;\n                data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n                _context3.next = 10;\n                return this.tokenizer.readBuffer(data);\n\n              case 10:\n                debug(\"Metadata Sub-Blocks functionId=0x\".concat(id.functionId.toString(16), \", id.largeBlock=\").concat(id.largeBlock, \",data-size=\").concat(data.length));\n                _context3.t0 = id.functionId;\n                _context3.next = _context3.t0 === 0x0 ? 14 : _context3.t0 === 0xe ? 15 : _context3.t0 === 0x24 ? 23 : _context3.t0 === 0x26 ? 25 : _context3.t0 === 0x2f ? 27 : 29;\n                break;\n\n              case 14:\n                return _context3.abrupt(\"break\", 31);\n\n              case 15:\n                // ID_DSD_BLOCK\n                debug('ID_DSD_BLOCK'); // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n\n                mp = 1 << data.readUInt8(0);\n                samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n\n                if (header.flags.isDSD) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                throw new Error('Only expect DSD block if DSD-flag is set');\n\n              case 20:\n                this.metadata.setFormat('sampleRate', samplingRate);\n                this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n                return _context3.abrupt(\"break\", 31);\n\n              case 23:\n                // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n                debug('ID_ALT_TRAILER: trailer for non-wav files');\n                return _context3.abrupt(\"break\", 31);\n\n              case 25:\n                // ID_MD5_CHECKSUM\n                this.metadata.setFormat('audioMD5', data);\n                return _context3.abrupt(\"break\", 31);\n\n              case 27:\n                // ID_BLOCK_CHECKSUM\n                debug(\"ID_BLOCK_CHECKSUM: checksum=\".concat(data.toString('hex')));\n                return _context3.abrupt(\"break\", 31);\n\n              case 29:\n                debug(\"Ignore unsupported meta-sub-block-id functionId=0x\".concat(id.functionId.toString(16)));\n                return _context3.abrupt(\"break\", 31);\n\n              case 31:\n                remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n                debug(\"remainingLength=\".concat(remainingLength));\n                if (id.isOddSize) this.tokenizer.ignore(1);\n                _context3.next = 0;\n                break;\n\n              case 36:\n                if (!(remainingLength !== 0)) {\n                  _context3.next = 38;\n                  break;\n                }\n\n                throw new Error('metadata-sub-block should fit it remaining length');\n\n              case 38:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function parseMetadataSubBlock(_x, _x2) {\n        return _parseMetadataSubBlock.apply(this, arguments);\n      }\n\n      return parseMetadataSubBlock;\n    }()\n  }]);\n\n  return WavPackParser;\n}(BasicParser_1.BasicParser);\n\nexports.WavPackParser = WavPackParser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/wavpack/WavPackParser.js"],"names":["Object","defineProperty","exports","value","WavPackParser","Token","require","APEv2Parser_1","FourCC_1","BasicParser_1","WavPackToken_1","initDebug","debug","audioDataSize","parseWavPackBlocks","APEv2Parser","tryParseApeHeader","metadata","tokenizer","options","peekToken","FourCcToken","blockId","readToken","WavPack","BlockHeaderToken","header","BlockID","Error","blockIndex","len","format","container","setFormat","flags","isHybrid","bitsPerSample","isDSD","samplingRate","totalSamples","isMono","ignoreBytes","blockSize","parseMetadataSubBlock","ignore","blockSamples","fileInfo","size","position","duration","remainingLength","MetadataIdToken","id","readNumber","largeBlock","UINT24_LE","UINT8","dataSizeInWords","data","Buffer","alloc","isOddSize","readBuffer","functionId","toString","length","mp","readUInt8","BasicParser"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WavPackParser = void 0;\r\nconst Token = require(\"token-types\");\r\nconst APEv2Parser_1 = require(\"../apev2/APEv2Parser\");\r\nconst FourCC_1 = require(\"../common/FourCC\");\r\nconst BasicParser_1 = require(\"../common/BasicParser\");\r\nconst WavPackToken_1 = require(\"./WavPackToken\");\r\nconst initDebug = require(\"debug\");\r\nconst debug = initDebug('music-metadata:parser:WavPack');\r\n/**\r\n * WavPack Parser\r\n */\r\nclass WavPackParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        this.audioDataSize = 0;\r\n        // First parse all WavPack blocks\r\n        await this.parseWavPackBlocks();\r\n        // try to parse APEv2 header\r\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\r\n    }\r\n    async parseWavPackBlocks() {\r\n        do {\r\n            const blockId = await this.tokenizer.peekToken(FourCC_1.FourCcToken);\r\n            if (blockId !== 'wvpk')\r\n                break;\r\n            const header = await this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);\r\n            if (header.BlockID !== 'wvpk')\r\n                throw new Error('Invalid WavPack Block-ID');\r\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${WavPackToken_1.WavPack.BlockHeaderToken.len}`);\r\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\r\n                this.metadata.setFormat('container', 'WavPack');\r\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\r\n                // tagTypes: this.type,\r\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\r\n                if (!header.flags.isDSD) {\r\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\r\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\r\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\r\n                }\r\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\r\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\r\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\r\n            }\r\n            const ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);\r\n            if (header.blockIndex === 0) {\r\n                // Meta-data block\r\n                await this.parseMetadataSubBlock(header, ignoreBytes);\r\n            }\r\n            else {\r\n                await this.tokenizer.ignore(ignoreBytes);\r\n            }\r\n            if (header.blockSamples > 0) {\r\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\r\n            }\r\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len);\r\n        this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\r\n    }\r\n    /**\r\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\r\n     * @param remainingLength\r\n     */\r\n    async parseMetadataSubBlock(header, remainingLength) {\r\n        while (remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len) {\r\n            const id = await this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);\r\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\r\n            const data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\r\n            await this.tokenizer.readBuffer(data);\r\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\r\n            switch (id.functionId) {\r\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\r\n                    break;\r\n                case 0xe: // ID_DSD_BLOCK\r\n                    debug('ID_DSD_BLOCK');\r\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\r\n                    const mp = 1 << data.readUInt8(0);\r\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\r\n                    if (!header.flags.isDSD)\r\n                        throw new Error('Only expect DSD block if DSD-flag is set');\r\n                    this.metadata.setFormat('sampleRate', samplingRate);\r\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\r\n                    break;\r\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\r\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\r\n                    break;\r\n                case 0x26: // ID_MD5_CHECKSUM\r\n                    this.metadata.setFormat('audioMD5', data);\r\n                    break;\r\n                case 0x2f: // ID_BLOCK_CHECKSUM\r\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${data.toString('hex')}`);\r\n                    break;\r\n                default:\r\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\r\n                    break;\r\n            }\r\n            remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\r\n            debug(`remainingLength=${remainingLength}`);\r\n            if (id.isOddSize)\r\n                this.tokenizer.ignore(1);\r\n        }\r\n        if (remainingLength !== 0)\r\n            throw new Error('metadata-sub-block should fit it remaining length');\r\n    }\r\n}\r\nexports.WavPackParser = WavPackParser;\r\n"]},"metadata":{},"sourceType":"script"}