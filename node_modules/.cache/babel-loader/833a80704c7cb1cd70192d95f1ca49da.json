{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpusParser = void 0;\n\nconst Token = require(\"token-types\");\n\nconst Opus = require(\"./Opus\");\n\nconst VorbisParser_1 = require(\"../vorbis/VorbisParser\");\n/**\r\n * Opus parser\r\n * Internet Engineering Task Force (IETF) - RFC 6716\r\n * Used by OggParser\r\n */\n\n\nclass OpusParser extends VorbisParser_1.VorbisParser {\n  constructor(metadata, options, tokenizer) {\n    super(metadata, options);\n    this.tokenizer = tokenizer;\n    this.lastPos = -1;\n  }\n  /**\r\n   * Parse first Opus Ogg page\r\n   * @param {IPageHeader} header\r\n   * @param {Buffer} pageData\r\n   */\n\n\n  parseFirstPage(header, pageData) {\n    this.metadata.setFormat('codec', 'Opus'); // Parse Opus ID Header\n\n    this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\n    if (this.idHeader.magicSignature !== \"OpusHead\") throw new Error(\"Illegal ogg/Opus magic-signature\");\n    this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\n    this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\n  }\n\n  parseFullPage(pageData) {\n    const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\n\n    switch (magicSignature) {\n      case 'OpusTags':\n        this.parseUserCommentList(pageData, 8);\n        this.lastPos = this.tokenizer.position - pageData.length;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  calculateDuration(header) {\n    if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n      // Calculate duration\n      const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;\n      this.metadata.setFormat('numberOfSamples', pos_48bit);\n      this.metadata.setFormat('duration', pos_48bit / 48000);\n\n      if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n        const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\n        this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n      }\n    }\n  }\n\n}\n\nexports.OpusParser = OpusParser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/ogg/opus/OpusParser.js"],"names":["Object","defineProperty","exports","value","OpusParser","Token","require","Opus","VorbisParser_1","VorbisParser","constructor","metadata","options","tokenizer","lastPos","parseFirstPage","header","pageData","setFormat","idHeader","IdHeader","length","get","magicSignature","Error","inputSampleRate","channelCount","parseFullPage","StringType","parseUserCommentList","position","calculateDuration","format","sampleRate","absoluteGranulePosition","pos_48bit","preSkip","fileInfo","size","duration","dataSize"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,wBAAD,CAA9B;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,UAAN,SAAyBI,cAAc,CAACC,YAAxC,CAAqD;AACjDC,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoBC,SAApB,EAA+B;AACtC,UAAMF,QAAN,EAAgBC,OAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAe,CAAC,CAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,cAAc,CAACC,MAAD,EAASC,QAAT,EAAmB;AAC7B,SAAKN,QAAL,CAAcO,SAAd,CAAwB,OAAxB,EAAiC,MAAjC,EAD6B,CAE7B;;AACA,SAAKC,QAAL,GAAgB,IAAIZ,IAAI,CAACa,QAAT,CAAkBH,QAAQ,CAACI,MAA3B,EAAmCC,GAAnC,CAAuCL,QAAvC,EAAiD,CAAjD,CAAhB;AACA,QAAI,KAAKE,QAAL,CAAcI,cAAd,KAAiC,UAArC,EACI,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACJ,SAAKb,QAAL,CAAcO,SAAd,CAAwB,YAAxB,EAAsC,KAAKC,QAAL,CAAcM,eAApD;AACA,SAAKd,QAAL,CAAcO,SAAd,CAAwB,kBAAxB,EAA4C,KAAKC,QAAL,CAAcO,YAA1D;AACH;;AACDC,EAAAA,aAAa,CAACV,QAAD,EAAW;AACpB,UAAMM,cAAc,GAAG,IAAIlB,KAAK,CAACuB,UAAV,CAAqB,CAArB,EAAwB,OAAxB,EAAiCN,GAAjC,CAAqCL,QAArC,EAA+C,CAA/C,CAAvB;;AACA,YAAQM,cAAR;AACI,WAAK,UAAL;AACI,aAAKM,oBAAL,CAA0BZ,QAA1B,EAAoC,CAApC;AACA,aAAKH,OAAL,GAAe,KAAKD,SAAL,CAAeiB,QAAf,GAA0Bb,QAAQ,CAACI,MAAlD;AACA;;AACJ;AACI;AANR;AAQH;;AACDU,EAAAA,iBAAiB,CAACf,MAAD,EAAS;AACtB,QAAI,KAAKL,QAAL,CAAcqB,MAAd,CAAqBC,UAArB,IAAmCjB,MAAM,CAACkB,uBAAP,IAAkC,CAAzE,EAA4E;AACxE;AACA,YAAMC,SAAS,GAAGnB,MAAM,CAACkB,uBAAP,GAAiC,KAAKf,QAAL,CAAciB,OAAjE;AACA,WAAKzB,QAAL,CAAcO,SAAd,CAAwB,iBAAxB,EAA2CiB,SAA3C;AACA,WAAKxB,QAAL,CAAcO,SAAd,CAAwB,UAAxB,EAAoCiB,SAAS,GAAG,KAAhD;;AACA,UAAI,KAAKrB,OAAL,KAAiB,CAAC,CAAlB,IAAuB,KAAKD,SAAL,CAAewB,QAAf,CAAwBC,IAA/C,IAAuD,KAAK3B,QAAL,CAAcqB,MAAd,CAAqBO,QAAhF,EAA0F;AACtF,cAAMC,QAAQ,GAAG,KAAK3B,SAAL,CAAewB,QAAf,CAAwBC,IAAxB,GAA+B,KAAKxB,OAArD;AACA,aAAKH,QAAL,CAAcO,SAAd,CAAwB,SAAxB,EAAmC,IAAIsB,QAAJ,GAAe,KAAK7B,QAAL,CAAcqB,MAAd,CAAqBO,QAAvE;AACH;AACJ;AACJ;;AA1CgD;;AA4CrDrC,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OpusParser = void 0;\r\nconst Token = require(\"token-types\");\r\nconst Opus = require(\"./Opus\");\r\nconst VorbisParser_1 = require(\"../vorbis/VorbisParser\");\r\n/**\r\n * Opus parser\r\n * Internet Engineering Task Force (IETF) - RFC 6716\r\n * Used by OggParser\r\n */\r\nclass OpusParser extends VorbisParser_1.VorbisParser {\r\n    constructor(metadata, options, tokenizer) {\r\n        super(metadata, options);\r\n        this.tokenizer = tokenizer;\r\n        this.lastPos = -1;\r\n    }\r\n    /**\r\n     * Parse first Opus Ogg page\r\n     * @param {IPageHeader} header\r\n     * @param {Buffer} pageData\r\n     */\r\n    parseFirstPage(header, pageData) {\r\n        this.metadata.setFormat('codec', 'Opus');\r\n        // Parse Opus ID Header\r\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\r\n        if (this.idHeader.magicSignature !== \"OpusHead\")\r\n            throw new Error(\"Illegal ogg/Opus magic-signature\");\r\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\r\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\r\n    }\r\n    parseFullPage(pageData) {\r\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\r\n        switch (magicSignature) {\r\n            case 'OpusTags':\r\n                this.parseUserCommentList(pageData, 8);\r\n                this.lastPos = this.tokenizer.position - pageData.length;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    calculateDuration(header) {\r\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\r\n            // Calculate duration\r\n            const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;\r\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\r\n            this.metadata.setFormat('duration', pos_48bit / 48000);\r\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\r\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\r\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.OpusParser = OpusParser;\r\n"]},"metadata":{},"sourceType":"script"}