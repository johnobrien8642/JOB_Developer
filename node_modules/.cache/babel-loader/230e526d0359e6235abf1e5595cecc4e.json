{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonTagMapper = void 0;\n\nvar CommonTagMapper = /*#__PURE__*/function () {\n  function CommonTagMapper(tagTypes, tagMap) {\n    _classCallCheck(this, CommonTagMapper);\n\n    this.tagTypes = tagTypes;\n    this.tagMap = tagMap;\n  }\n\n  _createClass(CommonTagMapper, [{\n    key: \"mapGenericTag\",\n    value:\n    /**\r\n     * Process and set common tags\r\n     * write common tags to\r\n     * @param tag Native tag\r\n     * @param warnings Register warnings\r\n     * @return common name\r\n     */\n    function mapGenericTag(tag, warnings) {\n      tag = {\n        id: tag.id,\n        value: tag.value\n      }; // clone object\n\n      this.postMap(tag, warnings); // Convert native tag event to generic 'alias' tag\n\n      var id = this.getCommonName(tag.id);\n      return id ? {\n        id: id,\n        value: tag.value\n      } : null;\n    }\n    /**\r\n     * Convert native tag key to common tag key\r\n     * @tag  Native header tag\r\n     * @return common tag name (alias)\r\n     */\n\n  }, {\n    key: \"getCommonName\",\n    value: function getCommonName(tag) {\n      return this.tagMap[tag];\n    }\n    /**\r\n     * Handle post mapping exceptions / correction\r\n     * @param {string} tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\r\n     * @param {warnings} Used to register warnings\r\n     */\n\n  }, {\n    key: \"postMap\",\n    value: function postMap(tag, warnings) {\n      return;\n    }\n  }], [{\n    key: \"toIntOrNull\",\n    value: function toIntOrNull(str) {\n      var cleaned = parseInt(str, 10);\n      return isNaN(cleaned) ? null : cleaned;\n    } // TODO: a string of 1of1 would fail to be converted\n    // converts 1/10 to no : 1, of : 10\n    // or 1 to no : 1, of : 0\n\n  }, {\n    key: \"normalizeTrack\",\n    value: function normalizeTrack(origVal) {\n      var split = origVal.toString().split('/');\n      return {\n        no: parseInt(split[0], 10) || null,\n        of: parseInt(split[1], 10) || null\n      };\n    }\n  }]);\n\n  return CommonTagMapper;\n}();\n\nexports.CommonTagMapper = CommonTagMapper;\nCommonTagMapper.maxRatingScore = 1;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/common/GenericTagMapper.js"],"names":["Object","defineProperty","exports","value","CommonTagMapper","tagTypes","tagMap","tag","warnings","id","postMap","getCommonName","str","cleaned","parseInt","isNaN","origVal","split","toString","no","of","maxRatingScore"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;IACMA,e;AACF,2BAAYC,QAAZ,EAAsBC,MAAtB,EAA8B;AAAA;;AAC1B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;;;;AAeD;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,2BAAcC,GAAd,EAAmBC,QAAnB,EAA6B;AACzBD,MAAAA,GAAG,GAAG;AAAEE,QAAAA,EAAE,EAAEF,GAAG,CAACE,EAAV;AAAcN,QAAAA,KAAK,EAAEI,GAAG,CAACJ;AAAzB,OAAN,CADyB,CACe;;AACxC,WAAKO,OAAL,CAAaH,GAAb,EAAkBC,QAAlB,EAFyB,CAGzB;;AACA,UAAMC,EAAE,GAAG,KAAKE,aAAL,CAAmBJ,GAAG,CAACE,EAAvB,CAAX;AACA,aAAOA,EAAE,GAAG;AAAEA,QAAAA,EAAE,EAAFA,EAAF;AAAMN,QAAAA,KAAK,EAAEI,GAAG,CAACJ;AAAjB,OAAH,GAA8B,IAAvC;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,uBAAcI,GAAd,EAAmB;AACf,aAAO,KAAKD,MAAL,CAAYC,GAAZ,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,iBAAQA,GAAR,EAAaC,QAAb,EAAuB;AACnB;AACH;;;WA3CD,qBAAmBI,GAAnB,EAAwB;AACpB,UAAMC,OAAO,GAAGC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAxB;AACA,aAAOG,KAAK,CAACF,OAAD,CAAL,GAAiB,IAAjB,GAAwBA,OAA/B;AACH,K,CACD;AACA;AACA;;;;WACA,wBAAsBG,OAAtB,EAA+B;AAC3B,UAAMC,KAAK,GAAGD,OAAO,CAACE,QAAR,GAAmBD,KAAnB,CAAyB,GAAzB,CAAd;AACA,aAAO;AACHE,QAAAA,EAAE,EAAEL,QAAQ,CAACG,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,IAA0B,IAD3B;AAEHG,QAAAA,EAAE,EAAEN,QAAQ,CAACG,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,IAA0B;AAF3B,OAAP;AAIH;;;;;;AAgCLf,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAA,eAAe,CAACiB,cAAhB,GAAiC,CAAjC","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CommonTagMapper = void 0;\r\nclass CommonTagMapper {\r\n    constructor(tagTypes, tagMap) {\r\n        this.tagTypes = tagTypes;\r\n        this.tagMap = tagMap;\r\n    }\r\n    static toIntOrNull(str) {\r\n        const cleaned = parseInt(str, 10);\r\n        return isNaN(cleaned) ? null : cleaned;\r\n    }\r\n    // TODO: a string of 1of1 would fail to be converted\r\n    // converts 1/10 to no : 1, of : 10\r\n    // or 1 to no : 1, of : 0\r\n    static normalizeTrack(origVal) {\r\n        const split = origVal.toString().split('/');\r\n        return {\r\n            no: parseInt(split[0], 10) || null,\r\n            of: parseInt(split[1], 10) || null\r\n        };\r\n    }\r\n    /**\r\n     * Process and set common tags\r\n     * write common tags to\r\n     * @param tag Native tag\r\n     * @param warnings Register warnings\r\n     * @return common name\r\n     */\r\n    mapGenericTag(tag, warnings) {\r\n        tag = { id: tag.id, value: tag.value }; // clone object\r\n        this.postMap(tag, warnings);\r\n        // Convert native tag event to generic 'alias' tag\r\n        const id = this.getCommonName(tag.id);\r\n        return id ? { id, value: tag.value } : null;\r\n    }\r\n    /**\r\n     * Convert native tag key to common tag key\r\n     * @tag  Native header tag\r\n     * @return common tag name (alias)\r\n     */\r\n    getCommonName(tag) {\r\n        return this.tagMap[tag];\r\n    }\r\n    /**\r\n     * Handle post mapping exceptions / correction\r\n     * @param {string} tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\r\n     * @param {warnings} Used to register warnings\r\n     */\r\n    postMap(tag, warnings) {\r\n        return;\r\n    }\r\n}\r\nexports.CommonTagMapper = CommonTagMapper;\r\nCommonTagMapper.maxRatingScore = 1;\r\n"]},"metadata":{},"sourceType":"script"}