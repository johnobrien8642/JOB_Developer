{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MpcSv8Parser = void 0;\n\nvar initDebug = require(\"debug\");\n\nvar BasicParser_1 = require(\"../../common/BasicParser\");\n\nvar SV8 = require(\"./StreamVersion8\");\n\nvar APEv2Parser_1 = require(\"../../apev2/APEv2Parser\");\n\nvar FourCC_1 = require(\"../../common/FourCC\");\n\nvar debug = initDebug('music-metadata:parser:musepack');\n\nvar MpcSv8Parser = /*#__PURE__*/function (_BasicParser_1$BasicP) {\n  _inherits(MpcSv8Parser, _BasicParser_1$BasicP);\n\n  var _super = _createSuper(MpcSv8Parser);\n\n  function MpcSv8Parser() {\n    var _this;\n\n    _classCallCheck(this, MpcSv8Parser);\n\n    _this = _super.apply(this, arguments);\n    _this.audioLength = 0;\n    return _this;\n  }\n\n  _createClass(MpcSv8Parser, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var signature;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.tokenizer.readToken(FourCC_1.FourCcToken);\n\n              case 2:\n                signature = _context.sent;\n\n                if (!(signature !== 'MPCK')) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Invalid Magic number');\n\n              case 5:\n                this.metadata.setFormat('container', 'Musepack, SV8');\n                return _context.abrupt(\"return\", this.parsePacket());\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function parse() {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"parsePacket\",\n    value: function () {\n      var _parsePacket = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var sv8reader, header, sh;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                sv8reader = new SV8.StreamReader(this.tokenizer);\n\n              case 1:\n                _context2.next = 3;\n                return sv8reader.readPacketHeader();\n\n              case 3:\n                header = _context2.sent;\n                debug(\"packet-header key=\".concat(header.key, \", payloadLength=\").concat(header.payloadLength));\n                _context2.t0 = header.key;\n                _context2.next = _context2.t0 === 'SH' ? 8 : _context2.t0 === 'AP' ? 16 : _context2.t0 === 'RG' ? 20 : _context2.t0 === 'EI' ? 20 : _context2.t0 === 'SO' ? 20 : _context2.t0 === 'ST' ? 20 : _context2.t0 === 'CT' ? 20 : _context2.t0 === 'SE' ? 23 : 25;\n                break;\n\n              case 8:\n                _context2.next = 10;\n                return sv8reader.readStreamHeader(header.payloadLength);\n\n              case 10:\n                sh = _context2.sent;\n                this.metadata.setFormat('numberOfSamples', sh.sampleCount);\n                this.metadata.setFormat('sampleRate', sh.sampleFrequency);\n                this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\n                this.metadata.setFormat('numberOfChannels', sh.channelCount);\n                return _context2.abrupt(\"break\", 26);\n\n              case 16:\n                // Audio Packet\n                this.audioLength += header.payloadLength;\n                _context2.next = 19;\n                return this.tokenizer.ignore(header.payloadLength);\n\n              case 19:\n                return _context2.abrupt(\"break\", 26);\n\n              case 20:\n                _context2.next = 22;\n                return this.tokenizer.ignore(header.payloadLength);\n\n              case 22:\n                return _context2.abrupt(\"break\", 26);\n\n              case 23:\n                // Stream End\n                this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\n                return _context2.abrupt(\"return\", APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options));\n\n              case 25:\n                throw new Error(\"Unexpected header: \".concat(header.key));\n\n              case 26:\n                if (true) {\n                  _context2.next = 1;\n                  break;\n                }\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function parsePacket() {\n        return _parsePacket.apply(this, arguments);\n      }\n\n      return parsePacket;\n    }()\n  }]);\n\n  return MpcSv8Parser;\n}(BasicParser_1.BasicParser);\n\nexports.MpcSv8Parser = MpcSv8Parser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js"],"names":["Object","defineProperty","exports","value","MpcSv8Parser","initDebug","require","BasicParser_1","SV8","APEv2Parser_1","FourCC_1","debug","arguments","audioLength","tokenizer","readToken","FourCcToken","signature","Error","metadata","setFormat","parsePacket","sv8reader","StreamReader","readPacketHeader","header","key","payloadLength","readStreamHeader","sh","sampleCount","sampleFrequency","channelCount","ignore","format","duration","APEv2Parser","tryParseApeHeader","options","BasicParser"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MpcSv8Parser = void 0;\r\nconst initDebug = require(\"debug\");\r\nconst BasicParser_1 = require(\"../../common/BasicParser\");\r\nconst SV8 = require(\"./StreamVersion8\");\r\nconst APEv2Parser_1 = require(\"../../apev2/APEv2Parser\");\r\nconst FourCC_1 = require(\"../../common/FourCC\");\r\nconst debug = initDebug('music-metadata:parser:musepack');\r\nclass MpcSv8Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.audioLength = 0;\r\n    }\r\n    async parse() {\r\n        const signature = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n        if (signature !== 'MPCK')\r\n            throw new Error('Invalid Magic number');\r\n        this.metadata.setFormat('container', 'Musepack, SV8');\r\n        return this.parsePacket();\r\n    }\r\n    async parsePacket() {\r\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\r\n        do {\r\n            const header = await sv8reader.readPacketHeader();\r\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\r\n            switch (header.key) {\r\n                case 'SH': // Stream Header\r\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\r\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\r\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\r\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\r\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\r\n                    break;\r\n                case 'AP': // Audio Packet\r\n                    this.audioLength += header.payloadLength;\r\n                    await this.tokenizer.ignore(header.payloadLength);\r\n                    break;\r\n                case 'RG': // Replaygain\r\n                case 'EI': // Encoder Info\r\n                case 'SO': // Seek Table Offset\r\n                case 'ST': // Seek Table\r\n                case 'CT': // Chapter-Tag\r\n                    await this.tokenizer.ignore(header.payloadLength);\r\n                    break;\r\n                case 'SE': // Stream End\r\n                    this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\r\n                    return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\r\n                default:\r\n                    throw new Error(`Unexpected header: ${header.key}`);\r\n            }\r\n        } while (true);\r\n    }\r\n}\r\nexports.MpcSv8Parser = MpcSv8Parser;\r\n"]},"metadata":{},"sourceType":"script"}