{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromBuffer = exports.fromStream = exports.EndOfStreamError = void 0;\n\nconst ReadStreamTokenizer_1 = require(\"./ReadStreamTokenizer\");\n\nconst BufferTokenizer_1 = require(\"./BufferTokenizer\");\n\nvar peek_readable_1 = require(\"peek-readable\");\n\nObject.defineProperty(exports, \"EndOfStreamError\", {\n  enumerable: true,\n  get: function () {\n    return peek_readable_1.EndOfStreamError;\n  }\n});\n/**\n * Construct ReadStreamTokenizer from given Stream.\n * Will set fileSize, if provided given Stream has set the .path property/\n * @param stream - Read from Node.js Stream.Readable\n * @param fileInfo - Pass the file information, like size and MIME-type of the correspnding stream.\n * @returns ReadStreamTokenizer\n */\n\nfunction fromStream(stream, fileInfo) {\n  fileInfo = fileInfo ? fileInfo : {};\n  return new ReadStreamTokenizer_1.ReadStreamTokenizer(stream, fileInfo);\n}\n\nexports.fromStream = fromStream;\n/**\n * Construct ReadStreamTokenizer from given Buffer.\n * @param buffer - Buffer to tokenize\n * @param fileInfo - Pass additional file information to the tokenizer\n * @returns BufferTokenizer\n */\n\nfunction fromBuffer(buffer, fileInfo) {\n  return new BufferTokenizer_1.BufferTokenizer(buffer, fileInfo);\n}\n\nexports.fromBuffer = fromBuffer;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/strtok3/lib/core.js"],"names":["Object","defineProperty","exports","value","fromBuffer","fromStream","EndOfStreamError","ReadStreamTokenizer_1","require","BufferTokenizer_1","peek_readable_1","enumerable","get","stream","fileInfo","ReadStreamTokenizer","buffer","BufferTokenizer"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,gBAAR,GAA2B,KAAK,CAA1E;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAArC;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,mBAAD,CAAjC;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,eAAD,CAA7B;;AACAR,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,kBAA/B,EAAmD;AAAES,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,YAAY;AAAE,WAAOF,eAAe,CAACJ,gBAAvB;AAA0C;AAAjF,CAAnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,UAAT,CAAoBQ,MAApB,EAA4BC,QAA5B,EAAsC;AAClCA,EAAAA,QAAQ,GAAGA,QAAQ,GAAGA,QAAH,GAAc,EAAjC;AACA,SAAO,IAAIP,qBAAqB,CAACQ,mBAA1B,CAA8CF,MAA9C,EAAsDC,QAAtD,CAAP;AACH;;AACDZ,OAAO,CAACG,UAAR,GAAqBA,UAArB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,UAAT,CAAoBY,MAApB,EAA4BF,QAA5B,EAAsC;AAClC,SAAO,IAAIL,iBAAiB,CAACQ,eAAtB,CAAsCD,MAAtC,EAA8CF,QAA9C,CAAP;AACH;;AACDZ,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromBuffer = exports.fromStream = exports.EndOfStreamError = void 0;\nconst ReadStreamTokenizer_1 = require(\"./ReadStreamTokenizer\");\nconst BufferTokenizer_1 = require(\"./BufferTokenizer\");\nvar peek_readable_1 = require(\"peek-readable\");\nObject.defineProperty(exports, \"EndOfStreamError\", { enumerable: true, get: function () { return peek_readable_1.EndOfStreamError; } });\n/**\n * Construct ReadStreamTokenizer from given Stream.\n * Will set fileSize, if provided given Stream has set the .path property/\n * @param stream - Read from Node.js Stream.Readable\n * @param fileInfo - Pass the file information, like size and MIME-type of the correspnding stream.\n * @returns ReadStreamTokenizer\n */\nfunction fromStream(stream, fileInfo) {\n    fileInfo = fileInfo ? fileInfo : {};\n    return new ReadStreamTokenizer_1.ReadStreamTokenizer(stream, fileInfo);\n}\nexports.fromStream = fromStream;\n/**\n * Construct ReadStreamTokenizer from given Buffer.\n * @param buffer - Buffer to tokenize\n * @param fileInfo - Pass additional file information to the tokenizer\n * @returns BufferTokenizer\n */\nfunction fromBuffer(buffer, fileInfo) {\n    return new BufferTokenizer_1.BufferTokenizer(buffer, fileInfo);\n}\nexports.fromBuffer = fromBuffer;\n"]},"metadata":{},"sourceType":"script"}