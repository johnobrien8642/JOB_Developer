{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/JOB_Developer/client/src/components/posts/types/create/QuotePostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport randomstring from 'randomstring';\nimport QuotePostInput from '../../util/components/forms/inputTypes/Quote_Post_Input';\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text';\nimport Tags from '../../util/components/forms/Tags';\nimport PostFormUtil from '../../util/functions/post_form_util.js';\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close.js';\nimport Queries from '../../../../graphql/queries.js';\nimport Mutations from '../../../../graphql/mutations.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  postCreate,\n  postUpdate\n} = UpdateCacheUtil;\nconst {\n  bodyPost,\n  handleFormData,\n  stripAllImgs,\n  handleUploadedFiles,\n  resetDisplayIdx,\n  handleMentions,\n  discardMentions,\n  handleAllTextQuotePost,\n  preventScroll,\n  allowScroll,\n  handleTagInput\n} = PostFormUtil;\nconst {\n  CREATE_OR_UPDATE_POST\n} = Mutations;\nconst {\n  FETCH_USER_FEED\n} = Queries;\n\nconst QuotePostForm = ({\n  mobile,\n  user,\n  post,\n  update,\n  setUpdate,\n  quotePostActive,\n  setQuotePostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  _s();\n\n  let [quote, setQuote] = useState('');\n  let [source, setSource] = useState('');\n  let [placeholder, setPlaceholder] = useState('Quote');\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let bodyImages = useRef([]);\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0);\n  let [confirmClose, setConfirmClose] = useState(false);\n  let history = useHistory();\n  let formId = 'quotePostForm';\n  const formInputId = 'quotePostInput';\n  useEffect(() => {\n    preventScroll(quotePostActive, document);\n  }, [quotePostActive]);\n  useEffect(() => {\n    resetDisplayIdx(body);\n  });\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, {\n      data\n    }) {\n      const {\n        createOrUpdatePost\n      } = data;\n      var currentUser = Cookies.get('currentUser');\n      var query = FETCH_USER_FEED;\n\n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query);\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query);\n      }\n    },\n\n    onCompleted() {\n      resetInputs();\n\n      if (post) {\n        setUpdate(update = false);\n        setUploading(uploading = false);\n      } else {\n        allowScroll(document);\n        setUploading(uploading = false);\n        setQuotePostActive(quotePostActive = false);\n\n        if (mobile) {\n          setPostFormOpen(postFormOpen = false);\n          history.push('/dashboard');\n        }\n\n        setUploading(uploading = false);\n      }\n    },\n\n    onError(error) {\n      console.log(error);\n    }\n\n  });\n\n  const resetInputs = () => {\n    setQuote(quote = '');\n    setSource(source = '');\n    setBodyImageFiles(bodyImageFiles = []);\n    bodyImages.current = [];\n    body.current = [];\n    allText.current = '';\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    var bodyImagesFormData = handleFormData(bodyImageFiles);\n    Promise.all([bodyPost(bodyImagesFormData)]).then(([bodyUploads]) => {\n      var mentions = handleMentions(body, stripAllImgs);\n      discardMentions(post, mentions, objsToClean);\n      var descriptions = stripAllImgs(body);\n      handleAllTextQuotePost(allText, descriptions, quote, source);\n      var instanceData = {\n        variants: {\n          quote,\n          source\n        },\n        allText: allText.current,\n        descriptions: descriptions,\n        descriptionImages: handleUploadedFiles(body, bodyUploads),\n        mentions: mentions,\n        user: Cookies.get('currentUser'),\n        tags,\n        kind: 'QuotePost',\n        objsToClean: objsToClean.current,\n        postId: post ? post._id : null\n      };\n      createOrUpdatePost({\n        variables: {\n          instanceData: instanceData\n        }\n      });\n    });\n  };\n\n  const disabledBool = () => {\n    return !quote && !source && body.current.length === 0 && !description;\n  };\n\n  const handleQuotePostFormClass = () => {\n    if (quotePostActive && !uploading || update) {\n      return 'postForm quotePostForm active';\n    } else if (quotePostActive && uploading || uploading) {\n      return 'postForm quotePostForm hidden';\n    } else {\n      return 'postForm quotePostForm none';\n    }\n  };\n\n  if (quotePostActive || update) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: update ? 'postFormContainer update' : 'postFormContainer',\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        user: update ? post.user : user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: handleQuotePostFormClass(),\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          id: formId,\n          onSubmit: e => handleSubmit(e),\n          onKeyPress: e => {\n            e.key === 'Enter' && e.preventDefault();\n          },\n          encType: 'multipart/form-data',\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"userNameHeader\",\n            children: update ? post.user.blogName : user.blogName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(QuotePostInput, {\n            post: post,\n            update: update,\n            quote: quote,\n            setQuote: setQuote,\n            source: source,\n            setSource: setSource,\n            placeholder: placeholder,\n            setPlaceholder: setPlaceholder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(BodyImageAndText, {\n            post: post,\n            update: update,\n            formId: formId,\n            formInputId: formInputId,\n            objsToClean: objsToClean,\n            body: body,\n            bodyImageFiles: bodyImageFiles,\n            setBodyImageFiles: setBodyImageFiles,\n            description: description,\n            setDescription: setDescription,\n            render: render,\n            setRender: setRender,\n            errMessage: errMessage,\n            setErrMessage: setErrMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Tags, {\n            post: post,\n            tag: tag,\n            setTag: setTag,\n            tags: tags,\n            setTags: setTags\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"closeOrPostContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"closeBtn\",\n              onClick: () => {\n                if (disabledBool()) {\n                  allowScroll(document);\n                  resetInputs();\n\n                  if (!update) {\n                    setQuotePostActive(quotePostActive = false);\n                    setPostFormModal(postFormModal = false);\n                  } else {\n                    setUpdate(update = false);\n                  }\n\n                  if (mobile) {\n                    setPostFormOpen(postFormOpen = false);\n                  }\n                } else {\n                  setConfirmClose(confirmClose = true);\n                }\n              },\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(ConfirmClose, {\n              mobile: mobile,\n              update: update,\n              setUpdate: setUpdate,\n              confirmClose: confirmClose,\n              setConfirmClose: setConfirmClose,\n              allowScroll: allowScroll,\n              resetInputs: resetInputs,\n              setFormActive: setQuotePostActive,\n              formActive: quotePostActive,\n              setPostFormModal: setPostFormModal,\n              postFormModal: postFormModal,\n              postFormOpen: postFormOpen,\n              setPostFormOpen: setPostFormOpen\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn',\n              type: \"submit\",\n              disabled: disabledBool(),\n              onClick: () => {\n                if (description) {\n                  var textObj = {\n                    kind: 'text',\n                    srcType: 'text',\n                    content: description,\n                    displayIdx: body.current.length,\n                    uniqId: randomstring.generate({\n                      length: 12,\n                      charset: 'alphabetic'\n                    })\n                  };\n                  body.current.push(textObj);\n                  setDescription(description = '');\n                }\n\n                if (tag) {\n                  handleTagInput(tag, setTag, tags, setTags);\n                }\n\n                if (!update) {\n                  setPostFormModal(postFormModal = false);\n                }\n\n                setUploading(uploading = true);\n              },\n              children: post ? 'Update' : 'Post'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(QuotePostForm, \"rp1HNmNcopc0IauHXhWz94DMU84=\", false, function () {\n  return [useHistory, useMutation];\n});\n\n_c = QuotePostForm;\nexport default QuotePostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuotePostForm\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/src/components/posts/types/create/QuotePostForm.js"],"names":["React","useState","useRef","useEffect","useMutation","useHistory","Cookies","randomstring","QuotePostInput","BodyImageAndText","Tags","PostFormUtil","UpdateCacheUtil","ProfilePic","ConfirmClose","Queries","Mutations","postCreate","postUpdate","bodyPost","handleFormData","stripAllImgs","handleUploadedFiles","resetDisplayIdx","handleMentions","discardMentions","handleAllTextQuotePost","preventScroll","allowScroll","handleTagInput","CREATE_OR_UPDATE_POST","FETCH_USER_FEED","QuotePostForm","mobile","user","post","update","setUpdate","quotePostActive","setQuotePostActive","postFormModal","setPostFormModal","postFormOpen","setPostFormOpen","uploading","setUploading","quote","setQuote","source","setSource","placeholder","setPlaceholder","objsToClean","description","setDescription","bodyImageFiles","setBodyImageFiles","body","allText","bodyImages","tag","setTag","tags","setTags","errMessage","setErrMessage","render","setRender","confirmClose","setConfirmClose","history","formId","formInputId","document","createOrUpdatePost","client","data","currentUser","get","query","onCompleted","resetInputs","push","onError","error","console","log","current","handleSubmit","e","preventDefault","bodyImagesFormData","Promise","all","then","bodyUploads","mentions","descriptions","instanceData","variants","descriptionImages","kind","postId","_id","variables","disabledBool","length","handleQuotePostFormClass","key","blogName","textObj","srcType","content","displayIdx","uniqId","generate","charset"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport randomstring from 'randomstring';\n\nimport QuotePostInput from '../../util/components/forms/inputTypes/Quote_Post_Input'\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text'\nimport Tags from '../../util/components/forms/Tags'\nimport PostFormUtil from '../../util/functions/post_form_util.js'\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close.js';\n\nimport Queries from '../../../../graphql/queries.js';\nimport Mutations from '../../../../graphql/mutations.js';\nconst { postCreate, postUpdate } = UpdateCacheUtil;\nconst { bodyPost, handleFormData, stripAllImgs,\n        handleUploadedFiles, resetDisplayIdx,\n        handleMentions, discardMentions,\n        handleAllTextQuotePost, preventScroll,\n        allowScroll, handleTagInput } = PostFormUtil;\nconst { CREATE_OR_UPDATE_POST } = Mutations;\nconst { FETCH_USER_FEED } = Queries;\n\nconst QuotePostForm = ({\n  mobile,\n  user,\n  post, \n  update,\n  setUpdate,\n  quotePostActive,\n  setQuotePostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  let [quote, setQuote] = useState('');\n  let [source, setSource] = useState('');\n  let [placeholder, setPlaceholder] = useState('Quote');\n\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let bodyImages = useRef([]);\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0);\n  let [confirmClose, setConfirmClose] = useState(false)\n  let history = useHistory();\n  let formId = 'quotePostForm';\n  const formInputId = 'quotePostInput';\n  \n  useEffect(() => {\n\n    preventScroll(quotePostActive, document)\n\n  }, [quotePostActive])\n\n  useEffect(() => {\n    resetDisplayIdx(body)\n  })\n\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, { data }){\n      const { createOrUpdatePost } = data;\n      var currentUser = Cookies.get('currentUser')\n      var query = FETCH_USER_FEED\n      \n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query)\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query)\n      }\n    },\n    onCompleted() {\n      resetInputs();\n      if (post) {\n        setUpdate(update = false)\n        setUploading(uploading = false)\n      } else {\n        allowScroll(document)\n        setUploading(uploading = false)\n        setQuotePostActive(quotePostActive = false)\n\n        if (mobile) {\n          setPostFormOpen(postFormOpen = false)\n          history.push('/dashboard')\n        }\n\n        setUploading(uploading = false)\n      }\n    },\n    onError(error) {\n      console.log(error)\n    }\n  });\n\n  const resetInputs = () => {\n    setQuote(quote = '');\n    setSource(source = '');\n    setBodyImageFiles(bodyImageFiles = []);\n    bodyImages.current = [];\n    body.current = [];\n    allText.current = '';\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    var bodyImagesFormData = handleFormData(bodyImageFiles)\n\n    Promise.all([\n      bodyPost(bodyImagesFormData)\n    ]).then(\n      ([bodyUploads]) => {\n\n        var mentions = handleMentions(body, stripAllImgs)\n        \n        discardMentions(post, mentions, objsToClean)\n\n        var descriptions = stripAllImgs(body)\n\n        handleAllTextQuotePost(allText, descriptions, quote, source)\n        \n        var instanceData = {\n          variants: { quote, source },\n          allText: allText.current,\n          descriptions: descriptions,\n          descriptionImages: handleUploadedFiles(body, bodyUploads),\n          mentions: mentions,\n          user: Cookies.get('currentUser'),\n          tags, kind: 'QuotePost',\n          objsToClean: objsToClean.current,\n          postId: post ? post._id : null\n        };\n        \n        createOrUpdatePost({\n          variables: {\n            instanceData: instanceData\n          }\n        })\n      }\n    )\n  }\n\n  const disabledBool = () => {\n    return !quote && \n    !source &&\n    body.current.length === 0 && \n    !description\n  }\n\n  const handleQuotePostFormClass = () => {\n    if ((quotePostActive && !uploading) || update) {\n      return 'postForm quotePostForm active'\n    } else if ((quotePostActive && uploading) || uploading) {\n      return 'postForm quotePostForm hidden'\n    } else {\n      return 'postForm quotePostForm none'\n    }\n  }\n\n  if (quotePostActive || update) {\n    return (\n      <div\n        className={update ? 'postFormContainer update' : 'postFormContainer'}\n      >\n\n      <ProfilePic user={update ? post.user : user} />\n        \n      <div\n        className={handleQuotePostFormClass()}\n      >\n        <form\n          id={formId}\n          onSubmit={e => handleSubmit(e)}\n          onKeyPress={e => { e.key === 'Enter' && e.preventDefault() }}\n          encType={'multipart/form-data'}\n        >\n\n        <h3\n          className='userNameHeader'\n        >{update ? post.user.blogName : user.blogName}</h3>\n  \n        <QuotePostInput\n          post={post}\n          update={update}\n          quote={quote}\n          setQuote={setQuote}\n          source={source}\n          setSource={setSource}\n          placeholder={placeholder}\n          setPlaceholder={setPlaceholder}\n        />\n  \n        <BodyImageAndText\n          post={post}\n          update={update}\n          formId={formId}\n          formInputId={formInputId}\n          objsToClean={objsToClean}\n          body={body}\n          bodyImageFiles={bodyImageFiles}\n          setBodyImageFiles={setBodyImageFiles}\n          description={description}\n          setDescription={setDescription}\n          render={render}\n          setRender={setRender}\n          errMessage={errMessage}\n          setErrMessage={setErrMessage}\n        />\n  \n        <Tags\n          post={post}\n          tag={tag}\n          setTag={setTag}\n          tags={tags}\n          setTags={setTags}\n        />\n        <div\n          className='closeOrPostContainer'\n        >\n          <div\n            className='closeBtn'\n            onClick={() => {\n              if (disabledBool()) {\n                  allowScroll(document)\n                  resetInputs()\n                  \n                  if (!update) {\n                    setQuotePostActive(quotePostActive = false)\n                    setPostFormModal(postFormModal = false)\n                  } else {\n                    setUpdate(update = false)\n                  }\n\n                  if (mobile) {\n                    setPostFormOpen(postFormOpen = false)\n                  }\n                } else {\n                  setConfirmClose(confirmClose = true)\n                }\n            }}\n          >\n            Close\n          </div>\n\n          <ConfirmClose\n            mobile={mobile}\n            update={update}\n            setUpdate={setUpdate}\n            confirmClose={confirmClose}\n            setConfirmClose={setConfirmClose}\n            allowScroll={allowScroll}\n            resetInputs={resetInputs}\n            setFormActive={setQuotePostActive}\n            formActive={quotePostActive}\n            setPostFormModal={setPostFormModal}\n            postFormModal={postFormModal}\n            postFormOpen={postFormOpen}\n            setPostFormOpen={setPostFormOpen}\n          />\n\n          <button\n            className={disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn'}\n            type='submit'\n            disabled={disabledBool()}\n            onClick={() => {\n              if (description) {\n                var textObj = {\n                  kind: 'text',\n                  srcType: 'text',\n                  content: description,\n                  displayIdx: body.current.length,\n                  uniqId: randomstring.generate({\n                    length: 12,\n                    charset: 'alphabetic'\n                  })\n                }\n\n                body.current.push(textObj)\n              \n                setDescription(description = '')\n              }\n              \n              if (tag) {\n                handleTagInput(\n                  tag, setTag,\n                  tags, setTags\n                )\n              }\n              \n              if (!update) {\n                setPostFormModal(postFormModal = false)\n              }\n              \n              setUploading(uploading = true)\n            }}\n          >\n            {post ? 'Update' : 'Post'}\n          </button>\n        </div>\n        </form>\n      </div>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n      </div>\n    )\n  }\n  \n}\n\nexport default QuotePostForm;"]},"metadata":{},"sourceType":"module"}