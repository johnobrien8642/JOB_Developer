{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DsdiffParser = void 0;\n\nvar Token = require(\"token-types\");\n\nvar initDebug = require(\"debug\");\n\nvar FourCC_1 = require(\"../common/FourCC\");\n\nvar BasicParser_1 = require(\"../common/BasicParser\");\n\nvar DsdiffToken_1 = require(\"./DsdiffToken\");\n\nvar strtok3 = require(\"strtok3/lib/core\");\n\nvar ID3v2Parser_1 = require(\"../id3v2/ID3v2Parser\");\n\nvar debug = initDebug('music-metadata:parser:aiff');\n/**\r\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\r\n *\r\n * Ref:\r\n *  http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\r\n */\n\nvar DsdiffParser = /*#__PURE__*/function (_BasicParser_1$BasicP) {\n  _inherits(DsdiffParser, _BasicParser_1$BasicP);\n\n  var _super = _createSuper(DsdiffParser);\n\n  function DsdiffParser() {\n    _classCallCheck(this, DsdiffParser);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DsdiffParser, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var header, type;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.tokenizer.readToken(DsdiffToken_1.ChunkHeader);\n\n              case 2:\n                header = _context.sent;\n\n                if (!(header.chunkID !== 'FRM8')) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Unexpected chunk-ID');\n\n              case 5:\n                _context.next = 7;\n                return this.tokenizer.readToken(FourCC_1.FourCcToken);\n\n              case 7:\n                type = _context.sent.trim();\n                _context.t0 = type;\n                _context.next = _context.t0 === 'DSD' ? 11 : 14;\n                break;\n\n              case 11:\n                this.metadata.setFormat('container', \"DSDIFF/\".concat(type));\n                this.metadata.setFormat('lossless', true);\n                return _context.abrupt(\"return\", this.readFmt8Chunks(header.chunkSize - FourCC_1.FourCcToken.len));\n\n              case 14:\n                throw Error(\"Unsupported DSDIFF type: \".concat(type));\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function parse() {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"readFmt8Chunks\",\n    value: function () {\n      var _readFmt8Chunks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(remainingSize) {\n        var chunkHeader;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(remainingSize >= DsdiffToken_1.ChunkHeader.len)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.tokenizer.readToken(DsdiffToken_1.ChunkHeader);\n\n              case 3:\n                chunkHeader = _context2.sent;\n                //  If the data is an odd number of bytes in length, a pad byte must be added at the end\n                debug(\"Chunk id=\".concat(chunkHeader.chunkID));\n                _context2.next = 7;\n                return this.readData(chunkHeader);\n\n              case 7:\n                remainingSize -= DsdiffToken_1.ChunkHeader.len + chunkHeader.chunkSize;\n                _context2.next = 0;\n                break;\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function readFmt8Chunks(_x) {\n        return _readFmt8Chunks.apply(this, arguments);\n      }\n\n      return readFmt8Chunks;\n    }()\n  }, {\n    key: \"readData\",\n    value: function () {\n      var _readData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(header) {\n        var p0, version, propType, id3_data, rst, remaining;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                debug(\"Reading data of chunk[ID=\".concat(header.chunkID, \", size=\").concat(header.chunkSize, \"]\"));\n                p0 = this.tokenizer.position;\n                _context3.t0 = header.chunkID.trim();\n                _context3.next = _context3.t0 === 'FVER' ? 5 : _context3.t0 === 'PROP' ? 10 : _context3.t0 === 'ID3' ? 18 : _context3.t0 === 'DSD' ? 27 : 25;\n                break;\n\n              case 5:\n                _context3.next = 7;\n                return this.tokenizer.readToken(Token.UINT32_LE);\n\n              case 7:\n                version = _context3.sent;\n                debug(\"DSDIFF version=\".concat(version));\n                return _context3.abrupt(\"break\", 30);\n\n              case 10:\n                _context3.next = 12;\n                return this.tokenizer.readToken(FourCC_1.FourCcToken);\n\n              case 12:\n                propType = _context3.sent;\n\n                if (!(propType !== 'SND ')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                throw new Error('Unexpected PROP-chunk ID');\n\n              case 15:\n                _context3.next = 17;\n                return this.handleSoundPropertyChunks(header.chunkSize - FourCC_1.FourCcToken.len);\n\n              case 17:\n                return _context3.abrupt(\"break\", 30);\n\n              case 18:\n                _context3.next = 20;\n                return this.tokenizer.readToken(new Token.BufferType(header.chunkSize));\n\n              case 20:\n                id3_data = _context3.sent;\n                rst = strtok3.fromBuffer(id3_data);\n                _context3.next = 24;\n                return new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\n\n              case 24:\n                return _context3.abrupt(\"break\", 30);\n\n              case 25:\n                debug(\"Ignore chunk[ID=\".concat(header.chunkID, \", size=\").concat(header.chunkSize, \"]\"));\n                return _context3.abrupt(\"break\", 30);\n\n              case 27:\n                this.metadata.setFormat('numberOfSamples', header.chunkSize * 8 / this.metadata.format.numberOfChannels);\n                this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n                return _context3.abrupt(\"break\", 30);\n\n              case 30:\n                remaining = header.chunkSize - (this.tokenizer.position - p0);\n\n                if (!(remaining > 0)) {\n                  _context3.next = 35;\n                  break;\n                }\n\n                debug(\"After Parsing chunk, remaining \".concat(remaining, \" bytes\"));\n                _context3.next = 35;\n                return this.tokenizer.ignore(remaining);\n\n              case 35:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function readData(_x2) {\n        return _readData.apply(this, arguments);\n      }\n\n      return readData;\n    }()\n  }, {\n    key: \"handleSoundPropertyChunks\",\n    value: function () {\n      var _handleSoundPropertyChunks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(remainingSize) {\n        var sndPropHeader, p0, sampleRate, numChannels, compressionIdCode, count, compressionName, hours, minutes, seconds, samples, lsConfig, remaining, bitrate;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                debug(\"Parsing sound-property-chunks, remainingSize=\".concat(remainingSize));\n\n              case 1:\n                if (!(remainingSize > 0)) {\n                  _context4.next = 65;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this.tokenizer.readToken(DsdiffToken_1.ChunkHeader);\n\n              case 4:\n                sndPropHeader = _context4.sent;\n                debug(\"Sound-property-chunk[ID=\".concat(sndPropHeader.chunkID, \", size=\").concat(sndPropHeader.chunkSize, \"]\"));\n                p0 = this.tokenizer.position;\n                _context4.t0 = sndPropHeader.chunkID.trim();\n                _context4.next = _context4.t0 === 'FS' ? 10 : _context4.t0 === 'CHNL' ? 15 : _context4.t0 === 'CMPR' ? 22 : _context4.t0 === 'ABSS' ? 34 : _context4.t0 === 'LSCO' ? 48 : _context4.t0 === 'COMT' ? 53 : 53;\n                break;\n\n              case 10:\n                _context4.next = 12;\n                return this.tokenizer.readToken(Token.UINT32_BE);\n\n              case 12:\n                sampleRate = _context4.sent;\n                this.metadata.setFormat('sampleRate', sampleRate);\n                return _context4.abrupt(\"break\", 56);\n\n              case 15:\n                _context4.next = 17;\n                return this.tokenizer.readToken(Token.UINT16_BE);\n\n              case 17:\n                numChannels = _context4.sent;\n                this.metadata.setFormat('numberOfChannels', numChannels);\n                _context4.next = 21;\n                return this.handleChannelChunks(sndPropHeader.chunkSize - Token.UINT16_BE.len);\n\n              case 21:\n                return _context4.abrupt(\"break\", 56);\n\n              case 22:\n                _context4.next = 24;\n                return this.tokenizer.readToken(FourCC_1.FourCcToken);\n\n              case 24:\n                compressionIdCode = _context4.sent.trim();\n                _context4.next = 27;\n                return this.tokenizer.readToken(Token.UINT8);\n\n              case 27:\n                count = _context4.sent;\n                _context4.next = 30;\n                return this.tokenizer.readToken(new Token.StringType(count, 'ascii'));\n\n              case 30:\n                compressionName = _context4.sent;\n\n                if (compressionIdCode === 'DSD') {\n                  this.metadata.setFormat('lossless', true);\n                  this.metadata.setFormat('bitsPerSample', 1);\n                }\n\n                this.metadata.setFormat('codec', \"\".concat(compressionIdCode, \" (\").concat(compressionName, \")\"));\n                return _context4.abrupt(\"break\", 56);\n\n              case 34:\n                _context4.next = 36;\n                return this.tokenizer.readToken(Token.UINT16_BE);\n\n              case 36:\n                hours = _context4.sent;\n                _context4.next = 39;\n                return this.tokenizer.readToken(Token.UINT8);\n\n              case 39:\n                minutes = _context4.sent;\n                _context4.next = 42;\n                return this.tokenizer.readToken(Token.UINT8);\n\n              case 42:\n                seconds = _context4.sent;\n                _context4.next = 45;\n                return this.tokenizer.readToken(Token.UINT32_BE);\n\n              case 45:\n                samples = _context4.sent;\n                debug(\"ABSS \".concat(hours, \":\").concat(minutes, \":\").concat(seconds, \".\").concat(samples));\n                return _context4.abrupt(\"break\", 56);\n\n              case 48:\n                _context4.next = 50;\n                return this.tokenizer.readToken(Token.UINT16_BE);\n\n              case 50:\n                lsConfig = _context4.sent;\n                debug(\"LSCO lsConfig=\".concat(lsConfig));\n                return _context4.abrupt(\"break\", 56);\n\n              case 53:\n                debug(\"Unknown sound-property-chunk[ID=\".concat(sndPropHeader.chunkID, \", size=\").concat(sndPropHeader.chunkSize, \"]\"));\n                _context4.next = 56;\n                return this.tokenizer.ignore(sndPropHeader.chunkSize);\n\n              case 56:\n                remaining = sndPropHeader.chunkSize - (this.tokenizer.position - p0);\n\n                if (!(remaining > 0)) {\n                  _context4.next = 61;\n                  break;\n                }\n\n                debug(\"After Parsing sound-property-chunk \".concat(sndPropHeader.chunkSize, \", remaining \").concat(remaining, \" bytes\"));\n                _context4.next = 61;\n                return this.tokenizer.ignore(remaining);\n\n              case 61:\n                remainingSize -= DsdiffToken_1.ChunkHeader.len + sndPropHeader.chunkSize;\n                debug(\"Parsing sound-property-chunks, remainingSize=\".concat(remainingSize));\n                _context4.next = 1;\n                break;\n\n              case 65:\n                if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\n                  bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\n                  this.metadata.setFormat('bitrate', bitrate);\n                }\n\n              case 66:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function handleSoundPropertyChunks(_x3) {\n        return _handleSoundPropertyChunks.apply(this, arguments);\n      }\n\n      return handleSoundPropertyChunks;\n    }()\n  }, {\n    key: \"handleChannelChunks\",\n    value: function () {\n      var _handleChannelChunks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(remainingSize) {\n        var channels, channelId;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                debug(\"Parsing channel-chunks, remainingSize=\".concat(remainingSize));\n                channels = [];\n\n              case 2:\n                if (!(remainingSize >= FourCC_1.FourCcToken.len)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                _context5.next = 5;\n                return this.tokenizer.readToken(FourCC_1.FourCcToken);\n\n              case 5:\n                channelId = _context5.sent;\n                debug(\"Channel[ID=\".concat(channelId, \"]\"));\n                channels.push(channelId);\n                remainingSize -= FourCC_1.FourCcToken.len;\n                _context5.next = 2;\n                break;\n\n              case 11:\n                debug(\"Channels: \".concat(channels.join(', ')));\n                return _context5.abrupt(\"return\", channels);\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handleChannelChunks(_x4) {\n        return _handleChannelChunks.apply(this, arguments);\n      }\n\n      return handleChannelChunks;\n    }()\n  }]);\n\n  return DsdiffParser;\n}(BasicParser_1.BasicParser);\n\nexports.DsdiffParser = DsdiffParser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/dsdiff/DsdiffParser.js"],"names":["Object","defineProperty","exports","value","DsdiffParser","Token","require","initDebug","FourCC_1","BasicParser_1","DsdiffToken_1","strtok3","ID3v2Parser_1","debug","tokenizer","readToken","ChunkHeader","header","chunkID","Error","FourCcToken","type","trim","metadata","setFormat","readFmt8Chunks","chunkSize","len","remainingSize","chunkHeader","readData","p0","position","UINT32_LE","version","propType","handleSoundPropertyChunks","BufferType","id3_data","rst","fromBuffer","ID3v2Parser","parse","options","format","numberOfChannels","numberOfSamples","sampleRate","remaining","ignore","sndPropHeader","UINT32_BE","UINT16_BE","numChannels","handleChannelChunks","compressionIdCode","UINT8","count","StringType","compressionName","hours","minutes","seconds","samples","lsConfig","lossless","bitsPerSample","bitrate","channels","channelId","push","join","BasicParser"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DsdiffParser = void 0;\r\nconst Token = require(\"token-types\");\r\nconst initDebug = require(\"debug\");\r\nconst FourCC_1 = require(\"../common/FourCC\");\r\nconst BasicParser_1 = require(\"../common/BasicParser\");\r\nconst DsdiffToken_1 = require(\"./DsdiffToken\");\r\nconst strtok3 = require(\"strtok3/lib/core\");\r\nconst ID3v2Parser_1 = require(\"../id3v2/ID3v2Parser\");\r\nconst debug = initDebug('music-metadata:parser:aiff');\r\n/**\r\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\r\n *\r\n * Ref:\r\n *  http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\r\n */\r\nclass DsdiffParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader);\r\n        if (header.chunkID !== 'FRM8')\r\n            throw new Error('Unexpected chunk-ID');\r\n        const type = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();\r\n        switch (type) {\r\n            case 'DSD':\r\n                this.metadata.setFormat('container', `DSDIFF/${type}`);\r\n                this.metadata.setFormat('lossless', true);\r\n                return this.readFmt8Chunks(header.chunkSize - FourCC_1.FourCcToken.len);\r\n            default:\r\n                throw Error(`Unsupported DSDIFF type: ${type}`);\r\n        }\r\n    }\r\n    async readFmt8Chunks(remainingSize) {\r\n        while (remainingSize >= DsdiffToken_1.ChunkHeader.len) {\r\n            const chunkHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader);\r\n            //  If the data is an odd number of bytes in length, a pad byte must be added at the end\r\n            debug(`Chunk id=${chunkHeader.chunkID}`);\r\n            await this.readData(chunkHeader);\r\n            remainingSize -= (DsdiffToken_1.ChunkHeader.len + chunkHeader.chunkSize);\r\n        }\r\n    }\r\n    async readData(header) {\r\n        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\r\n        const p0 = this.tokenizer.position;\r\n        switch (header.chunkID.trim()) {\r\n            case 'FVER': // 3.1 FORMAT VERSION CHUNK\r\n                const version = await this.tokenizer.readToken(Token.UINT32_LE);\r\n                debug(`DSDIFF version=${version}`);\r\n                break;\r\n            case 'PROP': // 3.2 PROPERTY CHUNK\r\n                const propType = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n                if (propType !== 'SND ')\r\n                    throw new Error('Unexpected PROP-chunk ID');\r\n                await this.handleSoundPropertyChunks(header.chunkSize - FourCC_1.FourCcToken.len);\r\n                break;\r\n            case 'ID3': // Unofficial ID3 tag support\r\n                const id3_data = await this.tokenizer.readToken(new Token.BufferType(header.chunkSize));\r\n                const rst = strtok3.fromBuffer(id3_data);\r\n                await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\r\n                break;\r\n            default:\r\n                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\r\n                break;\r\n            case 'DSD':\r\n                this.metadata.setFormat('numberOfSamples', header.chunkSize * 8 / this.metadata.format.numberOfChannels);\r\n                this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\r\n                break;\r\n        }\r\n        const remaining = header.chunkSize - (this.tokenizer.position - p0);\r\n        if (remaining > 0) {\r\n            debug(`After Parsing chunk, remaining ${remaining} bytes`);\r\n            await this.tokenizer.ignore(remaining);\r\n        }\r\n    }\r\n    async handleSoundPropertyChunks(remainingSize) {\r\n        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\r\n        while (remainingSize > 0) {\r\n            const sndPropHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader);\r\n            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\r\n            const p0 = this.tokenizer.position;\r\n            switch (sndPropHeader.chunkID.trim()) {\r\n                case 'FS': // 3.2.1 Sample Rate Chunk\r\n                    const sampleRate = await this.tokenizer.readToken(Token.UINT32_BE);\r\n                    this.metadata.setFormat('sampleRate', sampleRate);\r\n                    break;\r\n                case 'CHNL': // 3.2.2 Channels Chunk\r\n                    const numChannels = await this.tokenizer.readToken(Token.UINT16_BE);\r\n                    this.metadata.setFormat('numberOfChannels', numChannels);\r\n                    await this.handleChannelChunks(sndPropHeader.chunkSize - Token.UINT16_BE.len);\r\n                    break;\r\n                case 'CMPR': // 3.2.3 Compression Type Chunk\r\n                    const compressionIdCode = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();\r\n                    const count = await this.tokenizer.readToken(Token.UINT8);\r\n                    const compressionName = await this.tokenizer.readToken(new Token.StringType(count, 'ascii'));\r\n                    if (compressionIdCode === 'DSD') {\r\n                        this.metadata.setFormat('lossless', true);\r\n                        this.metadata.setFormat('bitsPerSample', 1);\r\n                    }\r\n                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);\r\n                    break;\r\n                case 'ABSS': // 3.2.4 Absolute Start Time Chunk\r\n                    const hours = await this.tokenizer.readToken(Token.UINT16_BE);\r\n                    const minutes = await this.tokenizer.readToken(Token.UINT8);\r\n                    const seconds = await this.tokenizer.readToken(Token.UINT8);\r\n                    const samples = await this.tokenizer.readToken(Token.UINT32_BE);\r\n                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);\r\n                    break;\r\n                case 'LSCO': // 3.2.5 Loudspeaker Configuration Chunk\r\n                    const lsConfig = await this.tokenizer.readToken(Token.UINT16_BE);\r\n                    debug(`LSCO lsConfig=${lsConfig}`);\r\n                    break;\r\n                case 'COMT':\r\n                default:\r\n                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\r\n                    await this.tokenizer.ignore(sndPropHeader.chunkSize);\r\n            }\r\n            const remaining = sndPropHeader.chunkSize - (this.tokenizer.position - p0);\r\n            if (remaining > 0) {\r\n                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);\r\n                await this.tokenizer.ignore(remaining);\r\n            }\r\n            remainingSize -= DsdiffToken_1.ChunkHeader.len + sndPropHeader.chunkSize;\r\n            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\r\n        }\r\n        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\r\n            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\r\n            this.metadata.setFormat('bitrate', bitrate);\r\n        }\r\n    }\r\n    async handleChannelChunks(remainingSize) {\r\n        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);\r\n        const channels = [];\r\n        while (remainingSize >= FourCC_1.FourCcToken.len) {\r\n            const channelId = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n            debug(`Channel[ID=${channelId}]`);\r\n            channels.push(channelId);\r\n            remainingSize -= FourCC_1.FourCcToken.len;\r\n        }\r\n        debug(`Channels: ${channels.join(', ')}`);\r\n        return channels;\r\n    }\r\n}\r\nexports.DsdiffParser = DsdiffParser;\r\n"]},"metadata":{},"sourceType":"script"}