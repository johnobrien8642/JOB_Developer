{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractTokenizer = void 0;\n\nvar peek_readable_1 = require(\"peek-readable\");\n/**\n * Core tokenizer\n */\n\n\nvar AbstractTokenizer = /*#__PURE__*/function () {\n  function AbstractTokenizer(fileInfo) {\n    _classCallCheck(this, AbstractTokenizer);\n\n    /**\n     * Tokenizer-stream position\n     */\n    this.position = 0;\n    this.numBuffer = Buffer.alloc(10);\n    this.fileInfo = fileInfo ? fileInfo : {};\n  }\n  /**\n   * Read a token from the tokenizer-stream\n   * @param token - The token to read\n   * @param position - If provided, the desired position in the tokenizer-stream\n   * @returns Promise with token data\n   */\n\n\n  _createClass(AbstractTokenizer, [{\n    key: \"readToken\",\n    value: function () {\n      var _readToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token, position) {\n        var buffer, len;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.alloc(token.len);\n                _context.next = 3;\n                return this.readBuffer(buffer, {\n                  position: position\n                });\n\n              case 3:\n                len = _context.sent;\n\n                if (!(len < token.len)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new peek_readable_1.EndOfStreamError();\n\n              case 6:\n                return _context.abrupt(\"return\", token.get(buffer, 0));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function readToken(_x, _x2) {\n        return _readToken.apply(this, arguments);\n      }\n\n      return readToken;\n    }()\n    /**\n     * Peek a token from the tokenizer-stream.\n     * @param token - Token to peek from the tokenizer-stream.\n     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\n     * @returns Promise with token data\n     */\n\n  }, {\n    key: \"peekToken\",\n    value: function () {\n      var _peekToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token) {\n        var position,\n            buffer,\n            len,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                position = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : this.position;\n                buffer = Buffer.alloc(token.len);\n                _context2.next = 4;\n                return this.peekBuffer(buffer, {\n                  position: position\n                });\n\n              case 4:\n                len = _context2.sent;\n\n                if (!(len < token.len)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new peek_readable_1.EndOfStreamError();\n\n              case 7:\n                return _context2.abrupt(\"return\", token.get(buffer, 0));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function peekToken(_x3) {\n        return _peekToken.apply(this, arguments);\n      }\n\n      return peekToken;\n    }()\n    /**\n     * Read a numeric token from the stream\n     * @param token - Numeric token\n     * @returns Promise with number\n     */\n\n  }, {\n    key: \"readNumber\",\n    value: function () {\n      var _readNumber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token) {\n        var len;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.readBuffer(this.numBuffer, {\n                  length: token.len\n                });\n\n              case 2:\n                len = _context3.sent;\n\n                if (!(len < token.len)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new peek_readable_1.EndOfStreamError();\n\n              case 5:\n                return _context3.abrupt(\"return\", token.get(this.numBuffer, 0));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function readNumber(_x4) {\n        return _readNumber.apply(this, arguments);\n      }\n\n      return readNumber;\n    }()\n    /**\n     * Read a numeric token from the stream\n     * @param token - Numeric token\n     * @returns Promise with number\n     */\n\n  }, {\n    key: \"peekNumber\",\n    value: function () {\n      var _peekNumber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(token) {\n        var len;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.peekBuffer(this.numBuffer, {\n                  length: token.len\n                });\n\n              case 2:\n                len = _context4.sent;\n\n                if (!(len < token.len)) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                throw new peek_readable_1.EndOfStreamError();\n\n              case 5:\n                return _context4.abrupt(\"return\", token.get(this.numBuffer, 0));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function peekNumber(_x5) {\n        return _peekNumber.apply(this, arguments);\n      }\n\n      return peekNumber;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }]);\n\n  return AbstractTokenizer;\n}();\n\nexports.AbstractTokenizer = AbstractTokenizer;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/strtok3/lib/AbstractTokenizer.js"],"names":["Object","defineProperty","exports","value","AbstractTokenizer","peek_readable_1","require","fileInfo","position","numBuffer","Buffer","alloc","token","buffer","len","readBuffer","EndOfStreamError","get","peekBuffer","length"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractTokenizer = void 0;\nconst peek_readable_1 = require(\"peek-readable\");\n/**\n * Core tokenizer\n */\nclass AbstractTokenizer {\n    constructor(fileInfo) {\n        /**\n         * Tokenizer-stream position\n         */\n        this.position = 0;\n        this.numBuffer = Buffer.alloc(10);\n        this.fileInfo = fileInfo ? fileInfo : {};\n    }\n    /**\n     * Read a token from the tokenizer-stream\n     * @param token - The token to read\n     * @param position - If provided, the desired position in the tokenizer-stream\n     * @returns Promise with token data\n     */\n    async readToken(token, position) {\n        const buffer = Buffer.alloc(token.len);\n        const len = await this.readBuffer(buffer, { position });\n        if (len < token.len)\n            throw new peek_readable_1.EndOfStreamError();\n        return token.get(buffer, 0);\n    }\n    /**\n     * Peek a token from the tokenizer-stream.\n     * @param token - Token to peek from the tokenizer-stream.\n     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\n     * @returns Promise with token data\n     */\n    async peekToken(token, position = this.position) {\n        const buffer = Buffer.alloc(token.len);\n        const len = await this.peekBuffer(buffer, { position });\n        if (len < token.len)\n            throw new peek_readable_1.EndOfStreamError();\n        return token.get(buffer, 0);\n    }\n    /**\n     * Read a numeric token from the stream\n     * @param token - Numeric token\n     * @returns Promise with number\n     */\n    async readNumber(token) {\n        const len = await this.readBuffer(this.numBuffer, { length: token.len });\n        if (len < token.len)\n            throw new peek_readable_1.EndOfStreamError();\n        return token.get(this.numBuffer, 0);\n    }\n    /**\n     * Read a numeric token from the stream\n     * @param token - Numeric token\n     * @returns Promise with number\n     */\n    async peekNumber(token) {\n        const len = await this.peekBuffer(this.numBuffer, { length: token.len });\n        if (len < token.len)\n            throw new peek_readable_1.EndOfStreamError();\n        return token.get(this.numBuffer, 0);\n    }\n    async close() {\n        // empty\n    }\n}\nexports.AbstractTokenizer = AbstractTokenizer;\n"]},"metadata":{},"sourceType":"script"}