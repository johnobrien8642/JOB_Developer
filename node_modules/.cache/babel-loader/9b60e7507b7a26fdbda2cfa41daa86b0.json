{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamReader = void 0;\n\nvar Token = require(\"token-types\");\n\nvar Util_1 = require(\"../../common/Util\");\n\nvar initDebug = require(\"debug\");\n\nvar debug = initDebug('music-metadata:parser:musepack:sv8');\nvar PacketKey = new Token.StringType(2, 'binary');\n/**\r\n * Stream Header Packet part 1\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\n\nvar SH_part1 = {\n  len: 5,\n  get: function get(buf, off) {\n    return {\n      crc: Token.UINT32_LE.get(buf, off),\n      streamVersion: Token.UINT8.get(buf, off + 4)\n    };\n  }\n};\n/**\r\n * Stream Header Packet part 3\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\n\nvar SH_part3 = {\n  len: 2,\n  get: function get(buf, off) {\n    return {\n      sampleFrequency: [44100, 48000, 37800, 32000][Util_1.default.getBitAllignedNumber(buf, off, 0, 3)],\n      maxUsedBands: Util_1.default.getBitAllignedNumber(buf, off, 3, 5),\n      channelCount: Util_1.default.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\n      msUsed: Util_1.default.isBitSet(buf, off + 1, 4),\n      audioBlockFrames: Util_1.default.getBitAllignedNumber(buf, off + 1, 5, 3)\n    };\n  }\n};\n\nvar StreamReader = /*#__PURE__*/function () {\n  function StreamReader(tokenizer) {\n    _classCallCheck(this, StreamReader);\n\n    this.tokenizer = tokenizer;\n  }\n\n  _createClass(StreamReader, [{\n    key: \"readPacketHeader\",\n    value: function () {\n      var _readPacketHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var key, size;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.tokenizer.readToken(PacketKey);\n\n              case 2:\n                key = _context.sent;\n                _context.next = 5;\n                return this.readVariableSizeField();\n\n              case 5:\n                size = _context.sent;\n                return _context.abrupt(\"return\", {\n                  key: key,\n                  payloadLength: size.value - 2 - size.len\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function readPacketHeader() {\n        return _readPacketHeader.apply(this, arguments);\n      }\n\n      return readPacketHeader;\n    }()\n  }, {\n    key: \"readStreamHeader\",\n    value: function () {\n      var _readStreamHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(size) {\n        var streamHeader, part1, sampleCount, bs, part3;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                streamHeader = {};\n                debug(\"Reading SH at offset=\".concat(this.tokenizer.position));\n                _context2.next = 4;\n                return this.tokenizer.readToken(SH_part1);\n\n              case 4:\n                part1 = _context2.sent;\n                size -= SH_part1.len;\n                Object.assign(streamHeader, part1);\n                debug(\"SH.streamVersion = \".concat(part1.streamVersion));\n                _context2.next = 10;\n                return this.readVariableSizeField();\n\n              case 10:\n                sampleCount = _context2.sent;\n                size -= sampleCount.len;\n                streamHeader.sampleCount = sampleCount.value;\n                _context2.next = 15;\n                return this.readVariableSizeField();\n\n              case 15:\n                bs = _context2.sent;\n                size -= bs.len;\n                streamHeader.beginningOfSilence = bs.value;\n                _context2.next = 20;\n                return this.tokenizer.readToken(SH_part3);\n\n              case 20:\n                part3 = _context2.sent;\n                size -= SH_part3.len;\n                Object.assign(streamHeader, part3); // assert.equal(size, 0);\n\n                _context2.next = 25;\n                return this.tokenizer.ignore(size);\n\n              case 25:\n                return _context2.abrupt(\"return\", streamHeader);\n\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function readStreamHeader(_x) {\n        return _readStreamHeader.apply(this, arguments);\n      }\n\n      return readStreamHeader;\n    }()\n  }, {\n    key: \"readVariableSizeField\",\n    value: function () {\n      var _readVariableSizeField = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var len,\n            hb,\n            n,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                len = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 1;\n                hb = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 0;\n                _context3.next = 4;\n                return this.tokenizer.readNumber(Token.UINT8);\n\n              case 4:\n                n = _context3.sent;\n\n                if (!((n & 0x80) === 0)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  len: len,\n                  value: hb + n\n                });\n\n              case 7:\n                n &= 0x7F;\n                n += hb;\n                return _context3.abrupt(\"return\", this.readVariableSizeField(len + 1, n << 7));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function readVariableSizeField() {\n        return _readVariableSizeField.apply(this, arguments);\n      }\n\n      return readVariableSizeField;\n    }()\n  }]);\n\n  return StreamReader;\n}();\n\nexports.StreamReader = StreamReader;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js"],"names":["Object","defineProperty","exports","value","StreamReader","Token","require","Util_1","initDebug","debug","PacketKey","StringType","SH_part1","len","get","buf","off","crc","UINT32_LE","streamVersion","UINT8","SH_part3","sampleFrequency","default","getBitAllignedNumber","maxUsedBands","channelCount","msUsed","isBitSet","audioBlockFrames","tokenizer","readToken","key","readVariableSizeField","size","payloadLength","streamHeader","position","part1","assign","sampleCount","bs","beginningOfSilence","part3","ignore","hb","readNumber","n"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StreamReader = void 0;\r\nconst Token = require(\"token-types\");\r\nconst Util_1 = require(\"../../common/Util\");\r\nconst initDebug = require(\"debug\");\r\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\r\nconst PacketKey = new Token.StringType(2, 'binary');\r\n/**\r\n * Stream Header Packet part 1\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\r\nconst SH_part1 = {\r\n    len: 5,\r\n    get: (buf, off) => {\r\n        return {\r\n            crc: Token.UINT32_LE.get(buf, off),\r\n            streamVersion: Token.UINT8.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Stream Header Packet part 3\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\r\nconst SH_part3 = {\r\n    len: 2,\r\n    get: (buf, off) => {\r\n        return {\r\n            sampleFrequency: [44100, 48000, 37800, 32000][Util_1.default.getBitAllignedNumber(buf, off, 0, 3)],\r\n            maxUsedBands: Util_1.default.getBitAllignedNumber(buf, off, 3, 5),\r\n            channelCount: Util_1.default.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\r\n            msUsed: Util_1.default.isBitSet(buf, off + 1, 4),\r\n            audioBlockFrames: Util_1.default.getBitAllignedNumber(buf, off + 1, 5, 3)\r\n        };\r\n    }\r\n};\r\nclass StreamReader {\r\n    constructor(tokenizer) {\r\n        this.tokenizer = tokenizer;\r\n    }\r\n    async readPacketHeader() {\r\n        const key = await this.tokenizer.readToken(PacketKey);\r\n        const size = await this.readVariableSizeField();\r\n        return {\r\n            key,\r\n            payloadLength: size.value - 2 - size.len\r\n        };\r\n    }\r\n    async readStreamHeader(size) {\r\n        const streamHeader = {};\r\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\r\n        const part1 = await this.tokenizer.readToken(SH_part1);\r\n        size -= SH_part1.len;\r\n        Object.assign(streamHeader, part1);\r\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\r\n        const sampleCount = await this.readVariableSizeField();\r\n        size -= sampleCount.len;\r\n        streamHeader.sampleCount = sampleCount.value;\r\n        const bs = await this.readVariableSizeField();\r\n        size -= bs.len;\r\n        streamHeader.beginningOfSilence = bs.value;\r\n        const part3 = await this.tokenizer.readToken(SH_part3);\r\n        size -= SH_part3.len;\r\n        Object.assign(streamHeader, part3);\r\n        // assert.equal(size, 0);\r\n        await this.tokenizer.ignore(size);\r\n        return streamHeader;\r\n    }\r\n    async readVariableSizeField(len = 1, hb = 0) {\r\n        let n = await this.tokenizer.readNumber(Token.UINT8);\r\n        if ((n & 0x80) === 0) {\r\n            return { len, value: hb + n };\r\n        }\r\n        n &= 0x7F;\r\n        n += hb;\r\n        return this.readVariableSizeField(len + 1, n << 7);\r\n    }\r\n}\r\nexports.StreamReader = StreamReader;\r\n"]},"metadata":{},"sourceType":"script"}