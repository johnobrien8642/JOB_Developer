{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/util/components/forms/inputTypes/Description_String_Input.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport randomstring from 'randomstring';\nimport Editor from 'ckeditor5-custom-build/build/ckeditor';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport Queries from '../../../../../../graphql/queries.js';\nimport PostFormUtil from '../../../functions/post_form_util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  MentionCustomization\n} = PostFormUtil;\nconst {\n  FETCH_USERS_FOR_MENTIONS\n} = Queries;\n\nconst DescriptionStringInput = ({\n  body,\n  description,\n  setDescription,\n  repost\n}) => {\n  _s();\n\n  const client = useApolloClient();\n\n  const handlePlaceholder = () => {\n    if (repost) {\n      return 'Enter a caption';\n    } else {\n      return 'Your text here';\n    }\n  };\n\n  const editorConfiguration = {\n    extraPlugins: [MentionCustomization],\n    placeholder: handlePlaceholder(),\n    balloonToolbar: ['bold', 'italic', 'underline', 'link', 'blockQuote', 'undo', 'redo'],\n    mention: {\n      feeds: [{\n        marker: '@',\n        feed: query => {\n          return client.query({\n            query: FETCH_USERS_FOR_MENTIONS,\n            variables: {\n              filter: query\n            }\n          }).then(res => {\n            return res.data.fetchUsersForMentions.map(u => ({\n              id: '@' + u.blogName,\n              actualId: randomstring.generate({\n                length: 12,\n                charset: 'alphabetic'\n              })\n            }));\n          });\n        },\n        minimumCharacters: 1\n      }]\n    }\n  };\n\n  if (repost) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"descriptionStringContainer\",\n        children: /*#__PURE__*/_jsxDEV(CKEditor, {\n          editor: Editor,\n          config: editorConfiguration,\n          onChange: (e, editor) => {\n            setDescription(description = editor.getData());\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"descriptionStringContainer\",\n        children: /*#__PURE__*/_jsxDEV(CKEditor, {\n          editor: Editor,\n          config: editorConfiguration,\n          onChange: (e, editor) => {\n            setDescription(description = editor.getData());\n          },\n          onReady: (editor, description) => {\n            editor.editing.view.document.on('keydown', (evt, data) => {\n              if (data.domEvent.key === 'Enter' && editor.getData()) {\n                var textObj = {\n                  kind: 'text',\n                  srcType: 'text',\n                  content: editor.getData(),\n                  displayIdx: body.current.length,\n                  uniqId: randomstring.generate({\n                    length: 12,\n                    charset: 'alphabetic'\n                  })\n                };\n                body.current.push(textObj);\n                editor.setData('<p class=\"ck-placeholder\" data-placeholder=\"Your text here\"><br data-cke-filler=\"true\"></p>');\n              }\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(DescriptionStringInput, \"bRce2qNAOkF4RDs+MXWx0he9v30=\", false, function () {\n  return [useApolloClient];\n});\n\n_c = DescriptionStringInput;\nexport default DescriptionStringInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"DescriptionStringInput\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/util/components/forms/inputTypes/Description_String_Input.js"],"names":["React","useApolloClient","randomstring","Editor","CKEditor","Queries","PostFormUtil","MentionCustomization","FETCH_USERS_FOR_MENTIONS","DescriptionStringInput","body","description","setDescription","repost","client","handlePlaceholder","editorConfiguration","extraPlugins","placeholder","balloonToolbar","mention","feeds","marker","feed","query","variables","filter","then","res","data","fetchUsersForMentions","map","u","id","blogName","actualId","generate","length","charset","minimumCharacters","e","editor","getData","editing","view","document","on","evt","domEvent","key","textObj","kind","srcType","content","displayIdx","current","uniqId","push","setData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport randomstring from 'randomstring';\n\nimport Editor from 'ckeditor5-custom-build/build/ckeditor';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n\nimport Queries from '../../../../../../graphql/queries.js'\nimport PostFormUtil from '../../../functions/post_form_util.js'\nconst { MentionCustomization } = PostFormUtil;\nconst { FETCH_USERS_FOR_MENTIONS } = Queries;\n\n\nconst DescriptionStringInput = ({\n  body, \n  description,\n  setDescription,\n  repost,\n}) => {\n  const client = useApolloClient();\n\n  const handlePlaceholder = () => {\n    if (repost) {\n      return 'Enter a caption'\n    } else {\n      return 'Your text here'\n    }\n  }\n\n  const editorConfiguration = {\n    extraPlugins: [MentionCustomization],\n    placeholder: handlePlaceholder(),\n    balloonToolbar: [\n      'bold',\n      'italic',\n      'underline',\n      'link',\n      'blockQuote',\n      'undo',\n      'redo'\n    ],\n    mention: {\n      feeds: [\n        {\n          marker: '@',\n          feed: query => {\n            return client.query({\n              query: FETCH_USERS_FOR_MENTIONS,\n              variables: {\n                filter: query\n              }\n            }).then(res => {\n              return res.data.fetchUsersForMentions.map(u => ({\n                id: '@' + u.blogName,\n                actualId: randomstring.generate({\n                  length: 12,\n                  charset: 'alphabetic'\n                })\n              }))\n            })\n          },\n          minimumCharacters: 1\n        }\n      ]\n    }\n  }\n\n  if (repost) {\n    return (\n      <React.Fragment>\n        <div\n          className='descriptionStringContainer'\n        >\n          <CKEditor\n            editor={ Editor }\n            config={\n              editorConfiguration \n            }\n            onChange={(e, editor) => {\n              setDescription(description = editor.getData())\n            }}\n          />\n        </div>\n      </React.Fragment>\n    )\n  } else {\n    return (\n      <React.Fragment>\n        <div\n          className='descriptionStringContainer'\n        >\n          <CKEditor\n            editor={ Editor }\n            config={\n              editorConfiguration \n            }\n            onChange={(e, editor) => {\n              setDescription(description = editor.getData())\n            }}\n            onReady={(editor, description) => {\n  \n              editor.editing.view.document.on('keydown', (evt, data) => {\n                if (data.domEvent.key === 'Enter' && editor.getData()) {\n                  var textObj = {\n                    kind: 'text',\n                    srcType: 'text',\n                    content: editor.getData(),\n                    displayIdx: body.current.length,\n                    uniqId: randomstring.generate({\n                      length: 12,\n                      charset: 'alphabetic'\n                    })\n                  }\n  \n                  body.current.push(textObj)\n                  editor.setData('<p class=\"ck-placeholder\" data-placeholder=\"Your text here\"><br data-cke-filler=\"true\"></p>')\n                }\n              })\n            }}\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default DescriptionStringInput;"]},"metadata":{},"sourceType":"module"}