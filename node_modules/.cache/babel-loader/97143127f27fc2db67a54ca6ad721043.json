{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListInfoTagValue = exports.Header = void 0;\n\nconst Token = require(\"token-types\");\n/**\r\n * Common RIFF chunk header\r\n */\n\n\nexports.Header = {\n  len: 8,\n  get: (buf, off) => {\n    return {\n      // Group-ID\n      chunkID: buf.toString('binary', off, off + 4),\n      // Size\n      chunkSize: buf.readUInt32LE(off + 4)\n    };\n  }\n};\n/**\r\n * Token to parse RIFF-INFO tag value\r\n */\n\nclass ListInfoTagValue {\n  constructor(tagHeader) {\n    this.tagHeader = tagHeader;\n    this.len = tagHeader.chunkSize;\n    this.len += this.len & 1; // if it is an odd length, round up to even\n  }\n\n  get(buf, off) {\n    return new Token.StringType(this.tagHeader.chunkSize, 'ascii').get(buf, off);\n  }\n\n}\n\nexports.ListInfoTagValue = ListInfoTagValue;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/music-metadata/lib/riff/RiffChunk.js"],"names":["Object","defineProperty","exports","value","ListInfoTagValue","Header","Token","require","len","get","buf","off","chunkID","toString","chunkSize","readUInt32LE","constructor","tagHeader","StringType"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,MAAR,GAAiB,KAAK,CAAjD;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;AACA;AACA;AACA;;;AACAL,OAAO,CAACG,MAAR,GAAiB;AACbG,EAAAA,GAAG,EAAE,CADQ;AAEbC,EAAAA,GAAG,EAAE,CAACC,GAAD,EAAMC,GAAN,KAAc;AACf,WAAO;AACH;AACAC,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAa,QAAb,EAAuBF,GAAvB,EAA4BA,GAAG,GAAG,CAAlC,CAFN;AAGH;AACAG,MAAAA,SAAS,EAAEJ,GAAG,CAACK,YAAJ,CAAiBJ,GAAG,GAAG,CAAvB;AAJR,KAAP;AAMH;AATY,CAAjB;AAWA;AACA;AACA;;AACA,MAAMP,gBAAN,CAAuB;AACnBY,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKT,GAAL,GAAWS,SAAS,CAACH,SAArB;AACA,SAAKN,GAAL,IAAY,KAAKA,GAAL,GAAW,CAAvB,CAHmB,CAGO;AAC7B;;AACDC,EAAAA,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAW;AACV,WAAO,IAAIL,KAAK,CAACY,UAAV,CAAqB,KAAKD,SAAL,CAAeH,SAApC,EAA+C,OAA/C,EAAwDL,GAAxD,CAA4DC,GAA5D,EAAiEC,GAAjE,CAAP;AACH;;AARkB;;AAUvBT,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ListInfoTagValue = exports.Header = void 0;\r\nconst Token = require(\"token-types\");\r\n/**\r\n * Common RIFF chunk header\r\n */\r\nexports.Header = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        return {\r\n            // Group-ID\r\n            chunkID: buf.toString('binary', off, off + 4),\r\n            // Size\r\n            chunkSize: buf.readUInt32LE(off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Token to parse RIFF-INFO tag value\r\n */\r\nclass ListInfoTagValue {\r\n    constructor(tagHeader) {\r\n        this.tagHeader = tagHeader;\r\n        this.len = tagHeader.chunkSize;\r\n        this.len += this.len & 1; // if it is an odd length, round up to even\r\n    }\r\n    get(buf, off) {\r\n        return new Token.StringType(this.tagHeader.chunkSize, 'ascii').get(buf, off);\r\n    }\r\n}\r\nexports.ListInfoTagValue = ListInfoTagValue;\r\n"]},"metadata":{},"sourceType":"script"}