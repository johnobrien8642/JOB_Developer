{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RandomBufferReader = void 0;\n/**\r\n * Provides abstract Node Buffer access via the IRandomRead interface\r\n */\n\nvar RandomBufferReader = /*#__PURE__*/function () {\n  function RandomBufferReader(buf) {\n    _classCallCheck(this, RandomBufferReader);\n\n    this.buf = buf;\n    this.fileSize = buf.length;\n  }\n  /**\r\n   * Read from a given position of an abstracted file or buffer.\r\n   * @param buffer {Buffer} is the buffer that the data will be written to.\r\n   * @param offset {number} is the offset in the buffer to start writing at.\r\n   * @param length {number}is an integer specifying the number of bytes to read.\r\n   * @param position {number} is an argument specifying where to begin reading from in the file.\r\n   * @return {Promise<number>} bytes read\r\n   */\n\n\n  _createClass(RandomBufferReader, [{\n    key: \"randomRead\",\n    value: function () {\n      var _randomRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buffer, offset, length, position) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.buf.copy(buffer, offset, position, position + length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function randomRead(_x, _x2, _x3, _x4) {\n        return _randomRead.apply(this, arguments);\n      }\n\n      return randomRead;\n    }()\n  }]);\n\n  return RandomBufferReader;\n}();\n\nexports.RandomBufferReader = RandomBufferReader;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/common/RandomBufferReader.js"],"names":["Object","defineProperty","exports","value","RandomBufferReader","buf","fileSize","length","buffer","offset","position","copy"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;AACA;AACA;AACA;;IACMA,kB;AACF,8BAAYC,GAAZ,EAAiB;AAAA;;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,QAAL,GAAgBD,GAAG,CAACE,MAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;iFACI,iBAAiBC,MAAjB,EAAyBC,MAAzB,EAAiCF,MAAjC,EAAyCG,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,iDACW,KAAKL,GAAL,CAASM,IAAT,CAAcH,MAAd,EAAsBC,MAAtB,EAA8BC,QAA9B,EAAwCA,QAAQ,GAAGH,MAAnD,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAIJL,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RandomBufferReader = void 0;\r\n/**\r\n * Provides abstract Node Buffer access via the IRandomRead interface\r\n */\r\nclass RandomBufferReader {\r\n    constructor(buf) {\r\n        this.buf = buf;\r\n        this.fileSize = buf.length;\r\n    }\r\n    /**\r\n     * Read from a given position of an abstracted file or buffer.\r\n     * @param buffer {Buffer} is the buffer that the data will be written to.\r\n     * @param offset {number} is the offset in the buffer to start writing at.\r\n     * @param length {number}is an integer specifying the number of bytes to read.\r\n     * @param position {number} is an argument specifying where to begin reading from in the file.\r\n     * @return {Promise<number>} bytes read\r\n     */\r\n    async randomRead(buffer, offset, length, position) {\r\n        return this.buf.copy(buffer, offset, position, position + length);\r\n    }\r\n}\r\nexports.RandomBufferReader = RandomBufferReader;\r\n"]},"metadata":{},"sourceType":"script"}