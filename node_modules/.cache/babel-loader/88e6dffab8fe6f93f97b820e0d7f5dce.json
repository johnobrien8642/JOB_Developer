{"ast":null,"code":"import React from'react';import{useApolloClient}from'@apollo/client';import randomstring from'randomstring';import Editor from'ckeditor5-custom-build/build/ckeditor';import{CKEditor}from'@ckeditor/ckeditor5-react';import Queries from'../../../../../../graphql/queries.js';import PostFormUtil from'../../../functions/post_form_util.js';import{jsx as _jsx}from\"react/jsx-runtime\";var MentionCustomization=PostFormUtil.MentionCustomization;var FETCH_USERS_FOR_MENTIONS=Queries.FETCH_USERS_FOR_MENTIONS;var DescriptionStringInput=function DescriptionStringInput(_ref){var body=_ref.body,description=_ref.description,setDescription=_ref.setDescription,repost=_ref.repost;var client=useApolloClient();var handlePlaceholder=function handlePlaceholder(){if(repost){return'Enter a caption';}else{return'Your text here';}};var editorConfiguration={extraPlugins:[MentionCustomization],placeholder:handlePlaceholder(),balloonToolbar:['bold','italic','underline','link','blockQuote','undo','redo'],mention:{feeds:[{marker:'@',feed:function feed(query){return client.query({query:FETCH_USERS_FOR_MENTIONS,variables:{filter:query}}).then(function(res){return res.data.fetchUsersForMentions.map(function(u){return{id:'@'+u.blogName,actualId:randomstring.generate({length:12,charset:'alphabetic'})};});});},minimumCharacters:1}]}};if(repost){return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"descriptionStringContainer\",children:/*#__PURE__*/_jsx(CKEditor,{editor:Editor,config:editorConfiguration,onChange:function onChange(e,editor){setDescription(description=editor.getData());}})})});}else{return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"descriptionStringContainer\",children:/*#__PURE__*/_jsx(CKEditor,{editor:Editor,config:editorConfiguration,onChange:function onChange(e,editor){setDescription(description=editor.getData());},onReady:function onReady(editor,description){editor.editing.view.document.on('keydown',function(evt,data){if(data.domEvent.key==='Enter'&&editor.getData()){var textObj={kind:'text',srcType:'text',content:editor.getData(),displayIdx:body.current.length,uniqId:randomstring.generate({length:12,charset:'alphabetic'})};body.current.push(textObj);editor.setData('<p class=\"ck-placeholder\" data-placeholder=\"Your text here\"><br data-cke-filler=\"true\"></p>');}});}})})});}};export default DescriptionStringInput;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/util/components/forms/inputTypes/Description_String_Input.js"],"names":["React","useApolloClient","randomstring","Editor","CKEditor","Queries","PostFormUtil","MentionCustomization","FETCH_USERS_FOR_MENTIONS","DescriptionStringInput","body","description","setDescription","repost","client","handlePlaceholder","editorConfiguration","extraPlugins","placeholder","balloonToolbar","mention","feeds","marker","feed","query","variables","filter","then","res","data","fetchUsersForMentions","map","u","id","blogName","actualId","generate","length","charset","minimumCharacters","e","editor","getData","editing","view","document","on","evt","domEvent","key","textObj","kind","srcType","content","displayIdx","current","uniqId","push","setData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport randomstring from 'randomstring';\n\nimport Editor from 'ckeditor5-custom-build/build/ckeditor';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n\nimport Queries from '../../../../../../graphql/queries.js'\nimport PostFormUtil from '../../../functions/post_form_util.js'\nconst { MentionCustomization } = PostFormUtil;\nconst { FETCH_USERS_FOR_MENTIONS } = Queries;\n\n\nconst DescriptionStringInput = ({\n  body, \n  description,\n  setDescription,\n  repost,\n}) => {\n  const client = useApolloClient();\n\n  const handlePlaceholder = () => {\n    if (repost) {\n      return 'Enter a caption'\n    } else {\n      return 'Your text here'\n    }\n  }\n\n  const editorConfiguration = {\n    extraPlugins: [MentionCustomization],\n    placeholder: handlePlaceholder(),\n    balloonToolbar: [\n      'bold',\n      'italic',\n      'underline',\n      'link',\n      'blockQuote',\n      'undo',\n      'redo'\n    ],\n    mention: {\n      feeds: [\n        {\n          marker: '@',\n          feed: query => {\n            return client.query({\n              query: FETCH_USERS_FOR_MENTIONS,\n              variables: {\n                filter: query\n              }\n            }).then(res => {\n              return res.data.fetchUsersForMentions.map(u => ({\n                id: '@' + u.blogName,\n                actualId: randomstring.generate({\n                  length: 12,\n                  charset: 'alphabetic'\n                })\n              }))\n            })\n          },\n          minimumCharacters: 1\n        }\n      ]\n    }\n  }\n\n  if (repost) {\n    return (\n      <React.Fragment>\n        <div\n          className='descriptionStringContainer'\n        >\n          <CKEditor\n            editor={ Editor }\n            config={\n              editorConfiguration \n            }\n            onChange={(e, editor) => {\n              setDescription(description = editor.getData())\n            }}\n          />\n        </div>\n      </React.Fragment>\n    )\n  } else {\n    return (\n      <React.Fragment>\n        <div\n          className='descriptionStringContainer'\n        >\n          <CKEditor\n            editor={ Editor }\n            config={\n              editorConfiguration \n            }\n            onChange={(e, editor) => {\n              setDescription(description = editor.getData())\n            }}\n            onReady={(editor, description) => {\n  \n              editor.editing.view.document.on('keydown', (evt, data) => {\n                if (data.domEvent.key === 'Enter' && editor.getData()) {\n                  var textObj = {\n                    kind: 'text',\n                    srcType: 'text',\n                    content: editor.getData(),\n                    displayIdx: body.current.length,\n                    uniqId: randomstring.generate({\n                      length: 12,\n                      charset: 'alphabetic'\n                    })\n                  }\n  \n                  body.current.push(textObj)\n                  editor.setData('<p class=\"ck-placeholder\" data-placeholder=\"Your text here\"><br data-cke-filler=\"true\"></p>')\n                }\n              })\n            }}\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default DescriptionStringInput;"]},"metadata":{},"sourceType":"module"}