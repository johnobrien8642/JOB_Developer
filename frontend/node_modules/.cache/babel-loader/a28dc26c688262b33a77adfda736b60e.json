{"ast":null,"code":"const postCreate = (client, createPost, currentUser, query) => {\n  var readQuery = client.readQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    }\n  });\n  var {\n    fetchUserFeed\n  } = readQuery;\n  var newPostArr = [{\n    __typename: 'createPost'\n  }, createPost, ...fetchUserFeed];\n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      fetchUserFeed: newPostArr\n    }\n  });\n};\n\nconst postUpdate = (client, updatePost, currentUser, query) => {\n  var readQuery = client.readQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    }\n  });\n  var {\n    fetchUserFeed\n  } = readQuery;\n  var newPostArr = [...fetchUserFeed];\n  fetchUserFeed.forEach((p, i) => {\n    if (updatePost._id === p._id) {\n      newPostArr.splice(i, 1, updatePost);\n    }\n  });\n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      fetchUserFeed: newPostArr\n    }\n  });\n};\n\nconst commentPost = (client, comment, post, query) => {\n  var readFeed = client.readQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    }\n  });\n  var {\n    fetchLikesRepostsAndComments\n  } = readFeed;\n  var newPostArr = [...fetchLikesRepostsAndComments, comment];\n  client.writeQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    },\n    data: {\n      fetchLikesRepostsAndComments: newPostArr\n    }\n  });\n};\n\nconst postDelete = (client, post, deletePost, currentUser, query) => {\n  var readFeed = client.readQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    }\n  });\n  var {\n    fetchUserFeed\n  } = readFeed;\n  var newPostArr = fetchUserFeed.filter(post1 => post1._id !== post._id);\n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      fetchUserFeed: [{\n        __typename: 'deletePost'\n      }, ...newPostArr]\n    }\n  });\n};\n\nconst postLike = (client, likePost, post, query) => {\n  var readFeed = client.readQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    }\n  });\n  var {\n    fetchLikesRepostsAndComments\n  } = readFeed;\n  var newPostArr = [...fetchLikesRepostsAndComments, likePost];\n  client.writeQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    },\n    data: {\n      fetchLikesRepostsAndComments: newPostArr\n    }\n  });\n};\n\nconst postUnlike = (client, unlikePost, post, liked, query) => {\n  var readFeed = client.readQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    }\n  });\n  var {\n    fetchLikesRepostsAndComments\n  } = readFeed;\n  var newPostArr = fetchLikesRepostsAndComments.filter(item => {\n    if (item._id === liked._id) {\n      return false;\n    } else {\n      return true;\n    }\n  });\n  client.writeQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    },\n    data: {\n      fetchLikesRepostsAndComments: newPostArr\n    }\n  });\n};\n\nconst filterTag = (client, addFilterTag, currentUser, query) => {\n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      user: {\n        filteredTags: addFilterTag.filteredTags\n      }\n    }\n  });\n};\n\nconst filterPostContent = (client, addFilterPostContent, currentUser, query) => {\n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      user: {\n        filteredTags: addFilterPostContent.filteredPostContent\n      }\n    }\n  });\n};\n\nconst followUpdate = (client, follow, gqlQuery, query, kind) => {\n  var readFeed = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query\n    }\n  });\n  var {\n    user\n  } = readFeed;\n  var newArr = kind === 'User' ? [...user.userFollows, follow._id] : [...user.tagFollows, follow._id];\n\n  if (kind === 'User') {\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query\n      },\n      data: {\n        user: {\n          userFollows: newArr\n        }\n      }\n    });\n  } else {\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query\n      },\n      data: {\n        user: {\n          tagFollows: newArr\n        }\n      }\n    });\n  }\n};\n\nconst unfollowUpdate = (client, unfollow, gqlQuery, query, kind) => {\n  var readFeed = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query\n    }\n  });\n  var {\n    user\n  } = readFeed;\n  var newArr = kind === 'User' ? user.userFollows.filter(obj => obj._id !== unfollow._id) : user.tagFollows.filter(obj => obj._id !== unfollow._id);\n\n  if (kind === 'User') {\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query\n      },\n      data: {\n        user: {\n          userFollows: newArr\n        }\n      }\n    });\n  } else {\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query\n      },\n      data: {\n        user: {\n          tagFollows: newArr\n        }\n      }\n    });\n  }\n};\n\nconst UpdateCacheUtil = {\n  postCreate,\n  postUpdate,\n  commentPost,\n  postDelete,\n  postLike,\n  postUnlike,\n  filterTag,\n  filterPostContent,\n  followUpdate,\n  unfollowUpdate\n};\nexport default UpdateCacheUtil;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/util/functions/update_cache_util.js"],"names":["postCreate","client","createPost","currentUser","query","readQuery","variables","fetchUserFeed","newPostArr","__typename","writeQuery","data","postUpdate","updatePost","forEach","p","i","_id","splice","commentPost","comment","post","readFeed","postId","fetchLikesRepostsAndComments","postDelete","deletePost","filter","post1","postLike","likePost","postUnlike","unlikePost","liked","item","filterTag","addFilterTag","user","filteredTags","filterPostContent","addFilterPostContent","filteredPostContent","followUpdate","follow","gqlQuery","kind","newArr","userFollows","tagFollows","unfollowUpdate","unfollow","obj","UpdateCacheUtil"],"mappings":"AAAA,MAAMA,UAAU,GAAG,CACjBC,MADiB,EAEjBC,UAFiB,EAGjBC,WAHiB,EAIjBC,KAJiB,KAKd;AACH,MAAIC,SAAS,GAAGJ,MAAM,CAACI,SAAP,CAAiB;AAC/BD,IAAAA,KAAK,EAAEA,KADwB;AAE/BE,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAED;AADE;AAFoB,GAAjB,CAAhB;AAOA,MAAI;AAAEI,IAAAA;AAAF,MAAoBF,SAAxB;AAEA,MAAIG,UAAU,GAAG,CAAC;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAAD,EAA+BP,UAA/B,EAA2C,GAAGK,aAA9C,CAAjB;AAEAN,EAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,IAAAA,KAAK,EAAEA,KADS;AAEhBE,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAED;AADE,KAFK;AAKhBQ,IAAAA,IAAI,EAAE;AACJJ,MAAAA,aAAa,EAAEC;AADX;AALU,GAAlB;AASD,CA1BD;;AA4BA,MAAMI,UAAU,GAAG,CACjBX,MADiB,EAEjBY,UAFiB,EAGjBV,WAHiB,EAIjBC,KAJiB,KAKd;AACH,MAAIC,SAAS,GAAGJ,MAAM,CAACI,SAAP,CAAiB;AAC/BD,IAAAA,KAAK,EAAEA,KADwB;AAE/BE,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAED;AADE;AAFoB,GAAjB,CAAhB;AAOA,MAAI;AAAEI,IAAAA;AAAF,MAAoBF,SAAxB;AAEA,MAAIG,UAAU,GAAG,CAAC,GAAGD,aAAJ,CAAjB;AAEAA,EAAAA,aAAa,CAACO,OAAd,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC9B,QAAIH,UAAU,CAACI,GAAX,KAAmBF,CAAC,CAACE,GAAzB,EAA8B;AAC5BT,MAAAA,UAAU,CAACU,MAAX,CAAkBF,CAAlB,EAAqB,CAArB,EAAwBH,UAAxB;AACD;AACF,GAJD;AAMAZ,EAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,IAAAA,KAAK,EAAEA,KADS;AAEhBE,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAED;AADE,KAFK;AAKhBQ,IAAAA,IAAI,EAAE;AACJJ,MAAAA,aAAa,EAAEC;AADX;AALU,GAAlB;AASD,CAhCD;;AAkCA,MAAMW,WAAW,GAAG,CAClBlB,MADkB,EAElBmB,OAFkB,EAGlBC,IAHkB,EAIlBjB,KAJkB,KAKf;AACH,MAAIkB,QAAQ,GAAGrB,MAAM,CAACI,SAAP,CAAiB;AAC9BD,IAAAA,KAAK,EAAEA,KADuB;AAE9BE,IAAAA,SAAS,EAAE;AACTiB,MAAAA,MAAM,EAAEF,IAAI,CAACJ;AADJ;AAFmB,GAAjB,CAAf;AAOA,MAAI;AAAEO,IAAAA;AAAF,MAAmCF,QAAvC;AAEA,MAAId,UAAU,GAAG,CAAC,GAAGgB,4BAAJ,EAAkCJ,OAAlC,CAAjB;AAEAnB,EAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,IAAAA,KAAK,EAAEA,KADS;AAEhBE,IAAAA,SAAS,EAAE;AACTiB,MAAAA,MAAM,EAAEF,IAAI,CAACJ;AADJ,KAFK;AAKhBN,IAAAA,IAAI,EAAE;AACJa,MAAAA,4BAA4B,EAAEhB;AAD1B;AALU,GAAlB;AASD,CA1BD;;AA4BA,MAAMiB,UAAU,GAAG,CACjBxB,MADiB,EAEjBoB,IAFiB,EAGjBK,UAHiB,EAIjBvB,WAJiB,EAKjBC,KALiB,KAMd;AACH,MAAIkB,QAAQ,GAAGrB,MAAM,CAACI,SAAP,CAAiB;AAC9BD,IAAAA,KAAK,EAAEA,KADuB;AAE9BE,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAED;AADE;AAFmB,GAAjB,CAAf;AAOA,MAAI;AAAEI,IAAAA;AAAF,MAAoBe,QAAxB;AAEA,MAAId,UAAU,GAAGD,aAAa,CAACoB,MAAd,CAAqBC,KAAK,IAAIA,KAAK,CAACX,GAAN,KAAcI,IAAI,CAACJ,GAAjD,CAAjB;AAEAhB,EAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,IAAAA,KAAK,EAAEA,KADS;AAEhBE,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAED;AADE,KAFK;AAKhBQ,IAAAA,IAAI,EAAE;AACJJ,MAAAA,aAAa,EAAE,CAAC;AAAEE,QAAAA,UAAU,EAAE;AAAd,OAAD,EAA+B,GAAGD,UAAlC;AADX;AALU,GAAlB;AASD,CA3BD;;AA6BA,MAAMqB,QAAQ,GAAG,CACf5B,MADe,EAEf6B,QAFe,EAGfT,IAHe,EAIfjB,KAJe,KAKZ;AAEH,MAAIkB,QAAQ,GAAGrB,MAAM,CAACI,SAAP,CAAiB;AAC9BD,IAAAA,KAAK,EAAEA,KADuB;AAE9BE,IAAAA,SAAS,EAAE;AACTiB,MAAAA,MAAM,EAAEF,IAAI,CAACJ;AADJ;AAFmB,GAAjB,CAAf;AAOA,MAAI;AAAEO,IAAAA;AAAF,MAAmCF,QAAvC;AAEA,MAAId,UAAU,GAAG,CAAC,GAAGgB,4BAAJ,EAAkCM,QAAlC,CAAjB;AAEA7B,EAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,IAAAA,KAAK,EAAEA,KADS;AAEhBE,IAAAA,SAAS,EAAE;AACTiB,MAAAA,MAAM,EAAEF,IAAI,CAACJ;AADJ,KAFK;AAKhBN,IAAAA,IAAI,EAAE;AACJa,MAAAA,4BAA4B,EAAEhB;AAD1B;AALU,GAAlB;AASD,CA3BD;;AA6BA,MAAMuB,UAAU,GAAG,CACjB9B,MADiB,EAEjB+B,UAFiB,EAGjBX,IAHiB,EAIjBY,KAJiB,EAKjB7B,KALiB,KAMd;AAEH,MAAIkB,QAAQ,GAAGrB,MAAM,CAACI,SAAP,CAAiB;AAC9BD,IAAAA,KAAK,EAAEA,KADuB;AAE9BE,IAAAA,SAAS,EAAE;AACTiB,MAAAA,MAAM,EAAEF,IAAI,CAACJ;AADJ;AAFmB,GAAjB,CAAf;AAOA,MAAI;AAAEO,IAAAA;AAAF,MAAmCF,QAAvC;AAEA,MAAId,UAAU,GAAGgB,4BAA4B,CAACG,MAA7B,CAAoCO,IAAI,IAAI;AACzD,QAAIA,IAAI,CAACjB,GAAL,KAAagB,KAAK,CAAChB,GAAvB,EAA4B;AAC1B,aAAO,KAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GANc,CAAjB;AASAhB,EAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,IAAAA,KAAK,EAAEA,KADS;AAEhBE,IAAAA,SAAS,EAAE;AACTiB,MAAAA,MAAM,EAAEF,IAAI,CAACJ;AADJ,KAFK;AAKhBN,IAAAA,IAAI,EAAE;AACJa,MAAAA,4BAA4B,EAAEhB;AAD1B;AALU,GAAlB;AASD,CAnCD;;AAqCA,MAAM2B,SAAS,GAAG,CAChBlC,MADgB,EAEhBmC,YAFgB,EAGhBjC,WAHgB,EAIhBC,KAJgB,KAKb;AAEHH,EAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,IAAAA,KAAK,EAAEA,KADS;AAEhBE,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAED;AADE,KAFK;AAKhBQ,IAAAA,IAAI,EAAE;AACJ0B,MAAAA,IAAI,EAAE;AACJC,QAAAA,YAAY,EAAEF,YAAY,CAACE;AADvB;AADF;AALU,GAAlB;AAWD,CAlBD;;AAoBA,MAAMC,iBAAiB,GAAG,CACxBtC,MADwB,EAExBuC,oBAFwB,EAGxBrC,WAHwB,EAIxBC,KAJwB,KAKrB;AAEHH,EAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,IAAAA,KAAK,EAAEA,KADS;AAEhBE,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAED;AADE,KAFK;AAKhBQ,IAAAA,IAAI,EAAE;AACJ0B,MAAAA,IAAI,EAAE;AACJC,QAAAA,YAAY,EAAEE,oBAAoB,CAACC;AAD/B;AADF;AALU,GAAlB;AAWD,CAlBD;;AAoBA,MAAMC,YAAY,GAAG,CACnBzC,MADmB,EAEnB0C,MAFmB,EAGnBC,QAHmB,EAInBxC,KAJmB,EAKnByC,IALmB,KAMhB;AACH,MAAIvB,QAAQ,GAAGrB,MAAM,CAACI,SAAP,CAAiB;AAC9BD,IAAAA,KAAK,EAAEwC,QADuB;AAE9BtC,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAEA;AADE;AAFmB,GAAjB,CAAf;AAOA,MAAI;AAAEiC,IAAAA;AAAF,MAAWf,QAAf;AAEA,MAAIwB,MAAM,GAAGD,IAAI,KAAK,MAAT,GACb,CAAC,GAAGR,IAAI,CAACU,WAAT,EAAsBJ,MAAM,CAAC1B,GAA7B,CADa,GAEb,CAAC,GAAGoB,IAAI,CAACW,UAAT,EAAqBL,MAAM,CAAC1B,GAA5B,CAFA;;AAIA,MAAI4B,IAAI,KAAK,MAAb,EAAqB;AACnB5C,IAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,MAAAA,KAAK,EAAEwC,QADS;AAEhBtC,MAAAA,SAAS,EAAE;AACTF,QAAAA,KAAK,EAAEA;AADE,OAFK;AAKhBO,MAAAA,IAAI,EAAE;AACJ0B,QAAAA,IAAI,EAAE;AACJU,UAAAA,WAAW,EAAED;AADT;AADF;AALU,KAAlB;AAWD,GAZD,MAYO;AACL7C,IAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,MAAAA,KAAK,EAAEwC,QADS;AAEhBtC,MAAAA,SAAS,EAAE;AACTF,QAAAA,KAAK,EAAEA;AADE,OAFK;AAKhBO,MAAAA,IAAI,EAAE;AACJ0B,QAAAA,IAAI,EAAE;AACJW,UAAAA,UAAU,EAAEF;AADR;AADF;AALU,KAAlB;AAWD;AACF,CA7CD;;AA+CA,MAAMG,cAAc,GAAG,CACrBhD,MADqB,EAErBiD,QAFqB,EAGrBN,QAHqB,EAIrBxC,KAJqB,EAKrByC,IALqB,KAMlB;AACH,MAAIvB,QAAQ,GAAGrB,MAAM,CAACI,SAAP,CAAiB;AAC9BD,IAAAA,KAAK,EAAEwC,QADuB;AAE9BtC,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAEA;AADE;AAFmB,GAAjB,CAAf;AAOA,MAAI;AAAEiC,IAAAA;AAAF,MAAWf,QAAf;AAEA,MAAIwB,MAAM,GAAGD,IAAI,KAAK,MAAT,GACbR,IAAI,CAACU,WAAL,CAAiBpB,MAAjB,CAAwBwB,GAAG,IAAIA,GAAG,CAAClC,GAAJ,KAAYiC,QAAQ,CAACjC,GAApD,CADa,GAEboB,IAAI,CAACW,UAAL,CAAgBrB,MAAhB,CAAuBwB,GAAG,IAAIA,GAAG,CAAClC,GAAJ,KAAYiC,QAAQ,CAACjC,GAAnD,CAFA;;AAIA,MAAI4B,IAAI,KAAK,MAAb,EAAqB;AACnB5C,IAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,MAAAA,KAAK,EAAEwC,QADS;AAEhBtC,MAAAA,SAAS,EAAE;AACTF,QAAAA,KAAK,EAAEA;AADE,OAFK;AAKhBO,MAAAA,IAAI,EAAE;AACJ0B,QAAAA,IAAI,EAAE;AACJU,UAAAA,WAAW,EAAED;AADT;AADF;AALU,KAAlB;AAWD,GAZD,MAYO;AACL7C,IAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,MAAAA,KAAK,EAAEwC,QADS;AAEhBtC,MAAAA,SAAS,EAAE;AACTF,QAAAA,KAAK,EAAEA;AADE,OAFK;AAKhBO,MAAAA,IAAI,EAAE;AACJ0B,QAAAA,IAAI,EAAE;AACJW,UAAAA,UAAU,EAAEF;AADR;AADF;AALU,KAAlB;AAWD;AACF,CA7CD;;AA+CA,MAAMM,eAAe,GAAG;AACtBpD,EAAAA,UADsB;AAEtBY,EAAAA,UAFsB;AAGtBO,EAAAA,WAHsB;AAItBM,EAAAA,UAJsB;AAKtBI,EAAAA,QALsB;AAMtBE,EAAAA,UANsB;AAOtBI,EAAAA,SAPsB;AAQtBI,EAAAA,iBARsB;AAStBG,EAAAA,YATsB;AAUtBO,EAAAA;AAVsB,CAAxB;AAaA,eAAeG,eAAf","sourcesContent":["const postCreate = (\n  client, \n  createPost,\n  currentUser, \n  query\n) => {\n  var readQuery = client.readQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    }\n  })\n  \n  var { fetchUserFeed } = readQuery;\n  \n  var newPostArr = [{ __typename: 'createPost' }, createPost, ...fetchUserFeed]\n  \n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      fetchUserFeed: newPostArr\n    }\n  })\n}\n\nconst postUpdate = (\n  client, \n  updatePost,\n  currentUser, \n  query\n) => {\n  var readQuery = client.readQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    }\n  })\n  \n  var { fetchUserFeed } = readQuery;\n  \n  var newPostArr = [...fetchUserFeed]\n  \n  fetchUserFeed.forEach((p, i) => {\n    if (updatePost._id === p._id) {\n      newPostArr.splice(i, 1, updatePost)\n    }\n  })\n  \n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      fetchUserFeed: newPostArr\n    }\n  })\n}\n\nconst commentPost = (\n  client,\n  comment,\n  post,\n  query\n) => {\n  var readFeed = client.readQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    }\n  })\n  \n  var { fetchLikesRepostsAndComments } = readFeed;\n\n  var newPostArr = [...fetchLikesRepostsAndComments, comment]\n  \n  client.writeQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    },\n    data: {\n      fetchLikesRepostsAndComments: newPostArr\n    }\n  })\n}\n\nconst postDelete = (\n  client, \n  post, \n  deletePost,\n  currentUser, \n  query\n) => {\n  var readFeed = client.readQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    }\n  })\n\n  var { fetchUserFeed } = readFeed;\n  \n  var newPostArr = fetchUserFeed.filter(post1 => post1._id !== post._id)\n\n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      fetchUserFeed: [{ __typename: 'deletePost' }, ...newPostArr]\n    }\n  })\n}\n\nconst postLike = (\n  client, \n  likePost,\n  post, \n  query\n) => {\n  \n  var readFeed = client.readQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    }\n  })\n  \n  var { fetchLikesRepostsAndComments } = readFeed;\n  \n  var newPostArr = [...fetchLikesRepostsAndComments, likePost]\n  \n  client.writeQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    },\n    data: {\n      fetchLikesRepostsAndComments: newPostArr\n    }\n  })\n}\n\nconst postUnlike = (\n  client, \n  unlikePost,\n  post, \n  liked, \n  query\n) => {\n\n  var readFeed = client.readQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    }\n  })\n  \n  var { fetchLikesRepostsAndComments } = readFeed;\n  \n  var newPostArr = fetchLikesRepostsAndComments.filter(item => {\n      if (item._id === liked._id) {\n        return false\n      } else {\n        return true\n      }\n    }\n  )\n  \n  client.writeQuery({\n    query: query,\n    variables: {\n      postId: post._id\n    },\n    data: {\n      fetchLikesRepostsAndComments: newPostArr\n    }\n  })\n}\n\nconst filterTag = (\n  client, \n  addFilterTag,\n  currentUser, \n  query\n) => {\n  \n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      user: {\n        filteredTags: addFilterTag.filteredTags\n      }\n    }\n  })\n}\n\nconst filterPostContent = (\n  client, \n  addFilterPostContent,\n  currentUser, \n  query\n) => {\n  \n  client.writeQuery({\n    query: query,\n    variables: {\n      query: currentUser\n    },\n    data: {\n      user: {\n        filteredTags: addFilterPostContent.filteredPostContent\n      }\n    }\n  })\n}\n\nconst followUpdate = (\n  client, \n  follow,\n  gqlQuery, \n  query,\n  kind\n) => {\n  var readFeed = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query\n    }\n  })\n  \n  var { user } = readFeed;\n\n  var newArr = kind === 'User' ? \n  [...user.userFollows, follow._id] : \n  [...user.tagFollows, follow._id]\n\n  if (kind === 'User') {\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query\n      },\n      data: {\n        user: {\n          userFollows: newArr\n        }\n      }\n    })\n  } else {\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query\n      },\n      data: {\n        user: {\n          tagFollows: newArr\n        }\n      }\n    })\n  }\n}\n\nconst unfollowUpdate = (\n  client, \n  unfollow,\n  gqlQuery, \n  query,\n  kind\n) => {\n  var readFeed = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query\n    }\n  })\n  \n  var { user } = readFeed;\n\n  var newArr = kind === 'User' ? \n  user.userFollows.filter(obj => obj._id !== unfollow._id) : \n  user.tagFollows.filter(obj => obj._id !== unfollow._id)\n\n  if (kind === 'User') {\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query\n      },\n      data: {\n        user: {\n          userFollows: newArr\n        }\n      }\n    })\n  } else {\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query\n      },\n      data: {\n        user: {\n          tagFollows: newArr\n        }\n      }\n    })\n  }\n}\n\nconst UpdateCacheUtil = {\n  postCreate, \n  postUpdate,\n  commentPost,\n  postDelete,\n  postLike, \n  postUnlike,\n  filterTag,\n  filterPostContent,\n  followUpdate,\n  unfollowUpdate\n}\n\nexport default UpdateCacheUtil"]},"metadata":{},"sourceType":"module"}