{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/JOB_Developer/client/src/components/user/util/components/Password.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Cookies from 'js-cookie';\nimport Mutations from '../../../../graphql/mutations.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  UPDATE_USER_PASSWORD\n} = Mutations;\n\nconst Password = ({\n  mobile\n}) => {\n  _s();\n\n  let [active, setActive] = useState(false);\n  let [currentPW, setCurrentPW] = useState('');\n  let [newPassword, setNewPassword] = useState('');\n  let [confNewPassword, setConfNewPassword] = useState('');\n  let [errorMessage, setError] = useState(null);\n  let [alert, setAlert] = useState('');\n  let [updateUserPassword] = useMutation(UPDATE_USER_PASSWORD, {\n    onCompleted(data) {\n      resetInputs();\n      setAlert(alert = 'Password updated');\n      setTimeout(() => {\n        setAlert(alert = '');\n      }, 5000);\n      setActive(active = false);\n    },\n\n    onError(error) {\n      setError(errorMessage = error.message);\n    }\n\n  });\n\n  const resetInputs = () => {\n    setCurrentPW(currentPW = '');\n    setNewPassword(newPassword = '');\n    setConfNewPassword(confNewPassword = '');\n    setError(errorMessage = '');\n  };\n\n  const renderConfirmPW = () => {\n    if (newPassword) {\n      return /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Confirm new password\",\n        value: confNewPassword,\n        onChange: e => {\n          setConfNewPassword(confNewPassword = e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (active) {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n\n        if (newPassword === confNewPassword) {\n          updateUserPassword({\n            variables: {\n              currentPW: currentPW,\n              newPassword: newPassword,\n              user: Cookies.get('currentUser')\n            }\n          });\n        } else {\n          setError(errorMessage = \"Passwords don't match\");\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputAndBtnContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Current password\",\n          value: currentPW,\n          onChange: e => {\n            setCurrentPW(currentPW = e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"New password\",\n          value: newPassword,\n          onChange: e => {\n            setNewPassword(newPassword = e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), renderConfirmPW(), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"errMessage\",\n          children: errorMessage ? `${errorMessage}` : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel\",\n            type: \"button\",\n            onClick: () => {\n              resetInputs();\n              setActive(active = false);\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save\",\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settingContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: alert ? `${alert}` : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        disabled: true,\n        value: 'password'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"editPostBtn\",\n        src: \"https://img.icons8.com/windows/64/000000/edit--v1.png\",\n        alt: \"\",\n        onClick: () => {\n          setActive(active = true);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Password, \"GDe8iEGod/5n5ZOWRsgjVuQcYEw=\", false, function () {\n  return [useMutation];\n});\n\n_c = Password;\nexport default Password;\n\nvar _c;\n\n$RefreshReg$(_c, \"Password\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/src/components/user/util/components/Password.js"],"names":["React","useState","useMutation","Cookies","Mutations","UPDATE_USER_PASSWORD","Password","mobile","active","setActive","currentPW","setCurrentPW","newPassword","setNewPassword","confNewPassword","setConfNewPassword","errorMessage","setError","alert","setAlert","updateUserPassword","onCompleted","data","resetInputs","setTimeout","onError","error","message","renderConfirmPW","e","target","value","preventDefault","variables","user","get"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA2BD,SAAjC;;AAEA,MAAME,QAAQ,GAAG,CAAC;AAChBC,EAAAA;AADgB,CAAD,KAEX;AAAA;;AACJ,MAAI,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAAlC;AACA,MAAI,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAI,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAI,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,EAAD,CAApD;AACA,MAAI,CAACe,YAAD,EAAeC,QAAf,IAA2BhB,QAAQ,CAAC,IAAD,CAAvC;AACA,MAAI,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAhC;AAEA,MAAI,CAACmB,kBAAD,IAAuBlB,WAAW,CAACG,oBAAD,EAAuB;AAC3DgB,IAAAA,WAAW,CAACC,IAAD,EAAO;AAChBC,MAAAA,WAAW;AACXJ,MAAAA,QAAQ,CAACD,KAAK,GAAG,kBAAT,CAAR;AACAM,MAAAA,UAAU,CAAC,MAAM;AACfL,QAAAA,QAAQ,CAACD,KAAK,GAAG,EAAT,CAAR;AACD,OAFS,EAEP,IAFO,CAAV;AAGAT,MAAAA,SAAS,CAACD,MAAM,GAAG,KAAV,CAAT;AACD,KAR0D;;AAS3DiB,IAAAA,OAAO,CAACC,KAAD,EAAQ;AACbT,MAAAA,QAAQ,CAACD,YAAY,GAAGU,KAAK,CAACC,OAAtB,CAAR;AACD;;AAX0D,GAAvB,CAAtC;;AAcA,QAAMJ,WAAW,GAAG,MAAM;AACxBZ,IAAAA,YAAY,CAACD,SAAS,GAAG,EAAb,CAAZ;AACAG,IAAAA,cAAc,CAACD,WAAW,GAAG,EAAf,CAAd;AACAG,IAAAA,kBAAkB,CAACD,eAAe,GAAG,EAAnB,CAAlB;AACAG,IAAAA,QAAQ,CAACD,YAAY,GAAG,EAAhB,CAAR;AACD,GALD;;AAOA,QAAMY,eAAe,GAAG,MAAM;AAC5B,QAAIhB,WAAJ,EAAiB;AACf,0BACE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,WAAW,EAAC,sBAFd;AAGE,QAAA,KAAK,EAAEE,eAHT;AAIE,QAAA,QAAQ,EAAEe,CAAC,IAAI;AACbd,UAAAA,kBAAkB,CAACD,eAAe,GAAGe,CAAC,CAACC,MAAF,CAASC,KAA5B,CAAlB;AACD;AANH;AAAA;AAAA;AAAA;AAAA,cADF;AAUD;AACF,GAbD;;AAeA,MAAIvB,MAAJ,EAAY;AACV,wBACE;AACE,MAAA,QAAQ,EAAEqB,CAAC,IAAI;AACbA,QAAAA,CAAC,CAACG,cAAF;;AACA,YAAIpB,WAAW,KAAKE,eAApB,EAAqC;AACnCM,UAAAA,kBAAkB,CAAC;AACjBa,YAAAA,SAAS,EAAE;AACTvB,cAAAA,SAAS,EAAEA,SADF;AAETE,cAAAA,WAAW,EAAEA,WAFJ;AAGTsB,cAAAA,IAAI,EAAE/B,OAAO,CAACgC,GAAR,CAAY,aAAZ;AAHG;AADM,WAAD,CAAlB;AAOD,SARD,MAQO;AACLlB,UAAAA,QAAQ,CAACD,YAAY,GAAG,uBAAhB,CAAR;AACD;AACF,OAdH;AAAA,6BAgBE;AACE,QAAA,SAAS,EAAC,sBADZ;AAAA,gCAGE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,WAAW,EAAC,kBAFd;AAGE,UAAA,KAAK,EAAEN,SAHT;AAIE,UAAA,QAAQ,EAAEmB,CAAC,IAAI;AACblB,YAAAA,YAAY,CAACD,SAAS,GAAGmB,CAAC,CAACC,MAAF,CAASC,KAAtB,CAAZ;AACD;AANH;AAAA;AAAA;AAAA;AAAA,gBAHF,eAWE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,WAAW,EAAC,cAFd;AAGE,UAAA,KAAK,EAAEnB,WAHT;AAIE,UAAA,QAAQ,EAAEiB,CAAC,IAAI;AACbhB,YAAAA,cAAc,CAACD,WAAW,GAAGiB,CAAC,CAACC,MAAF,CAASC,KAAxB,CAAd;AACD;AANH;AAAA;AAAA;AAAA;AAAA,gBAXF,EAmBGH,eAAe,EAnBlB,eAoBE;AACE,UAAA,SAAS,EAAC,YADZ;AAAA,oBAEEZ,YAAY,GAAI,GAAEA,YAAa,EAAnB,GAAuB;AAFrC;AAAA;AAAA;AAAA;AAAA,gBApBF,eAuBE;AAAA,kCACE;AACE,YAAA,SAAS,EAAC,QADZ;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,OAAO,EAAE,MAAM;AACbO,cAAAA,WAAW;AACXd,cAAAA,SAAS,CAACD,MAAM,GAAG,KAAV,CAAT;AACD,aANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eASE;AACE,YAAA,SAAS,EAAC,MADZ;AAEE,YAAA,IAAI,EAAC,QAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBF;AAAA;AAAA;AAAA;AAAA,YADF;AA2DD,GA5DD,MA4DO;AACL,wBACE;AACE,MAAA,SAAS,EAAC,kBADZ;AAAA,8BAGE;AAAA,kBAAIU,KAAK,GAAI,GAAEA,KAAM,EAAZ,GAAgB;AAAzB;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,QAAQ,MAFZ;AAGI,QAAA,KAAK,EAAE;AAHX;AAAA;AAAA;AAAA;AAAA,cAJF,eASE;AACE,QAAA,SAAS,EAAC,aADZ;AAEE,QAAA,GAAG,EAAC,uDAFN;AAGE,QAAA,GAAG,EAAC,EAHN;AAIE,QAAA,OAAO,EAAE,MAAM;AACbT,UAAAA,SAAS,CAACD,MAAM,GAAG,IAAV,CAAT;AACD;AANH;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;AACF,CAhID;;GAAMF,Q;UAUuBJ,W;;;KAVvBI,Q;AAkIN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Cookies from 'js-cookie';\n\nimport Mutations from '../../../../graphql/mutations.js';\nconst { UPDATE_USER_PASSWORD } = Mutations;\n\nconst Password = ({\n  mobile\n}) => {\n  let [active, setActive] = useState(false);\n  let [currentPW, setCurrentPW] = useState('');\n  let [newPassword, setNewPassword] = useState('');\n  let [confNewPassword, setConfNewPassword] = useState('');\n  let [errorMessage, setError] = useState(null)\n  let [alert, setAlert] = useState('')\n\n  let [updateUserPassword] = useMutation(UPDATE_USER_PASSWORD, {\n    onCompleted(data) {\n      resetInputs()\n      setAlert(alert = 'Password updated')\n      setTimeout(() => {\n        setAlert(alert = '')\n      }, 5000)\n      setActive(active = false)\n    },\n    onError(error) {\n      setError(errorMessage = error.message)\n    }\n  })\n\n  const resetInputs = () => {\n    setCurrentPW(currentPW = '')\n    setNewPassword(newPassword = '')\n    setConfNewPassword(confNewPassword = '')\n    setError(errorMessage = '')\n  }\n\n  const renderConfirmPW = () => {\n    if (newPassword) {\n      return (\n        <input\n          type='password'\n          placeholder='Confirm new password'\n          value={confNewPassword}\n          onChange={e => {\n            setConfNewPassword(confNewPassword = e.target.value)\n          }}\n        />\n      )\n    }\n  }\n\n  if (active) {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          if (newPassword === confNewPassword) {\n            updateUserPassword({\n              variables: {\n                currentPW: currentPW,\n                newPassword: newPassword,\n                user: Cookies.get('currentUser')\n              }\n            })\n          } else {\n            setError(errorMessage = \"Passwords don't match\")\n          }\n        }}\n      >\n        <div\n          className='inputAndBtnContainer'\n        >\n          <input\n            type='password'\n            placeholder='Current password'\n            value={currentPW}\n            onChange={e => {\n              setCurrentPW(currentPW = e.target.value)\n            }}\n          />\n          <input\n            type='password'\n            placeholder='New password'\n            value={newPassword}\n            onChange={e => {\n              setNewPassword(newPassword = e.target.value)\n            }}\n          />\n          {renderConfirmPW()}\n          <p\n            className='errMessage'\n          >{errorMessage ? `${errorMessage}` : ''}</p>\n          <div>\n            <button\n              className='cancel'\n              type='button'\n              onClick={() => {\n                resetInputs()\n                setActive(active = false)\n              }}\n            >Cancel</button>\n            <button\n              className='save'\n              type='submit'\n            >\n              Save\n            </button>\n          </div>\n        </div>\n      </form>\n    )\n  } else {\n    return (\n      <div\n        className='settingContainer'\n      >\n        <p>{alert ? `${alert}` : ''}</p>\n        <input\n            type='password'\n            disabled\n            value={'password'}\n          />\n        <img\n          className='editPostBtn'\n          src=\"https://img.icons8.com/windows/64/000000/edit--v1.png\"\n          alt=''\n          onClick={() => {\n            setActive(active = true)\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Password;"]},"metadata":{},"sourceType":"module"}