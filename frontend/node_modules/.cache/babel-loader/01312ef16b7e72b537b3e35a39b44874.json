{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamReader = void 0;\n\nconst Token = require(\"token-types\");\n\nconst Util_1 = require(\"../../common/Util\");\n\nconst initDebug = require(\"debug\");\n\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\nconst PacketKey = new Token.StringType(2, 'binary');\n/**\r\n * Stream Header Packet part 1\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\n\nconst SH_part1 = {\n  len: 5,\n  get: (buf, off) => {\n    return {\n      crc: Token.UINT32_LE.get(buf, off),\n      streamVersion: Token.UINT8.get(buf, off + 4)\n    };\n  }\n};\n/**\r\n * Stream Header Packet part 3\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\n\nconst SH_part3 = {\n  len: 2,\n  get: (buf, off) => {\n    return {\n      sampleFrequency: [44100, 48000, 37800, 32000][Util_1.default.getBitAllignedNumber(buf, off, 0, 3)],\n      maxUsedBands: Util_1.default.getBitAllignedNumber(buf, off, 3, 5),\n      channelCount: Util_1.default.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\n      msUsed: Util_1.default.isBitSet(buf, off + 1, 4),\n      audioBlockFrames: Util_1.default.getBitAllignedNumber(buf, off + 1, 5, 3)\n    };\n  }\n};\n\nclass StreamReader {\n  constructor(tokenizer) {\n    this.tokenizer = tokenizer;\n  }\n\n  async readPacketHeader() {\n    const key = await this.tokenizer.readToken(PacketKey);\n    const size = await this.readVariableSizeField();\n    return {\n      key,\n      payloadLength: size.value - 2 - size.len\n    };\n  }\n\n  async readStreamHeader(size) {\n    const streamHeader = {};\n    debug(`Reading SH at offset=${this.tokenizer.position}`);\n    const part1 = await this.tokenizer.readToken(SH_part1);\n    size -= SH_part1.len;\n    Object.assign(streamHeader, part1);\n    debug(`SH.streamVersion = ${part1.streamVersion}`);\n    const sampleCount = await this.readVariableSizeField();\n    size -= sampleCount.len;\n    streamHeader.sampleCount = sampleCount.value;\n    const bs = await this.readVariableSizeField();\n    size -= bs.len;\n    streamHeader.beginningOfSilence = bs.value;\n    const part3 = await this.tokenizer.readToken(SH_part3);\n    size -= SH_part3.len;\n    Object.assign(streamHeader, part3); // assert.equal(size, 0);\n\n    await this.tokenizer.ignore(size);\n    return streamHeader;\n  }\n\n  async readVariableSizeField(len = 1, hb = 0) {\n    let n = await this.tokenizer.readNumber(Token.UINT8);\n\n    if ((n & 0x80) === 0) {\n      return {\n        len,\n        value: hb + n\n      };\n    }\n\n    n &= 0x7F;\n    n += hb;\n    return this.readVariableSizeField(len + 1, n << 7);\n  }\n\n}\n\nexports.StreamReader = StreamReader;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js"],"names":["Object","defineProperty","exports","value","StreamReader","Token","require","Util_1","initDebug","debug","PacketKey","StringType","SH_part1","len","get","buf","off","crc","UINT32_LE","streamVersion","UINT8","SH_part3","sampleFrequency","default","getBitAllignedNumber","maxUsedBands","channelCount","msUsed","isBitSet","audioBlockFrames","constructor","tokenizer","readPacketHeader","key","readToken","size","readVariableSizeField","payloadLength","readStreamHeader","streamHeader","position","part1","assign","sampleCount","bs","beginningOfSilence","part3","ignore","hb","n","readNumber"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StreamReader = void 0;\r\nconst Token = require(\"token-types\");\r\nconst Util_1 = require(\"../../common/Util\");\r\nconst initDebug = require(\"debug\");\r\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\r\nconst PacketKey = new Token.StringType(2, 'binary');\r\n/**\r\n * Stream Header Packet part 1\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\r\nconst SH_part1 = {\r\n    len: 5,\r\n    get: (buf, off) => {\r\n        return {\r\n            crc: Token.UINT32_LE.get(buf, off),\r\n            streamVersion: Token.UINT8.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Stream Header Packet part 3\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\r\nconst SH_part3 = {\r\n    len: 2,\r\n    get: (buf, off) => {\r\n        return {\r\n            sampleFrequency: [44100, 48000, 37800, 32000][Util_1.default.getBitAllignedNumber(buf, off, 0, 3)],\r\n            maxUsedBands: Util_1.default.getBitAllignedNumber(buf, off, 3, 5),\r\n            channelCount: Util_1.default.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\r\n            msUsed: Util_1.default.isBitSet(buf, off + 1, 4),\r\n            audioBlockFrames: Util_1.default.getBitAllignedNumber(buf, off + 1, 5, 3)\r\n        };\r\n    }\r\n};\r\nclass StreamReader {\r\n    constructor(tokenizer) {\r\n        this.tokenizer = tokenizer;\r\n    }\r\n    async readPacketHeader() {\r\n        const key = await this.tokenizer.readToken(PacketKey);\r\n        const size = await this.readVariableSizeField();\r\n        return {\r\n            key,\r\n            payloadLength: size.value - 2 - size.len\r\n        };\r\n    }\r\n    async readStreamHeader(size) {\r\n        const streamHeader = {};\r\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\r\n        const part1 = await this.tokenizer.readToken(SH_part1);\r\n        size -= SH_part1.len;\r\n        Object.assign(streamHeader, part1);\r\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\r\n        const sampleCount = await this.readVariableSizeField();\r\n        size -= sampleCount.len;\r\n        streamHeader.sampleCount = sampleCount.value;\r\n        const bs = await this.readVariableSizeField();\r\n        size -= bs.len;\r\n        streamHeader.beginningOfSilence = bs.value;\r\n        const part3 = await this.tokenizer.readToken(SH_part3);\r\n        size -= SH_part3.len;\r\n        Object.assign(streamHeader, part3);\r\n        // assert.equal(size, 0);\r\n        await this.tokenizer.ignore(size);\r\n        return streamHeader;\r\n    }\r\n    async readVariableSizeField(len = 1, hb = 0) {\r\n        let n = await this.tokenizer.readNumber(Token.UINT8);\r\n        if ((n & 0x80) === 0) {\r\n            return { len, value: hb + n };\r\n        }\r\n        n &= 0x7F;\r\n        n += hb;\r\n        return this.readVariableSizeField(len + 1, n << 7);\r\n    }\r\n}\r\nexports.StreamReader = StreamReader;\r\n"]},"metadata":{},"sourceType":"script"}