{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MpcSv7Parser = void 0;\n\nconst initDebug = require(\"debug\");\n\nconst BasicParser_1 = require(\"../../common/BasicParser\");\n\nconst SV7 = require(\"./StreamVersion7\");\n\nconst APEv2Parser_1 = require(\"../../apev2/APEv2Parser\");\n\nconst BitReader_1 = require(\"./BitReader\");\n\nconst debug = initDebug('music-metadata:parser:musepack');\n\nclass MpcSv7Parser extends BasicParser_1.BasicParser {\n  constructor() {\n    super(...arguments);\n    this.audioLength = 0;\n  }\n\n  async parse() {\n    const header = await this.tokenizer.readToken(SV7.Header);\n    if (header.signature !== 'MP+') throw new Error('Unexpected magic number');\n    debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n    this.metadata.setFormat('container', 'Musepack, SV7');\n    this.metadata.setFormat('sampleRate', header.sampleFrequency);\n    const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n    this.metadata.setFormat('numberOfSamples', numberOfSamples);\n    this.duration = numberOfSamples / header.sampleFrequency;\n    this.metadata.setFormat('duration', this.duration);\n    this.bitreader = new BitReader_1.BitReader(this.tokenizer);\n    this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n    const version = await this.bitreader.read(8);\n    this.metadata.setFormat('codec', (version / 100).toFixed(2));\n    await this.skipAudioData(header.frameCount);\n    debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n    return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n  }\n\n  async skipAudioData(frameCount) {\n    while (frameCount-- > 0) {\n      const frameLength = await this.bitreader.read(20);\n      this.audioLength += 20 + frameLength;\n      await this.bitreader.ignore(frameLength);\n    } // last frame\n\n\n    const lastFrameLength = await this.bitreader.read(11);\n    this.audioLength += lastFrameLength;\n    this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n  }\n\n}\n\nexports.MpcSv7Parser = MpcSv7Parser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js"],"names":["Object","defineProperty","exports","value","MpcSv7Parser","initDebug","require","BasicParser_1","SV7","APEv2Parser_1","BitReader_1","debug","BasicParser","constructor","arguments","audioLength","parse","header","tokenizer","readToken","Header","signature","Error","streamMajorVersion","streamMinorVersion","metadata","setFormat","sampleFrequency","numberOfSamples","frameCount","lastFrameLength","duration","bitreader","BitReader","midSideStereo","intensityStereo","version","read","toFixed","skipAudioData","position","APEv2Parser","tryParseApeHeader","options","frameLength","ignore"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,OAAD,CAAzB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,0BAAD,CAA7B;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,kBAAD,CAAnB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,yBAAD,CAA7B;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMK,KAAK,GAAGN,SAAS,CAAC,gCAAD,CAAvB;;AACA,MAAMD,YAAN,SAA2BG,aAAa,CAACK,WAAzC,CAAqD;AACjDC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACH;;AACU,QAALC,KAAK,GAAG;AACV,UAAMC,MAAM,GAAG,MAAM,KAAKC,SAAL,CAAeC,SAAf,CAAyBX,GAAG,CAACY,MAA7B,CAArB;AACA,QAAIH,MAAM,CAACI,SAAP,KAAqB,KAAzB,EACI,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACJX,IAAAA,KAAK,CAAE,kBAAiBM,MAAM,CAACM,kBAAmB,IAAGN,MAAM,CAACO,kBAAmB,EAA1E,CAAL;AACA,SAAKC,QAAL,CAAcC,SAAd,CAAwB,WAAxB,EAAqC,eAArC;AACA,SAAKD,QAAL,CAAcC,SAAd,CAAwB,YAAxB,EAAsCT,MAAM,CAACU,eAA7C;AACA,UAAMC,eAAe,GAAG,QAAQX,MAAM,CAACY,UAAP,GAAoB,CAA5B,IAAiCZ,MAAM,CAACa,eAAhE;AACA,SAAKL,QAAL,CAAcC,SAAd,CAAwB,iBAAxB,EAA2CE,eAA3C;AACA,SAAKG,QAAL,GAAgBH,eAAe,GAAGX,MAAM,CAACU,eAAzC;AACA,SAAKF,QAAL,CAAcC,SAAd,CAAwB,UAAxB,EAAoC,KAAKK,QAAzC;AACA,SAAKC,SAAL,GAAiB,IAAItB,WAAW,CAACuB,SAAhB,CAA0B,KAAKf,SAA/B,CAAjB;AACA,SAAKO,QAAL,CAAcC,SAAd,CAAwB,kBAAxB,EAA4CT,MAAM,CAACiB,aAAP,IAAwBjB,MAAM,CAACkB,eAA/B,GAAiD,CAAjD,GAAqD,CAAjG;AACA,UAAMC,OAAO,GAAG,MAAM,KAAKJ,SAAL,CAAeK,IAAf,CAAoB,CAApB,CAAtB;AACA,SAAKZ,QAAL,CAAcC,SAAd,CAAwB,OAAxB,EAAiC,CAACU,OAAO,GAAG,GAAX,EAAgBE,OAAhB,CAAwB,CAAxB,CAAjC;AACA,UAAM,KAAKC,aAAL,CAAmBtB,MAAM,CAACY,UAA1B,CAAN;AACAlB,IAAAA,KAAK,CAAE,mDAAkD,KAAKO,SAAL,CAAesB,QAAS,EAA5E,CAAL;AACA,WAAO/B,aAAa,CAACgC,WAAd,CAA0BC,iBAA1B,CAA4C,KAAKjB,QAAjD,EAA2D,KAAKP,SAAhE,EAA2E,KAAKyB,OAAhF,CAAP;AACH;;AACkB,QAAbJ,aAAa,CAACV,UAAD,EAAa;AAC5B,WAAOA,UAAU,KAAK,CAAtB,EAAyB;AACrB,YAAMe,WAAW,GAAG,MAAM,KAAKZ,SAAL,CAAeK,IAAf,CAAoB,EAApB,CAA1B;AACA,WAAKtB,WAAL,IAAoB,KAAK6B,WAAzB;AACA,YAAM,KAAKZ,SAAL,CAAea,MAAf,CAAsBD,WAAtB,CAAN;AACH,KAL2B,CAM5B;;;AACA,UAAMd,eAAe,GAAG,MAAM,KAAKE,SAAL,CAAeK,IAAf,CAAoB,EAApB,CAA9B;AACA,SAAKtB,WAAL,IAAoBe,eAApB;AACA,SAAKL,QAAL,CAAcC,SAAd,CAAwB,SAAxB,EAAmC,KAAKX,WAAL,GAAmB,KAAKgB,QAA3D;AACH;;AAlCgD;;AAoCrD7B,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MpcSv7Parser = void 0;\r\nconst initDebug = require(\"debug\");\r\nconst BasicParser_1 = require(\"../../common/BasicParser\");\r\nconst SV7 = require(\"./StreamVersion7\");\r\nconst APEv2Parser_1 = require(\"../../apev2/APEv2Parser\");\r\nconst BitReader_1 = require(\"./BitReader\");\r\nconst debug = initDebug('music-metadata:parser:musepack');\r\nclass MpcSv7Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.audioLength = 0;\r\n    }\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(SV7.Header);\r\n        if (header.signature !== 'MP+')\r\n            throw new Error('Unexpected magic number');\r\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\r\n        this.metadata.setFormat('container', 'Musepack, SV7');\r\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\r\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\r\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\r\n        this.duration = numberOfSamples / header.sampleFrequency;\r\n        this.metadata.setFormat('duration', this.duration);\r\n        this.bitreader = new BitReader_1.BitReader(this.tokenizer);\r\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\r\n        const version = await this.bitreader.read(8);\r\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\r\n        await this.skipAudioData(header.frameCount);\r\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\r\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\r\n    }\r\n    async skipAudioData(frameCount) {\r\n        while (frameCount-- > 0) {\r\n            const frameLength = await this.bitreader.read(20);\r\n            this.audioLength += 20 + frameLength;\r\n            await this.bitreader.ignore(frameLength);\r\n        }\r\n        // last frame\r\n        const lastFrameLength = await this.bitreader.read(11);\r\n        this.audioLength += lastFrameLength;\r\n        this.metadata.setFormat('bitrate', this.audioLength / this.duration);\r\n    }\r\n}\r\nexports.MpcSv7Parser = MpcSv7Parser;\r\n"]},"metadata":{},"sourceType":"script"}