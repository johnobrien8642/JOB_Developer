{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/auth/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useHistory, Link } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport PhotoPostOrRegisterPhotoInput from '../posts/util/components/forms/inputTypes/Photo_Post_Or_Register_Photo_Input';\nimport Queries from '../../graphql/queries';\nimport Mutations from '../../graphql/mutations';\nimport PostFormUtil from '../posts/util/functions/post_form_util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  REGISTER_USER\n} = Mutations;\nconst {\n  IS_LOGGED_IN\n} = Queries;\nconst {\n  mainPost,\n  handleFormData\n} = PostFormUtil;\n\nconst Register = () => {\n  _s();\n\n  let previewProfilePicRef = useRef({});\n  let [profileImageFile, setProfileImageFile] = useState([]);\n  let [email, setEmail] = useState('');\n  let [blogName, setBlogName] = useState('');\n  let [blogDescription, setBlogDescription] = useState('');\n  let [password, setPassword] = useState('');\n  let [errorMessages, addErrorMessage] = useState([]);\n  let history = useHistory();\n  const [registerUser] = useMutation(REGISTER_USER, {\n    onError(error) {\n      if (error.message === 'Account already exists with that email') {\n        history.push({\n          pathname: '/login',\n          state: {\n            errMessage: error.message\n          }\n        });\n      } else {\n        error.graphQLErrors.forEach((error, i) => {\n          addErrorMessage(errorMessages.concat(error.message));\n        });\n      }\n    },\n\n    onCompleted({\n      registerUser\n    }) {\n      const {\n        token,\n        blogName\n      } = registerUser;\n      Cookies.set('auth-token', token);\n      Cookies.set('currentUser', blogName);\n      resetInputs();\n      window.location.reload();\n    },\n\n    update(client, {\n      data\n    }) {\n      client.writeQuery({\n        query: IS_LOGGED_IN,\n        data: {\n          isLoggedIn: data.registerUser.loggedIn\n        }\n      });\n    }\n\n  });\n\n  const resetInputs = () => {\n    setEmail(email = '');\n    setBlogName(blogName = '');\n    setPassword(password = '');\n    addErrorMessage(errorMessages = []);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    var mainImageFormData = handleFormData(profileImageFile);\n    Promise.all([mainPost(mainImageFormData)]).then(([mainUpload]) => {\n      var instanceData = {\n        profilePicId: mainUpload[0] ? mainUpload[0]._id : null,\n        email: email,\n        blogName: blogName,\n        password: password,\n        blogDescription: blogDescription\n      };\n      registerUser({\n        variables: {\n          instanceData: instanceData\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"registerForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"greetingHeader\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Rumblr\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        handleSubmit(e);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: errorMessages.map((error, i) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: error\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PhotoPostOrRegisterPhotoInput, {\n        register: true,\n        previewProfilePicRef: previewProfilePicRef,\n        profileImageFile: profileImageFile,\n        setProfileImageFile: setProfileImageFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: email,\n        placeholder: 'Email',\n        onChange: e => setEmail(email = e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: blogName,\n        placeholder: 'Blog Name',\n        onChange: e => setBlogName(blogName = e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: blogDescription,\n        placeholder: 'Blog description',\n        onChange: e => {\n          if (blogDescription.length < 150) {\n            setBlogDescription(blogDescription = e.target.value);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [150 - blogDescription.length, \" characters left\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        placeholder: 'Password',\n        onChange: e => setPassword(password = e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Sign up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/login\",\n        children: \"Already have an account? Log in!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"y1evRCphw5obiPUffisjqKxud5E=\", false, function () {\n  return [useHistory, useMutation];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/auth/Register.js"],"names":["React","useState","useRef","useMutation","useHistory","Link","Cookies","PhotoPostOrRegisterPhotoInput","Queries","Mutations","PostFormUtil","REGISTER_USER","IS_LOGGED_IN","mainPost","handleFormData","Register","previewProfilePicRef","profileImageFile","setProfileImageFile","email","setEmail","blogName","setBlogName","blogDescription","setBlogDescription","password","setPassword","errorMessages","addErrorMessage","history","registerUser","onError","error","message","push","pathname","state","errMessage","graphQLErrors","forEach","i","concat","onCompleted","token","set","resetInputs","window","location","reload","update","client","data","writeQuery","query","isLoggedIn","loggedIn","handleSubmit","e","preventDefault","mainImageFormData","Promise","all","then","mainUpload","instanceData","profilePicId","_id","variables","map","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useHistory, Link } from 'react-router-dom';\nimport Cookies from 'js-cookie';\n\nimport PhotoPostOrRegisterPhotoInput from '../posts/util/components/forms/inputTypes/Photo_Post_Or_Register_Photo_Input';\n\nimport Queries from '../../graphql/queries';\nimport Mutations from '../../graphql/mutations';\nimport PostFormUtil from '../posts/util/functions/post_form_util.js';\nconst { REGISTER_USER } = Mutations;\nconst { IS_LOGGED_IN } = Queries;\nconst { mainPost, \n        handleFormData } = PostFormUtil;\n\n\nconst Register = () => {\n  let previewProfilePicRef = useRef({});\n  let [profileImageFile, setProfileImageFile] = useState([]);\n  let [email, setEmail] = useState('');\n  let [blogName, setBlogName] = useState('');\n  let [blogDescription, setBlogDescription] = useState('');\n  let [password, setPassword] = useState('');\n  let [errorMessages, addErrorMessage] = useState([]);\n  let history = useHistory();\n\n  const [ registerUser ] = useMutation(REGISTER_USER, {\n    onError(error) {\n      if(error.message === 'Account already exists with that email') {\n        history.push({\n          pathname: '/login',\n          state: {\n            errMessage: error.message\n          }\n        })\n      } else { \n        error.graphQLErrors.forEach((error, i) => {\n          addErrorMessage(errorMessages.concat(error.message))\n        })\n      }\n    },\n    onCompleted({ registerUser }) {\n      const { token, blogName } = registerUser;\n      Cookies.set('auth-token', token)\n      Cookies.set('currentUser', blogName)\n      resetInputs();\n      window.location.reload();\n    },\n    update(client, { data }) {\n      client.writeQuery({\n        query: IS_LOGGED_IN,\n        data: {\n          isLoggedIn: data.registerUser.loggedIn,\n        }\n      })\n    }\n  })\n\n  const resetInputs = () => {\n    setEmail(email = '');\n    setBlogName(blogName = '');\n    setPassword(password = '');\n    addErrorMessage(errorMessages = []);\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    var mainImageFormData = handleFormData(profileImageFile)\n\n    Promise.all([\n      mainPost(mainImageFormData)\n    ])\n    .then(([mainUpload]) => {\n      \n      var instanceData = {\n        profilePicId: mainUpload[0] ? mainUpload[0]._id : null,\n        email: email, \n        blogName: blogName,\n        password: password,\n        blogDescription: blogDescription\n      }\n\n      registerUser({ \n        variables: {\n          instanceData: instanceData\n        }\n      })\n    })\n  }\n\n  return (\n    <div\n      className='registerForm'\n    >\n      <div\n        className='greetingHeader'\n      >\n        <h1>Rumblr</h1>\n      </div>\n\n        <form\n          onSubmit={e => {\n            handleSubmit(e)\n          }}\n        >\n\n        <ul>\n          {errorMessages.map((error, i) => {\n            return <li key={i}>{error}</li>\n          })}\n        </ul>\n\n        <PhotoPostOrRegisterPhotoInput \n          register={true}\n          previewProfilePicRef={previewProfilePicRef}\n          profileImageFile={profileImageFile}\n          setProfileImageFile={setProfileImageFile}\n        />\n\n        <input\n          type='text'\n          value={email}\n          placeholder={'Email'}\n          onChange={e => setEmail(email = e.target.value)}\n        />\n        <input\n          type='text'\n          value={blogName}\n          placeholder={'Blog Name'}\n          onChange={e => setBlogName(blogName = e.target.value)}\n        />\n        <textarea\n          value={blogDescription}\n          placeholder={'Blog description'}\n          onChange={e => {\n            if (blogDescription.length < 150) {\n              setBlogDescription(blogDescription = e.target.value)\n            } \n          }}\n        ></textarea>\n        <span>{150 - blogDescription.length} characters left</span>\n        \n\n        <input\n          type='password'\n          value={password}\n          placeholder={'Password'}\n          onChange={e => setPassword(password = e.target.value)}\n        />\n\n        <button \n          type='submit'\n        >\n          Sign up\n        </button>\n\n        <Link\n          to='/login'\n        >\n          Already have an account? Log in!\n        </Link>\n      </form>\n    </div>\n  )\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}