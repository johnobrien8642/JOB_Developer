{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/nav/Content.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { useQuery, useApolloClient } from '@apollo/client';\nimport Cookies from 'js-cookie';\nimport FeedUtil from '../posts/util/functions/feed_util.js';\nimport ActivityUtil from '../nav/util/activity_util.js';\nimport Queries from '../../graphql/queries.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  FETCH_ALL_ACTIVITY\n} = Queries;\nconst {\n  handleActivity,\n  handleTimeAgo\n} = ActivityUtil;\nconst {\n  infiniteScroll,\n  updateCacheInfScrollActivity,\n  handleData\n} = FeedUtil;\n\nconst Content = ({\n  tab,\n  active,\n  setActive,\n  navActive,\n  setNavActive,\n  timeAgoRef\n}) => {\n  _s();\n\n  let feedArr = useRef([]);\n  let fetchMoreDiv = useRef(null);\n  let cursorId = useRef(null);\n  let fetchMoreDivId = useRef('#fetchMoreActivity');\n  let gqlQuery = useRef(FETCH_ALL_ACTIVITY);\n  let query = useRef(Cookies.get('currentUser'));\n  let endOfPosts = useRef(false);\n  const client = useApolloClient();\n  useEffect(() => {\n    timeAgoRef.current = [];\n    document.querySelector('.activity').focus();\n    var scroll = infiniteScroll(client, updateCacheInfScrollActivity, query, gqlQuery, cursorId, fetchMoreDiv, fetchMoreDivId);\n    return () => {\n      document.removeEventListener('scroll', scroll);\n      refetch();\n    }; //eslint-disable-next-line\n  }, [tab, active]);\n  let {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(gqlQuery.current, {\n    variables: {\n      query: Cookies.get('currentUser'),\n      cursorId: null\n    },\n    fetchPolicy: 'no-cache'\n  });\n  if (loading) return 'Loading Content...';\n  if (error) return `Error: ${error}`;\n  handleData(data, feedArr, cursorId, endOfPosts);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [feedArr.current.map((activity, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          setNavActive(navActive = false);\n        },\n        children: [handleTimeAgo(activity, timeAgoRef, tab), handleActivity(activity, tab, true, navActive, setNavActive)]\n      }, activity._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"fetchMoreActivity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Content, \"hSeFVVS5XyvsKM1VFUkRgdrQTPs=\", false, function () {\n  return [useApolloClient, useQuery];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/nav/Content.js"],"names":["React","useRef","useEffect","useQuery","useApolloClient","Cookies","FeedUtil","ActivityUtil","Queries","FETCH_ALL_ACTIVITY","handleActivity","handleTimeAgo","infiniteScroll","updateCacheInfScrollActivity","handleData","Content","tab","active","setActive","navActive","setNavActive","timeAgoRef","feedArr","fetchMoreDiv","cursorId","fetchMoreDivId","gqlQuery","query","get","endOfPosts","client","current","document","querySelector","focus","scroll","removeEventListener","refetch","loading","error","data","variables","fetchPolicy","map","activity","i","_id"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useQuery, useApolloClient } from '@apollo/client';\nimport Cookies from 'js-cookie';\n\nimport FeedUtil from '../posts/util/functions/feed_util.js';\nimport ActivityUtil from '../nav/util/activity_util.js';\nimport Queries from '../../graphql/queries.js';\nconst { FETCH_ALL_ACTIVITY } = Queries;\nconst { handleActivity, handleTimeAgo } = ActivityUtil;\nconst { infiniteScroll, \n        updateCacheInfScrollActivity, \n        handleData } = FeedUtil;\n\nconst Content = ({\n  tab, \n  active, \n  setActive,\n  navActive, \n  setNavActive,\n  timeAgoRef\n}) => {\n  let feedArr = useRef([]);\n  let fetchMoreDiv = useRef(null);\n  let cursorId = useRef(null);\n  let fetchMoreDivId = useRef('#fetchMoreActivity');\n  let gqlQuery = useRef(FETCH_ALL_ACTIVITY)\n  let query = useRef(Cookies.get('currentUser'));\n  let endOfPosts = useRef(false);\n  const client = useApolloClient();\n\n  useEffect(() => {\n    timeAgoRef.current = []\n\n    document.querySelector('.activity').focus()\n    \n    var scroll = infiniteScroll(\n      client, updateCacheInfScrollActivity,\n      query, gqlQuery,\n      cursorId, fetchMoreDiv,\n      fetchMoreDivId\n    )\n\n    return () => {\n      document.removeEventListener('scroll', scroll)\n      refetch()\n    }\n    //eslint-disable-next-line\n  }, [tab, active])\n  \n  let { loading, error, data, refetch } = useQuery(gqlQuery.current, {\n    variables: {\n      query: Cookies.get('currentUser'),\n      cursorId: null\n    },\n    fetchPolicy: 'no-cache'\n  })\n\n  if (loading) return 'Loading Content...';\n  if (error) return `Error: ${error}`;\n  \n  handleData(data, feedArr, cursorId, endOfPosts)\n\n  return(\n    <div\n      className='content'\n    >\n      {feedArr.current.map((activity, i) => {\n        return (\n          <div\n            key={activity._id}\n            onClick={() => {\n              setNavActive(navActive = false)\n            }}\n          >\n            {handleTimeAgo(activity, timeAgoRef, tab)}\n            {handleActivity(activity, tab, true, navActive, setNavActive)}\n          </div>\n        )\n      })}\n\n      <div\n        id='fetchMoreActivity'\n      >\n      </div>\n    </div>\n  )\n}\n\nexport default Content;"]},"metadata":{},"sourceType":"module"}