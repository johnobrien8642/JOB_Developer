{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractID3Parser = void 0;\n\nvar core_1 = require(\"strtok3/lib/core\");\n\nvar ID3v2Token_1 = require(\"./ID3v2Token\");\n\nvar ID3v2Parser_1 = require(\"./ID3v2Parser\");\n\nvar ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\n\nvar _debug = require(\"debug\");\n\nvar BasicParser_1 = require(\"../common/BasicParser\");\n\nvar debug = _debug('music-metadata:parser:ID3');\n/**\r\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\r\n */\n\n\nvar AbstractID3Parser = /*#__PURE__*/function (_BasicParser_1$BasicP) {\n  _inherits(AbstractID3Parser, _BasicParser_1$BasicP);\n\n  var _super = _createSuper(AbstractID3Parser);\n\n  function AbstractID3Parser() {\n    var _this;\n\n    _classCallCheck(this, AbstractID3Parser);\n\n    _this = _super.apply(this, arguments);\n    _this.id3parser = new ID3v2Parser_1.ID3v2Parser();\n    return _this;\n  }\n\n  _createClass(AbstractID3Parser, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.parseID3v2();\n\n              case 3:\n                _context.next = 12;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (!(_context.t0 instanceof core_1.EndOfStreamError)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                debug(\"End-of-stream\");\n                _context.next = 12;\n                break;\n\n              case 11:\n                throw _context.t0;\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n\n      function parse() {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      return;\n    }\n  }, {\n    key: \"parseID3v2\",\n    value: function () {\n      var _parseID3v = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var id3v1parser;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.tryReadId3v2Headers();\n\n              case 2:\n                debug(\"End of ID3v2 header, go to MPEG-parser: pos=%s\", this.tokenizer.position);\n                _context2.next = 5;\n                return this._parse();\n\n              case 5:\n                if (!(this.options.skipPostHeaders && this.metadata.hasAny())) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                this.finalize();\n                _context2.next = 13;\n                break;\n\n              case 9:\n                id3v1parser = new ID3v1Parser_1.ID3v1Parser();\n                _context2.next = 12;\n                return id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();\n\n              case 12:\n                this.finalize();\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function parseID3v2() {\n        return _parseID3v.apply(this, arguments);\n      }\n\n      return parseID3v2;\n    }()\n  }, {\n    key: \"tryReadId3v2Headers\",\n    value: function () {\n      var _tryReadId3v2Headers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var id3Header;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\n\n              case 2:\n                id3Header = _context3.sent;\n\n                if (!(id3Header.fileIdentifier === \"ID3\")) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                debug(\"Found ID3v2 header, pos=%s\", this.tokenizer.position);\n                _context3.next = 7;\n                return this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n\n              case 7:\n                return _context3.abrupt(\"return\", this.tryReadId3v2Headers());\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function tryReadId3v2Headers() {\n        return _tryReadId3v2Headers.apply(this, arguments);\n      }\n\n      return tryReadId3v2Headers;\n    }()\n  }], [{\n    key: \"startsWithID3v2Header\",\n    value: function () {\n      var _startsWithID3v2Header = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokenizer) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\n\n              case 2:\n                _context4.t0 = _context4.sent.fileIdentifier;\n                return _context4.abrupt(\"return\", _context4.t0 === 'ID3');\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function startsWithID3v2Header(_x) {\n        return _startsWithID3v2Header.apply(this, arguments);\n      }\n\n      return startsWithID3v2Header;\n    }()\n  }]);\n\n  return AbstractID3Parser;\n}(BasicParser_1.BasicParser);\n\nexports.AbstractID3Parser = AbstractID3Parser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"names":["Object","defineProperty","exports","value","AbstractID3Parser","core_1","require","ID3v2Token_1","ID3v2Parser_1","ID3v1Parser_1","_debug","BasicParser_1","debug","arguments","id3parser","ID3v2Parser","parseID3v2","EndOfStreamError","tryReadId3v2Headers","tokenizer","position","_parse","options","skipPostHeaders","metadata","hasAny","finalize","id3v1parser","ID3v1Parser","init","parse","peekToken","ID3v2Header","id3Header","fileIdentifier","BasicParser"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AbstractID3Parser = void 0;\r\nconst core_1 = require(\"strtok3/lib/core\");\r\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\r\nconst ID3v2Parser_1 = require(\"./ID3v2Parser\");\r\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\r\nconst _debug = require(\"debug\");\r\nconst BasicParser_1 = require(\"../common/BasicParser\");\r\nconst debug = _debug('music-metadata:parser:ID3');\r\n/**\r\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\r\n */\r\nclass AbstractID3Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.id3parser = new ID3v2Parser_1.ID3v2Parser();\r\n    }\r\n    static async startsWithID3v2Header(tokenizer) {\r\n        return (await tokenizer.peekToken(ID3v2Token_1.ID3v2Header)).fileIdentifier === 'ID3';\r\n    }\r\n    async parse() {\r\n        try {\r\n            await this.parseID3v2();\r\n        }\r\n        catch (err) {\r\n            if (err instanceof core_1.EndOfStreamError) {\r\n                debug(`End-of-stream`);\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    finalize() {\r\n        return;\r\n    }\r\n    async parseID3v2() {\r\n        await this.tryReadId3v2Headers();\r\n        debug(\"End of ID3v2 header, go to MPEG-parser: pos=%s\", this.tokenizer.position);\r\n        await this._parse();\r\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\r\n            this.finalize();\r\n        }\r\n        else {\r\n            const id3v1parser = new ID3v1Parser_1.ID3v1Parser();\r\n            await id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();\r\n            this.finalize();\r\n        }\r\n    }\r\n    async tryReadId3v2Headers() {\r\n        const id3Header = await this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\r\n        if (id3Header.fileIdentifier === \"ID3\") {\r\n            debug(\"Found ID3v2 header, pos=%s\", this.tokenizer.position);\r\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\r\n            return this.tryReadId3v2Headers();\r\n        }\r\n    }\r\n}\r\nexports.AbstractID3Parser = AbstractID3Parser;\r\n"]},"metadata":{},"sourceType":"script"}