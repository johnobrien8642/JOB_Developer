{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.APEv2Parser = void 0;\n\nvar initDebug = require(\"debug\");\n\nvar strtok3 = require(\"strtok3/lib/core\");\n\nvar Util_1 = require(\"../common/Util\");\n\nvar BasicParser_1 = require(\"../common/BasicParser\");\n\nvar APEv2Token_1 = require(\"./APEv2Token\");\n\nvar token_types_1 = require(\"token-types\");\n\nvar debug = initDebug('music-metadata:parser:APEv2');\nvar tagFormat = 'APEv2';\nvar preamble = 'APETAGEX';\n\nvar APEv2Parser = /*#__PURE__*/function (_BasicParser_1$BasicP) {\n  _inherits(APEv2Parser, _BasicParser_1$BasicP);\n\n  var _super = _createSuper(APEv2Parser);\n\n  function APEv2Parser() {\n    var _this;\n\n    _classCallCheck(this, APEv2Parser);\n\n    _this = _super.apply(this, arguments);\n    _this.ape = {};\n    return _this;\n  }\n\n  _createClass(APEv2Parser, [{\n    key: \"tryParseApeHeader\",\n    value:\n    /**\r\n     * Parse APEv1 / APEv2 header if header signature found\r\n     */\n    function () {\n      var _tryParseApeHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var footer, remaining, buffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.tokenizer.fileInfo.size && this.tokenizer.fileInfo.size - this.tokenizer.position < APEv2Token_1.TagFooter.len)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                debug(\"No APEv2 header found, end-of-file reached\");\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.next = 5;\n                return this.tokenizer.peekToken(APEv2Token_1.TagFooter);\n\n              case 5:\n                footer = _context.sent;\n\n                if (!(footer.ID === preamble)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 9;\n                return this.tokenizer.ignore(APEv2Token_1.TagFooter.len);\n\n              case 9:\n                return _context.abrupt(\"return\", this.parseTags(footer));\n\n              case 12:\n                debug(\"APEv2 header not found at offset=\".concat(this.tokenizer.position));\n\n                if (!this.tokenizer.fileInfo.size) {\n                  _context.next = 19;\n                  break;\n                }\n\n                // Try to read the APEv2 header using just the footer-header\n                remaining = this.tokenizer.fileInfo.size - this.tokenizer.position; // ToDo: take ID3v1 into account\n\n                buffer = Buffer.alloc(remaining);\n                _context.next = 18;\n                return this.tokenizer.readBuffer(buffer);\n\n              case 18:\n                return _context.abrupt(\"return\", APEv2Parser.parseTagFooter(this.metadata, buffer, this.options));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function tryParseApeHeader() {\n        return _tryParseApeHeader.apply(this, arguments);\n      }\n\n      return tryParseApeHeader;\n    }()\n  }, {\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var descriptor, lenExp, header;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.tokenizer.readToken(APEv2Token_1.DescriptorParser);\n\n              case 2:\n                descriptor = _context2.sent;\n\n                if (!(descriptor.ID !== 'MAC ')) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('Unexpected descriptor ID');\n\n              case 5:\n                this.ape.descriptor = descriptor;\n                lenExp = descriptor.descriptorBytes - APEv2Token_1.DescriptorParser.len;\n                _context2.next = 9;\n                return lenExp > 0 ? this.parseDescriptorExpansion(lenExp) : this.parseHeader();\n\n              case 9:\n                header = _context2.sent;\n                _context2.next = 12;\n                return this.tokenizer.ignore(header.forwardBytes);\n\n              case 12:\n                return _context2.abrupt(\"return\", this.tryParseApeHeader());\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function parse() {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"parseTags\",\n    value: function () {\n      var _parseTags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(footer) {\n        var keyBuffer, bytesRemaining, i, tagItemHeader, zero, key, value, values, _iterator, _step, val, picData, description, data;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                keyBuffer = Buffer.alloc(256); // maximum tag key length\n\n                bytesRemaining = footer.size - APEv2Token_1.TagFooter.len;\n                debug(\"Parse APE tags at offset=\".concat(this.tokenizer.position, \", size=\").concat(bytesRemaining));\n                i = 0;\n\n              case 4:\n                if (!(i < footer.fields)) {\n                  _context3.next = 52;\n                  break;\n                }\n\n                if (!(bytesRemaining < APEv2Token_1.TagItemHeader.len)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                this.metadata.addWarning(\"APEv2 Tag-header: \".concat(footer.fields - i, \" items remaining, but no more tag data to read.\"));\n                return _context3.abrupt(\"break\", 52);\n\n              case 8:\n                _context3.next = 10;\n                return this.tokenizer.readToken(APEv2Token_1.TagItemHeader);\n\n              case 10:\n                tagItemHeader = _context3.sent;\n                bytesRemaining -= APEv2Token_1.TagItemHeader.len + tagItemHeader.size;\n                _context3.next = 14;\n                return this.tokenizer.peekBuffer(keyBuffer, {\n                  length: Math.min(keyBuffer.length, bytesRemaining)\n                });\n\n              case 14:\n                zero = Util_1.default.findZero(keyBuffer, 0, keyBuffer.length);\n                _context3.next = 17;\n                return this.tokenizer.readToken(new token_types_1.StringType(zero, 'ascii'));\n\n              case 17:\n                key = _context3.sent;\n                _context3.next = 20;\n                return this.tokenizer.ignore(1);\n\n              case 20:\n                bytesRemaining -= key.length + 1;\n                _context3.t0 = tagItemHeader.flags.dataType;\n                _context3.next = _context3.t0 === APEv2Token_1.DataType.text_utf8 ? 24 : _context3.t0 === APEv2Token_1.DataType.binary ? 31 : _context3.t0 === APEv2Token_1.DataType.external_info ? 44 : 48;\n                break;\n\n              case 24:\n                _context3.next = 26;\n                return this.tokenizer.readToken(new token_types_1.StringType(tagItemHeader.size, 'utf8'));\n\n              case 26:\n                value = _context3.sent;\n                values = value.split(/\\x00/g);\n                /*jshint loopfunc:true */\n\n                _iterator = _createForOfIteratorHelper(values);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    val = _step.value;\n                    this.metadata.addTag(tagFormat, key, val);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context3.abrupt(\"break\", 49);\n\n              case 31:\n                if (!this.options.skipCovers) {\n                  _context3.next = 36;\n                  break;\n                }\n\n                _context3.next = 34;\n                return this.tokenizer.ignore(tagItemHeader.size);\n\n              case 34:\n                _context3.next = 43;\n                break;\n\n              case 36:\n                picData = Buffer.alloc(tagItemHeader.size);\n                _context3.next = 39;\n                return this.tokenizer.readBuffer(picData);\n\n              case 39:\n                zero = Util_1.default.findZero(picData, 0, picData.length);\n                description = picData.toString('utf8', 0, zero);\n                data = Buffer.from(picData.slice(zero + 1));\n                this.metadata.addTag(tagFormat, key, {\n                  description: description,\n                  data: data\n                });\n\n              case 43:\n                return _context3.abrupt(\"break\", 49);\n\n              case 44:\n                debug(\"Ignore external info \".concat(key));\n                _context3.next = 47;\n                return this.tokenizer.ignore(tagItemHeader.size);\n\n              case 47:\n                return _context3.abrupt(\"break\", 49);\n\n              case 48:\n                throw new Error(\"Unexpected data-type: \".concat(tagItemHeader.flags.dataType));\n\n              case 49:\n                i++;\n                _context3.next = 4;\n                break;\n\n              case 52:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function parseTags(_x) {\n        return _parseTags.apply(this, arguments);\n      }\n\n      return parseTags;\n    }()\n  }, {\n    key: \"parseDescriptorExpansion\",\n    value: function () {\n      var _parseDescriptorExpansion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(lenExp) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.tokenizer.ignore(lenExp);\n\n              case 2:\n                return _context4.abrupt(\"return\", this.parseHeader());\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function parseDescriptorExpansion(_x2) {\n        return _parseDescriptorExpansion.apply(this, arguments);\n      }\n\n      return parseDescriptorExpansion;\n    }()\n  }, {\n    key: \"parseHeader\",\n    value: function () {\n      var _parseHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var header;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.tokenizer.readToken(APEv2Token_1.Header);\n\n              case 2:\n                header = _context5.sent;\n                // ToDo before\n                this.metadata.setFormat('lossless', true);\n                this.metadata.setFormat('container', 'Monkey\\'s Audio');\n                this.metadata.setFormat('bitsPerSample', header.bitsPerSample);\n                this.metadata.setFormat('sampleRate', header.sampleRate);\n                this.metadata.setFormat('numberOfChannels', header.channel);\n                this.metadata.setFormat('duration', APEv2Parser.calculateDuration(header));\n                return _context5.abrupt(\"return\", {\n                  forwardBytes: this.ape.descriptor.seekTableBytes + this.ape.descriptor.headerDataBytes + this.ape.descriptor.apeFrameDataBytes + this.ape.descriptor.terminatingDataBytes\n                });\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function parseHeader() {\n        return _parseHeader.apply(this, arguments);\n      }\n\n      return parseHeader;\n    }()\n  }], [{\n    key: \"tryParseApeHeader\",\n    value: function tryParseApeHeader(metadata, tokenizer, options) {\n      var apeParser = new APEv2Parser();\n      apeParser.init(metadata, tokenizer, options);\n      return apeParser.tryParseApeHeader();\n    }\n    /**\r\n     * Calculate the media file duration\r\n     * @param ah ApeHeader\r\n     * @return {number} duration in seconds\r\n     */\n\n  }, {\n    key: \"calculateDuration\",\n    value: function calculateDuration(ah) {\n      var duration = ah.totalFrames > 1 ? ah.blocksPerFrame * (ah.totalFrames - 1) : 0;\n      duration += ah.finalFrameBlocks;\n      return duration / ah.sampleRate;\n    }\n    /**\r\n     * Calculates the APEv1 / APEv2 first field offset\r\n     * @param reader\r\n     * @param offset\r\n     */\n\n  }, {\n    key: \"findApeFooterOffset\",\n    value: function () {\n      var _findApeFooterOffset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(reader, offset) {\n        var apeBuf, tagFooter;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // Search for APE footer header at the end of the file\n                apeBuf = Buffer.alloc(APEv2Token_1.TagFooter.len);\n                _context6.next = 3;\n                return reader.randomRead(apeBuf, 0, APEv2Token_1.TagFooter.len, offset - APEv2Token_1.TagFooter.len);\n\n              case 3:\n                tagFooter = APEv2Token_1.TagFooter.get(apeBuf, 0);\n\n                if (!(tagFooter.ID === 'APETAGEX')) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                debug(\"APE footer header at offset=\".concat(offset));\n                return _context6.abrupt(\"return\", {\n                  footer: tagFooter,\n                  offset: offset - tagFooter.size\n                });\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function findApeFooterOffset(_x3, _x4) {\n        return _findApeFooterOffset.apply(this, arguments);\n      }\n\n      return findApeFooterOffset;\n    }()\n  }, {\n    key: \"parseTagFooter\",\n    value: function parseTagFooter(metadata, buffer, options) {\n      var footer = APEv2Token_1.TagFooter.get(buffer, buffer.length - APEv2Token_1.TagFooter.len);\n      if (footer.ID !== preamble) throw new Error('Unexpected APEv2 Footer ID preamble value.');\n      strtok3.fromBuffer(buffer);\n      var apeParser = new APEv2Parser();\n      apeParser.init(metadata, strtok3.fromBuffer(buffer), options);\n      return apeParser.parseTags(footer);\n    }\n  }]);\n\n  return APEv2Parser;\n}(BasicParser_1.BasicParser);\n\nexports.APEv2Parser = APEv2Parser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/apev2/APEv2Parser.js"],"names":["Object","defineProperty","exports","value","APEv2Parser","initDebug","require","strtok3","Util_1","BasicParser_1","APEv2Token_1","token_types_1","debug","tagFormat","preamble","arguments","ape","tokenizer","fileInfo","size","position","TagFooter","len","peekToken","footer","ID","ignore","parseTags","remaining","buffer","Buffer","alloc","readBuffer","parseTagFooter","metadata","options","readToken","DescriptorParser","descriptor","Error","lenExp","descriptorBytes","parseDescriptorExpansion","parseHeader","header","forwardBytes","tryParseApeHeader","keyBuffer","bytesRemaining","i","fields","TagItemHeader","addWarning","tagItemHeader","peekBuffer","length","Math","min","zero","default","findZero","StringType","key","flags","dataType","DataType","text_utf8","binary","external_info","values","split","val","addTag","skipCovers","picData","description","toString","data","from","slice","Header","setFormat","bitsPerSample","sampleRate","channel","calculateDuration","seekTableBytes","headerDataBytes","apeFrameDataBytes","terminatingDataBytes","apeParser","init","ah","duration","totalFrames","blocksPerFrame","finalFrameBlocks","reader","offset","apeBuf","randomRead","tagFooter","get","fromBuffer","BasicParser"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.APEv2Parser = void 0;\r\nconst initDebug = require(\"debug\");\r\nconst strtok3 = require(\"strtok3/lib/core\");\r\nconst Util_1 = require(\"../common/Util\");\r\nconst BasicParser_1 = require(\"../common/BasicParser\");\r\nconst APEv2Token_1 = require(\"./APEv2Token\");\r\nconst token_types_1 = require(\"token-types\");\r\nconst debug = initDebug('music-metadata:parser:APEv2');\r\nconst tagFormat = 'APEv2';\r\nconst preamble = 'APETAGEX';\r\nclass APEv2Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.ape = {};\r\n    }\r\n    static tryParseApeHeader(metadata, tokenizer, options) {\r\n        const apeParser = new APEv2Parser();\r\n        apeParser.init(metadata, tokenizer, options);\r\n        return apeParser.tryParseApeHeader();\r\n    }\r\n    /**\r\n     * Calculate the media file duration\r\n     * @param ah ApeHeader\r\n     * @return {number} duration in seconds\r\n     */\r\n    static calculateDuration(ah) {\r\n        let duration = ah.totalFrames > 1 ? ah.blocksPerFrame * (ah.totalFrames - 1) : 0;\r\n        duration += ah.finalFrameBlocks;\r\n        return duration / ah.sampleRate;\r\n    }\r\n    /**\r\n     * Calculates the APEv1 / APEv2 first field offset\r\n     * @param reader\r\n     * @param offset\r\n     */\r\n    static async findApeFooterOffset(reader, offset) {\r\n        // Search for APE footer header at the end of the file\r\n        const apeBuf = Buffer.alloc(APEv2Token_1.TagFooter.len);\r\n        await reader.randomRead(apeBuf, 0, APEv2Token_1.TagFooter.len, offset - APEv2Token_1.TagFooter.len);\r\n        const tagFooter = APEv2Token_1.TagFooter.get(apeBuf, 0);\r\n        if (tagFooter.ID === 'APETAGEX') {\r\n            debug(`APE footer header at offset=${offset}`);\r\n            return { footer: tagFooter, offset: offset - tagFooter.size };\r\n        }\r\n    }\r\n    static parseTagFooter(metadata, buffer, options) {\r\n        const footer = APEv2Token_1.TagFooter.get(buffer, buffer.length - APEv2Token_1.TagFooter.len);\r\n        if (footer.ID !== preamble)\r\n            throw new Error('Unexpected APEv2 Footer ID preamble value.');\r\n        strtok3.fromBuffer(buffer);\r\n        const apeParser = new APEv2Parser();\r\n        apeParser.init(metadata, strtok3.fromBuffer(buffer), options);\r\n        return apeParser.parseTags(footer);\r\n    }\r\n    /**\r\n     * Parse APEv1 / APEv2 header if header signature found\r\n     */\r\n    async tryParseApeHeader() {\r\n        if (this.tokenizer.fileInfo.size && this.tokenizer.fileInfo.size - this.tokenizer.position < APEv2Token_1.TagFooter.len) {\r\n            debug(`No APEv2 header found, end-of-file reached`);\r\n            return;\r\n        }\r\n        const footer = await this.tokenizer.peekToken(APEv2Token_1.TagFooter);\r\n        if (footer.ID === preamble) {\r\n            await this.tokenizer.ignore(APEv2Token_1.TagFooter.len);\r\n            return this.parseTags(footer);\r\n        }\r\n        else {\r\n            debug(`APEv2 header not found at offset=${this.tokenizer.position}`);\r\n            if (this.tokenizer.fileInfo.size) {\r\n                // Try to read the APEv2 header using just the footer-header\r\n                const remaining = this.tokenizer.fileInfo.size - this.tokenizer.position; // ToDo: take ID3v1 into account\r\n                const buffer = Buffer.alloc(remaining);\r\n                await this.tokenizer.readBuffer(buffer);\r\n                return APEv2Parser.parseTagFooter(this.metadata, buffer, this.options);\r\n            }\r\n        }\r\n    }\r\n    async parse() {\r\n        const descriptor = await this.tokenizer.readToken(APEv2Token_1.DescriptorParser);\r\n        if (descriptor.ID !== 'MAC ')\r\n            throw new Error('Unexpected descriptor ID');\r\n        this.ape.descriptor = descriptor;\r\n        const lenExp = descriptor.descriptorBytes - APEv2Token_1.DescriptorParser.len;\r\n        const header = await (lenExp > 0 ? this.parseDescriptorExpansion(lenExp) : this.parseHeader());\r\n        await this.tokenizer.ignore(header.forwardBytes);\r\n        return this.tryParseApeHeader();\r\n    }\r\n    async parseTags(footer) {\r\n        const keyBuffer = Buffer.alloc(256); // maximum tag key length\r\n        let bytesRemaining = footer.size - APEv2Token_1.TagFooter.len;\r\n        debug(`Parse APE tags at offset=${this.tokenizer.position}, size=${bytesRemaining}`);\r\n        for (let i = 0; i < footer.fields; i++) {\r\n            if (bytesRemaining < APEv2Token_1.TagItemHeader.len) {\r\n                this.metadata.addWarning(`APEv2 Tag-header: ${footer.fields - i} items remaining, but no more tag data to read.`);\r\n                break;\r\n            }\r\n            // Only APEv2 tag has tag item headers\r\n            const tagItemHeader = await this.tokenizer.readToken(APEv2Token_1.TagItemHeader);\r\n            bytesRemaining -= APEv2Token_1.TagItemHeader.len + tagItemHeader.size;\r\n            await this.tokenizer.peekBuffer(keyBuffer, { length: Math.min(keyBuffer.length, bytesRemaining) });\r\n            let zero = Util_1.default.findZero(keyBuffer, 0, keyBuffer.length);\r\n            const key = await this.tokenizer.readToken(new token_types_1.StringType(zero, 'ascii'));\r\n            await this.tokenizer.ignore(1);\r\n            bytesRemaining -= key.length + 1;\r\n            switch (tagItemHeader.flags.dataType) {\r\n                case APEv2Token_1.DataType.text_utf8: { // utf-8 textstring\r\n                    const value = await this.tokenizer.readToken(new token_types_1.StringType(tagItemHeader.size, 'utf8'));\r\n                    const values = value.split(/\\x00/g);\r\n                    /*jshint loopfunc:true */\r\n                    for (const val of values) {\r\n                        this.metadata.addTag(tagFormat, key, val);\r\n                    }\r\n                    break;\r\n                }\r\n                case APEv2Token_1.DataType.binary: // binary (probably artwork)\r\n                    if (this.options.skipCovers) {\r\n                        await this.tokenizer.ignore(tagItemHeader.size);\r\n                    }\r\n                    else {\r\n                        const picData = Buffer.alloc(tagItemHeader.size);\r\n                        await this.tokenizer.readBuffer(picData);\r\n                        zero = Util_1.default.findZero(picData, 0, picData.length);\r\n                        const description = picData.toString('utf8', 0, zero);\r\n                        const data = Buffer.from(picData.slice(zero + 1));\r\n                        this.metadata.addTag(tagFormat, key, {\r\n                            description,\r\n                            data\r\n                        });\r\n                    }\r\n                    break;\r\n                case APEv2Token_1.DataType.external_info:\r\n                    debug(`Ignore external info ${key}`);\r\n                    await this.tokenizer.ignore(tagItemHeader.size);\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unexpected data-type: ${tagItemHeader.flags.dataType}`);\r\n            }\r\n        }\r\n    }\r\n    async parseDescriptorExpansion(lenExp) {\r\n        await this.tokenizer.ignore(lenExp);\r\n        return this.parseHeader();\r\n    }\r\n    async parseHeader() {\r\n        const header = await this.tokenizer.readToken(APEv2Token_1.Header);\r\n        // ToDo before\r\n        this.metadata.setFormat('lossless', true);\r\n        this.metadata.setFormat('container', 'Monkey\\'s Audio');\r\n        this.metadata.setFormat('bitsPerSample', header.bitsPerSample);\r\n        this.metadata.setFormat('sampleRate', header.sampleRate);\r\n        this.metadata.setFormat('numberOfChannels', header.channel);\r\n        this.metadata.setFormat('duration', APEv2Parser.calculateDuration(header));\r\n        return {\r\n            forwardBytes: this.ape.descriptor.seekTableBytes + this.ape.descriptor.headerDataBytes +\r\n                this.ape.descriptor.apeFrameDataBytes + this.ape.descriptor.terminatingDataBytes\r\n        };\r\n    }\r\n}\r\nexports.APEv2Parser = APEv2Parser;\r\n"]},"metadata":{},"sourceType":"script"}