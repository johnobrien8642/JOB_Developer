{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FactChunk = exports.Format = exports.WaveFormat = void 0;\n/**\r\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\r\n */\n\nvar WaveFormat;\n\n(function (WaveFormat) {\n  WaveFormat[WaveFormat[\"PCM\"] = 1] = \"PCM\"; // MPEG-4 and AAC Audio Types\n\n  WaveFormat[WaveFormat[\"ADPCM\"] = 2] = \"ADPCM\";\n  WaveFormat[WaveFormat[\"IEEE_FLOAT\"] = 3] = \"IEEE_FLOAT\";\n  WaveFormat[WaveFormat[\"MPEG_ADTS_AAC\"] = 5632] = \"MPEG_ADTS_AAC\";\n  WaveFormat[WaveFormat[\"MPEG_LOAS\"] = 5634] = \"MPEG_LOAS\";\n  WaveFormat[WaveFormat[\"RAW_AAC1\"] = 255] = \"RAW_AAC1\"; // Dolby Audio Types\n\n  WaveFormat[WaveFormat[\"DOLBY_AC3_SPDIF\"] = 146] = \"DOLBY_AC3_SPDIF\";\n  WaveFormat[WaveFormat[\"DVM\"] = 8192] = \"DVM\";\n  WaveFormat[WaveFormat[\"RAW_SPORT\"] = 576] = \"RAW_SPORT\";\n  WaveFormat[WaveFormat[\"ESST_AC3\"] = 577] = \"ESST_AC3\";\n  WaveFormat[WaveFormat[\"DRM\"] = 9] = \"DRM\";\n  WaveFormat[WaveFormat[\"DTS2\"] = 8193] = \"DTS2\";\n  WaveFormat[WaveFormat[\"MPEG\"] = 80] = \"MPEG\";\n})(WaveFormat = exports.WaveFormat || (exports.WaveFormat = {}));\n/**\r\n * format chunk; chunk-id is \"fmt \"\r\n * http://soundfile.sapp.org/doc/WaveFormat/\r\n */\n\n\nclass Format {\n  constructor(header) {\n    if (header.chunkSize < 16) throw new Error('Invalid chunk size');\n    this.len = header.chunkSize;\n  }\n\n  get(buf, off) {\n    return {\n      wFormatTag: buf.readUInt16LE(off),\n      nChannels: buf.readUInt16LE(off + 2),\n      nSamplesPerSec: buf.readUInt32LE(off + 4),\n      nAvgBytesPerSec: buf.readUInt32LE(off + 8),\n      nBlockAlign: buf.readUInt16LE(off + 12),\n      wBitsPerSample: buf.readUInt16LE(off + 14)\n    };\n  }\n\n}\n\nexports.Format = Format;\n/**\r\n * Fact chunk; chunk-id is \"fact\"\r\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\r\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\r\n */\n\nclass FactChunk {\n  constructor(header) {\n    if (header.chunkSize < 4) {\n      throw new Error('Invalid fact chunk size.');\n    }\n\n    this.len = header.chunkSize;\n  }\n\n  get(buf, off) {\n    return {\n      dwSampleLength: buf.readUInt32LE(off)\n    };\n  }\n\n}\n\nexports.FactChunk = FactChunk;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/music-metadata/lib/wav/WaveChunk.js"],"names":["Object","defineProperty","exports","value","FactChunk","Format","WaveFormat","constructor","header","chunkSize","Error","len","get","buf","off","wFormatTag","readUInt16LE","nChannels","nSamplesPerSec","readUInt32LE","nAvgBytesPerSec","nBlockAlign","wBitsPerSample","dwSampleLength"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FactChunk = exports.Format = exports.WaveFormat = void 0;\r\n/**\r\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\r\n */\r\nvar WaveFormat;\r\n(function (WaveFormat) {\r\n    WaveFormat[WaveFormat[\"PCM\"] = 1] = \"PCM\";\r\n    // MPEG-4 and AAC Audio Types\r\n    WaveFormat[WaveFormat[\"ADPCM\"] = 2] = \"ADPCM\";\r\n    WaveFormat[WaveFormat[\"IEEE_FLOAT\"] = 3] = \"IEEE_FLOAT\";\r\n    WaveFormat[WaveFormat[\"MPEG_ADTS_AAC\"] = 5632] = \"MPEG_ADTS_AAC\";\r\n    WaveFormat[WaveFormat[\"MPEG_LOAS\"] = 5634] = \"MPEG_LOAS\";\r\n    WaveFormat[WaveFormat[\"RAW_AAC1\"] = 255] = \"RAW_AAC1\";\r\n    // Dolby Audio Types\r\n    WaveFormat[WaveFormat[\"DOLBY_AC3_SPDIF\"] = 146] = \"DOLBY_AC3_SPDIF\";\r\n    WaveFormat[WaveFormat[\"DVM\"] = 8192] = \"DVM\";\r\n    WaveFormat[WaveFormat[\"RAW_SPORT\"] = 576] = \"RAW_SPORT\";\r\n    WaveFormat[WaveFormat[\"ESST_AC3\"] = 577] = \"ESST_AC3\";\r\n    WaveFormat[WaveFormat[\"DRM\"] = 9] = \"DRM\";\r\n    WaveFormat[WaveFormat[\"DTS2\"] = 8193] = \"DTS2\";\r\n    WaveFormat[WaveFormat[\"MPEG\"] = 80] = \"MPEG\";\r\n})(WaveFormat = exports.WaveFormat || (exports.WaveFormat = {}));\r\n/**\r\n * format chunk; chunk-id is \"fmt \"\r\n * http://soundfile.sapp.org/doc/WaveFormat/\r\n */\r\nclass Format {\r\n    constructor(header) {\r\n        if (header.chunkSize < 16)\r\n            throw new Error('Invalid chunk size');\r\n        this.len = header.chunkSize;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            wFormatTag: buf.readUInt16LE(off),\r\n            nChannels: buf.readUInt16LE(off + 2),\r\n            nSamplesPerSec: buf.readUInt32LE(off + 4),\r\n            nAvgBytesPerSec: buf.readUInt32LE(off + 8),\r\n            nBlockAlign: buf.readUInt16LE(off + 12),\r\n            wBitsPerSample: buf.readUInt16LE(off + 14)\r\n        };\r\n    }\r\n}\r\nexports.Format = Format;\r\n/**\r\n * Fact chunk; chunk-id is \"fact\"\r\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\r\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\r\n */\r\nclass FactChunk {\r\n    constructor(header) {\r\n        if (header.chunkSize < 4) {\r\n            throw new Error('Invalid fact chunk size.');\r\n        }\r\n        this.len = header.chunkSize;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            dwSampleLength: buf.readUInt32LE(off)\r\n        };\r\n    }\r\n}\r\nexports.FactChunk = FactChunk;\r\n"]},"metadata":{},"sourceType":"script"}