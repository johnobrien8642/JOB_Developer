{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsfParser = void 0;\n\nvar type_1 = require(\"../type\");\n\nvar GUID_1 = require(\"./GUID\");\n\nvar AsfObject = require(\"./AsfObject\");\n\nvar _debug = require(\"debug\");\n\nvar BasicParser_1 = require(\"../common/BasicParser\");\n\nvar debug = _debug('music-metadata:parser:ASF');\n\nvar headerType = 'asf';\n/**\r\n * Windows Media Metadata Usage Guidelines\r\n *   Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\r\n *\r\n * Ref:\r\n *   https://tools.ietf.org/html/draft-fleischman-asf-01\r\n *   https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\r\n *   http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\r\n *   https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\r\n */\n\nvar AsfParser = /*#__PURE__*/function (_BasicParser_1$BasicP) {\n  _inherits(AsfParser, _BasicParser_1$BasicP);\n\n  var _super = _createSuper(AsfParser);\n\n  function AsfParser() {\n    _classCallCheck(this, AsfParser);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AsfParser, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var header;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\n\n              case 2:\n                header = _context.sent;\n\n                if (header.objectId.equals(GUID_1.default.HeaderObject)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\n\n              case 5:\n                _context.prev = 5;\n                _context.next = 8;\n                return this.parseObjectHeader(header.numberOfHeaderObjects);\n\n              case 8:\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](5);\n                debug('Error while parsing ASF: %s', _context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 10]]);\n      }));\n\n      function parse() {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"parseObjectHeader\",\n    value: function () {\n      var _parseObjectHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(numberOfObjectHeaders) {\n        var _this = this;\n\n        var tags, header, fpo, spo, extHeader, codecs, audioCodecs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n\n              case 2:\n                header = _context2.sent;\n                // Parse data part of the ASF Object\n                debug('header GUID=%s', header.objectId.str);\n                _context2.t0 = header.objectId.str;\n                _context2.next = _context2.t0 === AsfObject.FilePropertiesObject.guid.str ? 7 : _context2.t0 === AsfObject.StreamPropertiesObject.guid.str ? 13 : _context2.t0 === AsfObject.HeaderExtensionObject.guid.str ? 18 : _context2.t0 === AsfObject.ContentDescriptionObjectState.guid.str ? 24 : _context2.t0 === AsfObject.ExtendedContentDescriptionObjectState.guid.str ? 29 : _context2.t0 === GUID_1.default.CodecListObject.str ? 34 : _context2.t0 === GUID_1.default.StreamBitratePropertiesObject.str ? 41 : _context2.t0 === GUID_1.default.PaddingObject.str ? 44 : 48;\n                break;\n\n              case 7:\n                _context2.next = 9;\n                return this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\n\n              case 9:\n                fpo = _context2.sent;\n                this.metadata.setFormat('duration', fpo.playDuration / 10000000 - fpo.preroll / 1000);\n                this.metadata.setFormat('bitrate', fpo.maximumBitrate);\n                return _context2.abrupt(\"break\", 52);\n\n              case 13:\n                _context2.next = 15;\n                return this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\n\n              case 15:\n                spo = _context2.sent;\n                this.metadata.setFormat('container', 'ASF/' + spo.streamType);\n                return _context2.abrupt(\"break\", 52);\n\n              case 18:\n                _context2.next = 20;\n                return this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\n\n              case 20:\n                extHeader = _context2.sent;\n                _context2.next = 23;\n                return this.parseExtensionObject(extHeader.extensionDataSize);\n\n              case 23:\n                return _context2.abrupt(\"break\", 52);\n\n              case 24:\n                _context2.next = 26;\n                return this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\n\n              case 26:\n                tags = _context2.sent;\n                this.addTags(tags);\n                return _context2.abrupt(\"break\", 52);\n\n              case 29:\n                _context2.next = 31;\n                return this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\n\n              case 31:\n                tags = _context2.sent;\n                this.addTags(tags);\n                return _context2.abrupt(\"break\", 52);\n\n              case 34:\n                _context2.next = 36;\n                return AsfObject.readCodecEntries(this.tokenizer);\n\n              case 36:\n                codecs = _context2.sent;\n                codecs.forEach(function (codec) {\n                  _this.metadata.addStreamInfo({\n                    type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\n                    codecName: codec.codecName\n                  });\n                });\n                audioCodecs = codecs.filter(function (codec) {\n                  return codec.type.audioCodec;\n                }).map(function (codec) {\n                  return codec.codecName;\n                }).join('/');\n                this.metadata.setFormat('codec', audioCodecs);\n                return _context2.abrupt(\"break\", 52);\n\n              case 41:\n                _context2.next = 43;\n                return this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n\n              case 43:\n                return _context2.abrupt(\"break\", 52);\n\n              case 44:\n                // ToDo: register bytes pad\n                debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\n                _context2.next = 47;\n                return this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n\n              case 47:\n                return _context2.abrupt(\"break\", 52);\n\n              case 48:\n                this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n                debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\n                _context2.next = 52;\n                return this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n\n              case 52:\n                if (--numberOfObjectHeaders) {\n                  _context2.next = 0;\n                  break;\n                }\n\n              case 53:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function parseObjectHeader(_x) {\n        return _parseObjectHeader.apply(this, arguments);\n      }\n\n      return parseObjectHeader;\n    }()\n  }, {\n    key: \"addTags\",\n    value: function addTags(tags) {\n      var _this2 = this;\n\n      tags.forEach(function (tag) {\n        _this2.metadata.addTag(headerType, tag.id, tag.value);\n      });\n    }\n  }, {\n    key: \"parseExtensionObject\",\n    value: function () {\n      var _parseExtensionObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(extensionSize) {\n        var header, moTags, mlTags;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n\n              case 2:\n                header = _context3.sent;\n                _context3.t0 = header.objectId.str;\n                _context3.next = _context3.t0 === AsfObject.ExtendedStreamPropertiesObjectState.guid.str ? 6 : _context3.t0 === AsfObject.MetadataObjectState.guid.str ? 9 : _context3.t0 === AsfObject.MetadataLibraryObjectState.guid.str ? 14 : _context3.t0 === GUID_1.default.PaddingObject.str ? 19 : _context3.t0 === GUID_1.default.CompatibilityObject.str ? 22 : _context3.t0 === GUID_1.default.ASF_Index_Placeholder_Object.str ? 24 : 27;\n                break;\n\n              case 6:\n                _context3.next = 8;\n                return this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\n\n              case 8:\n                return _context3.abrupt(\"break\", 31);\n\n              case 9:\n                _context3.next = 11;\n                return this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\n\n              case 11:\n                moTags = _context3.sent;\n                this.addTags(moTags);\n                return _context3.abrupt(\"break\", 31);\n\n              case 14:\n                _context3.next = 16;\n                return this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\n\n              case 16:\n                mlTags = _context3.sent;\n                this.addTags(mlTags);\n                return _context3.abrupt(\"break\", 31);\n\n              case 19:\n                _context3.next = 21;\n                return this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n\n              case 21:\n                return _context3.abrupt(\"break\", 31);\n\n              case 22:\n                this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                return _context3.abrupt(\"break\", 31);\n\n              case 24:\n                _context3.next = 26;\n                return this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n\n              case 26:\n                return _context3.abrupt(\"break\", 31);\n\n              case 27:\n                this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str); // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\n\n                _context3.next = 30;\n                return this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n\n              case 30:\n                return _context3.abrupt(\"break\", 31);\n\n              case 31:\n                extensionSize -= header.objectSize;\n\n              case 32:\n                if (extensionSize > 0) {\n                  _context3.next = 0;\n                  break;\n                }\n\n              case 33:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function parseExtensionObject(_x2) {\n        return _parseExtensionObject.apply(this, arguments);\n      }\n\n      return parseExtensionObject;\n    }()\n  }]);\n\n  return AsfParser;\n}(BasicParser_1.BasicParser);\n\nexports.AsfParser = AsfParser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/asf/AsfParser.js"],"names":["Object","defineProperty","exports","value","AsfParser","type_1","require","GUID_1","AsfObject","_debug","BasicParser_1","debug","headerType","tokenizer","readToken","TopLevelHeaderObjectToken","header","objectId","equals","default","HeaderObject","Error","str","parseObjectHeader","numberOfHeaderObjects","numberOfObjectHeaders","HeaderObjectToken","FilePropertiesObject","guid","StreamPropertiesObject","HeaderExtensionObject","ContentDescriptionObjectState","ExtendedContentDescriptionObjectState","CodecListObject","StreamBitratePropertiesObject","PaddingObject","fpo","metadata","setFormat","playDuration","preroll","maximumBitrate","spo","streamType","extHeader","parseExtensionObject","extensionDataSize","tags","addTags","readCodecEntries","codecs","forEach","codec","addStreamInfo","type","videoCodec","TrackType","video","audio","codecName","audioCodecs","filter","audioCodec","map","join","ignore","objectSize","len","addWarning","IgnoreObjectState","tag","addTag","id","extensionSize","ExtendedStreamPropertiesObjectState","MetadataObjectState","MetadataLibraryObjectState","CompatibilityObject","ASF_Index_Placeholder_Object","moTags","mlTags","BasicParser"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AsfParser = void 0;\r\nconst type_1 = require(\"../type\");\r\nconst GUID_1 = require(\"./GUID\");\r\nconst AsfObject = require(\"./AsfObject\");\r\nconst _debug = require(\"debug\");\r\nconst BasicParser_1 = require(\"../common/BasicParser\");\r\nconst debug = _debug('music-metadata:parser:ASF');\r\nconst headerType = 'asf';\r\n/**\r\n * Windows Media Metadata Usage Guidelines\r\n *   Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\r\n *\r\n * Ref:\r\n *   https://tools.ietf.org/html/draft-fleischman-asf-01\r\n *   https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\r\n *   http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\r\n *   https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\r\n */\r\nclass AsfParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\r\n        if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\r\n            throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\r\n        }\r\n        try {\r\n            await this.parseObjectHeader(header.numberOfHeaderObjects);\r\n        }\r\n        catch (err) {\r\n            debug('Error while parsing ASF: %s', err);\r\n        }\r\n    }\r\n    async parseObjectHeader(numberOfObjectHeaders) {\r\n        let tags;\r\n        do {\r\n            // Parse common header of the ASF Object (3.1)\r\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\r\n            // Parse data part of the ASF Object\r\n            debug('header GUID=%s', header.objectId.str);\r\n            switch (header.objectId.str) {\r\n                case AsfObject.FilePropertiesObject.guid.str: // 3.2\r\n                    const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\r\n                    this.metadata.setFormat('duration', fpo.playDuration / 10000000 - fpo.preroll / 1000);\r\n                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);\r\n                    break;\r\n                case AsfObject.StreamPropertiesObject.guid.str: // 3.3\r\n                    const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\r\n                    this.metadata.setFormat('container', 'ASF/' + spo.streamType);\r\n                    break;\r\n                case AsfObject.HeaderExtensionObject.guid.str: // 3.4\r\n                    const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\r\n                    await this.parseExtensionObject(extHeader.extensionDataSize);\r\n                    break;\r\n                case AsfObject.ContentDescriptionObjectState.guid.str: // 3.10\r\n                    tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\r\n                    this.addTags(tags);\r\n                    break;\r\n                case AsfObject.ExtendedContentDescriptionObjectState.guid.str: // 3.11\r\n                    tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\r\n                    this.addTags(tags);\r\n                    break;\r\n                case GUID_1.default.CodecListObject.str:\r\n                    const codecs = await AsfObject.readCodecEntries(this.tokenizer);\r\n                    codecs.forEach(codec => {\r\n                        this.metadata.addStreamInfo({\r\n                            type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\r\n                            codecName: codec.codecName\r\n                        });\r\n                    });\r\n                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\r\n                    this.metadata.setFormat('codec', audioCodecs);\r\n                    break;\r\n                case GUID_1.default.StreamBitratePropertiesObject.str:\r\n                    // ToDo?\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                case GUID_1.default.PaddingObject.str:\r\n                    // ToDo: register bytes pad\r\n                    debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                default:\r\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\r\n                    debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\r\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\r\n            }\r\n        } while (--numberOfObjectHeaders);\r\n        // done\r\n    }\r\n    addTags(tags) {\r\n        tags.forEach(tag => {\r\n            this.metadata.addTag(headerType, tag.id, tag.value);\r\n        });\r\n    }\r\n    async parseExtensionObject(extensionSize) {\r\n        do {\r\n            // Parse common header of the ASF Object (3.1)\r\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\r\n            // Parse data part of the ASF Object\r\n            switch (header.objectId.str) {\r\n                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str: // 4.1\r\n                    // ToDo: extended stream header properties are ignored\r\n                    await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\r\n                    break;\r\n                case AsfObject.MetadataObjectState.guid.str: // 4.7\r\n                    const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\r\n                    this.addTags(moTags);\r\n                    break;\r\n                case AsfObject.MetadataLibraryObjectState.guid.str: // 4.8\r\n                    const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\r\n                    this.addTags(mlTags);\r\n                    break;\r\n                case GUID_1.default.PaddingObject.str:\r\n                    // ToDo: register bytes pad\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                case GUID_1.default.CompatibilityObject.str:\r\n                    this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                case GUID_1.default.ASF_Index_Placeholder_Object.str:\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                default:\r\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\r\n                    // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\r\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\r\n                    break;\r\n            }\r\n            extensionSize -= header.objectSize;\r\n        } while (extensionSize > 0);\r\n    }\r\n}\r\nexports.AsfParser = AsfParser;\r\n"]},"metadata":{},"sourceType":"script"}