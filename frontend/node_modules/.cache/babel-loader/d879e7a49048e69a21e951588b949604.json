{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParserFactory = exports.parseHttpContentType = void 0;\n\nconst FileType = require(\"file-type/core\");\n\nconst ContentType = require(\"content-type\");\n\nconst MimeType = require(\"media-typer\");\n\nconst _debug = require(\"debug\");\n\nconst MetadataCollector_1 = require(\"./common/MetadataCollector\");\n\nconst AiffParser_1 = require(\"./aiff/AiffParser\");\n\nconst APEv2Parser_1 = require(\"./apev2/APEv2Parser\");\n\nconst AsfParser_1 = require(\"./asf/AsfParser\");\n\nconst FlacParser_1 = require(\"./flac/FlacParser\");\n\nconst MP4Parser_1 = require(\"./mp4/MP4Parser\");\n\nconst MpegParser_1 = require(\"./mpeg/MpegParser\");\n\nconst musepack_1 = require(\"./musepack\");\n\nconst OggParser_1 = require(\"./ogg/OggParser\");\n\nconst WaveParser_1 = require(\"./wav/WaveParser\");\n\nconst WavPackParser_1 = require(\"./wavpack/WavPackParser\");\n\nconst DsfParser_1 = require(\"./dsf/DsfParser\");\n\nconst DsdiffParser_1 = require(\"./dsdiff/DsdiffParser\");\n\nconst MatroskaParser_1 = require(\"./matroska/MatroskaParser\");\n\nconst debug = _debug('music-metadata:parser:factory');\n\nfunction parseHttpContentType(contentType) {\n  const type = ContentType.parse(contentType);\n  const mime = MimeType.parse(type.type);\n  return {\n    type: mime.type,\n    subtype: mime.subtype,\n    suffix: mime.suffix,\n    parameters: type.parameters\n  };\n}\n\nexports.parseHttpContentType = parseHttpContentType;\n\nclass ParserFactory {\n  /**\r\n   * Parse metadata from tokenizer\r\n   * @param tokenizer - Tokenizer\r\n   * @param contentType - MIME-type\r\n   * @param opts - Options\r\n   * @returns Native metadata\r\n   */\n  static async parseOnContentType(tokenizer, opts) {\n    const {\n      mimeType,\n      path,\n      url\n    } = await tokenizer.fileInfo; // Resolve parser based on MIME-type or file extension\n\n    const parserId = ParserFactory.getParserIdForMimeType(mimeType) || ParserFactory.getParserIdForExtension(path) || ParserFactory.getParserIdForExtension(url);\n\n    if (!parserId) {\n      debug('No parser found for MIME-type / extension: ' + mimeType);\n    }\n\n    return this.parse(tokenizer, parserId, opts);\n  }\n\n  static async parse(tokenizer, parserId, opts) {\n    if (!parserId) {\n      // Parser could not be determined on MIME-type or extension\n      debug('Guess parser on content...');\n      const buf = Buffer.alloc(4100);\n      await tokenizer.peekBuffer(buf, {\n        mayBeLess: true\n      });\n\n      if (tokenizer.fileInfo.path) {\n        parserId = this.getParserIdForExtension(tokenizer.fileInfo.path);\n      }\n\n      if (!parserId) {\n        const guessedType = await FileType.fromBuffer(buf);\n\n        if (!guessedType) {\n          throw new Error('Failed to determine audio format');\n        }\n\n        debug(`Guessed file type is mime=${guessedType.mime}, extension=${guessedType.ext}`);\n        parserId = ParserFactory.getParserIdForMimeType(guessedType.mime);\n\n        if (!parserId) {\n          throw new Error('Guessed MIME-type not supported: ' + guessedType.mime);\n        }\n      }\n    } // Parser found, execute parser\n\n\n    return this._parse(tokenizer, parserId, opts);\n  }\n  /**\r\n   * @param filePath - Path, filename or extension to audio file\r\n   * @return Parser sub-module name\r\n   */\n\n\n  static getParserIdForExtension(filePath) {\n    if (!filePath) return;\n    const extension = this.getExtension(filePath).toLocaleLowerCase() || filePath;\n\n    switch (extension) {\n      case '.mp2':\n      case '.mp3':\n      case '.m2a':\n      case '.aac':\n        // Assume it is ADTS-container\n        return 'mpeg';\n\n      case '.ape':\n        return 'apev2';\n\n      case '.mp4':\n      case '.m4a':\n      case '.m4b':\n      case '.m4pa':\n      case '.m4v':\n      case '.m4r':\n      case '.3gp':\n        return 'mp4';\n\n      case '.wma':\n      case '.wmv':\n      case '.asf':\n        return 'asf';\n\n      case '.flac':\n        return 'flac';\n\n      case '.ogg':\n      case '.ogv':\n      case '.oga':\n      case '.ogm':\n      case '.ogx':\n      case '.opus': // recommended filename extension for Ogg Opus\n\n      case '.spx':\n        // recommended filename extension for Ogg Speex\n        return 'ogg';\n\n      case '.aif':\n      case '.aiff':\n      case '.aifc':\n        return 'aiff';\n\n      case '.wav':\n        return 'riff';\n\n      case '.wv':\n      case '.wvp':\n        return 'wavpack';\n\n      case '.mpc':\n        return 'musepack';\n\n      case '.dsf':\n        return 'dsf';\n\n      case '.dff':\n        return 'dsdiff';\n\n      case '.mka':\n      case '.mkv':\n      case '.mk3d':\n      case '.mks':\n      case '.webm':\n        return 'matroska';\n    }\n  }\n\n  static async loadParser(moduleName) {\n    switch (moduleName) {\n      case 'aiff':\n        return new AiffParser_1.AIFFParser();\n\n      case 'adts':\n      case 'mpeg':\n        return new MpegParser_1.MpegParser();\n\n      case 'apev2':\n        return new APEv2Parser_1.APEv2Parser();\n\n      case 'asf':\n        return new AsfParser_1.AsfParser();\n\n      case 'dsf':\n        return new DsfParser_1.DsfParser();\n\n      case 'dsdiff':\n        return new DsdiffParser_1.DsdiffParser();\n\n      case 'flac':\n        return new FlacParser_1.FlacParser();\n\n      case 'mp4':\n        return new MP4Parser_1.MP4Parser();\n\n      case 'musepack':\n        return new musepack_1.default();\n\n      case 'ogg':\n        return new OggParser_1.OggParser();\n\n      case 'riff':\n        return new WaveParser_1.WaveParser();\n\n      case 'wavpack':\n        return new WavPackParser_1.WavPackParser();\n\n      case 'matroska':\n        return new MatroskaParser_1.MatroskaParser();\n\n      default:\n        throw new Error(`Unknown parser type: ${moduleName}`);\n    }\n  }\n\n  static async _parse(tokenizer, parserId, opts = {}) {\n    // Parser found, execute parser\n    const parser = await ParserFactory.loadParser(parserId);\n    const metadata = new MetadataCollector_1.MetadataCollector(opts);\n    await parser.init(metadata, tokenizer, opts).parse();\n    return metadata.toCommonMetadata();\n  }\n\n  static getExtension(fname) {\n    const i = fname.lastIndexOf('.');\n    return i === -1 ? '' : fname.slice(i);\n  }\n  /**\r\n   * @param httpContentType - HTTP Content-Type, extension, path or filename\r\n   * @returns Parser sub-module name\r\n   */\n\n\n  static getParserIdForMimeType(httpContentType) {\n    let mime;\n\n    try {\n      mime = parseHttpContentType(httpContentType);\n    } catch (err) {\n      debug(`Invalid HTTP Content-Type header value: ${httpContentType}`);\n      return;\n    }\n\n    const subType = mime.subtype.indexOf('x-') === 0 ? mime.subtype.substring(2) : mime.subtype;\n\n    switch (mime.type) {\n      case 'audio':\n        switch (subType) {\n          case 'mp3': // Incorrect MIME-type, Chrome, in Web API File object\n\n          case 'mpeg':\n            return 'mpeg';\n\n          case 'aac':\n          case 'aacp':\n            return 'adts';\n\n          case 'flac':\n            return 'flac';\n\n          case 'ape':\n          case 'monkeys-audio':\n            return 'apev2';\n\n          case 'mp4':\n          case 'm4a':\n            return 'mp4';\n\n          case 'ogg': // RFC 7845\n\n          case 'opus': // RFC 6716\n\n          case 'speex':\n            // RFC 5574\n            return 'ogg';\n\n          case 'ms-wma':\n          case 'ms-wmv':\n          case 'ms-asf':\n            return 'asf';\n\n          case 'aiff':\n          case 'aif':\n          case 'aifc':\n            return 'aiff';\n\n          case 'vnd.wave':\n          case 'wav':\n          case 'wave':\n            return 'riff';\n\n          case 'wavpack':\n            return 'wavpack';\n\n          case 'musepack':\n            return 'musepack';\n\n          case 'matroska':\n          case 'webm':\n            return 'matroska';\n\n          case 'dsf':\n            return 'dsf';\n        }\n\n        break;\n\n      case 'video':\n        switch (subType) {\n          case 'ms-asf':\n          case 'ms-wmv':\n            return 'asf';\n\n          case 'm4v':\n          case 'mp4':\n            return 'mp4';\n\n          case 'ogg':\n            return 'ogg';\n\n          case 'matroska':\n          case 'webm':\n            return 'matroska';\n        }\n\n        break;\n\n      case 'application':\n        switch (subType) {\n          case 'vnd.ms-asf':\n            return 'asf';\n\n          case 'ogg':\n            return 'ogg';\n        }\n\n        break;\n    }\n  }\n\n}\n\nexports.ParserFactory = ParserFactory;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/music-metadata/lib/ParserFactory.js"],"names":["Object","defineProperty","exports","value","ParserFactory","parseHttpContentType","FileType","require","ContentType","MimeType","_debug","MetadataCollector_1","AiffParser_1","APEv2Parser_1","AsfParser_1","FlacParser_1","MP4Parser_1","MpegParser_1","musepack_1","OggParser_1","WaveParser_1","WavPackParser_1","DsfParser_1","DsdiffParser_1","MatroskaParser_1","debug","contentType","type","parse","mime","subtype","suffix","parameters","parseOnContentType","tokenizer","opts","mimeType","path","url","fileInfo","parserId","getParserIdForMimeType","getParserIdForExtension","buf","Buffer","alloc","peekBuffer","mayBeLess","guessedType","fromBuffer","Error","ext","_parse","filePath","extension","getExtension","toLocaleLowerCase","loadParser","moduleName","AIFFParser","MpegParser","APEv2Parser","AsfParser","DsfParser","DsdiffParser","FlacParser","MP4Parser","default","OggParser","WaveParser","WavPackParser","MatroskaParser","parser","metadata","MetadataCollector","init","toCommonMetadata","fname","i","lastIndexOf","slice","httpContentType","err","subType","indexOf","substring"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ParserFactory = exports.parseHttpContentType = void 0;\r\nconst FileType = require(\"file-type/core\");\r\nconst ContentType = require(\"content-type\");\r\nconst MimeType = require(\"media-typer\");\r\nconst _debug = require(\"debug\");\r\nconst MetadataCollector_1 = require(\"./common/MetadataCollector\");\r\nconst AiffParser_1 = require(\"./aiff/AiffParser\");\r\nconst APEv2Parser_1 = require(\"./apev2/APEv2Parser\");\r\nconst AsfParser_1 = require(\"./asf/AsfParser\");\r\nconst FlacParser_1 = require(\"./flac/FlacParser\");\r\nconst MP4Parser_1 = require(\"./mp4/MP4Parser\");\r\nconst MpegParser_1 = require(\"./mpeg/MpegParser\");\r\nconst musepack_1 = require(\"./musepack\");\r\nconst OggParser_1 = require(\"./ogg/OggParser\");\r\nconst WaveParser_1 = require(\"./wav/WaveParser\");\r\nconst WavPackParser_1 = require(\"./wavpack/WavPackParser\");\r\nconst DsfParser_1 = require(\"./dsf/DsfParser\");\r\nconst DsdiffParser_1 = require(\"./dsdiff/DsdiffParser\");\r\nconst MatroskaParser_1 = require(\"./matroska/MatroskaParser\");\r\nconst debug = _debug('music-metadata:parser:factory');\r\nfunction parseHttpContentType(contentType) {\r\n    const type = ContentType.parse(contentType);\r\n    const mime = MimeType.parse(type.type);\r\n    return {\r\n        type: mime.type,\r\n        subtype: mime.subtype,\r\n        suffix: mime.suffix,\r\n        parameters: type.parameters\r\n    };\r\n}\r\nexports.parseHttpContentType = parseHttpContentType;\r\nclass ParserFactory {\r\n    /**\r\n     * Parse metadata from tokenizer\r\n     * @param tokenizer - Tokenizer\r\n     * @param contentType - MIME-type\r\n     * @param opts - Options\r\n     * @returns Native metadata\r\n     */\r\n    static async parseOnContentType(tokenizer, opts) {\r\n        const { mimeType, path, url } = await tokenizer.fileInfo;\r\n        // Resolve parser based on MIME-type or file extension\r\n        const parserId = ParserFactory.getParserIdForMimeType(mimeType) || ParserFactory.getParserIdForExtension(path) || ParserFactory.getParserIdForExtension(url);\r\n        if (!parserId) {\r\n            debug('No parser found for MIME-type / extension: ' + mimeType);\r\n        }\r\n        return this.parse(tokenizer, parserId, opts);\r\n    }\r\n    static async parse(tokenizer, parserId, opts) {\r\n        if (!parserId) {\r\n            // Parser could not be determined on MIME-type or extension\r\n            debug('Guess parser on content...');\r\n            const buf = Buffer.alloc(4100);\r\n            await tokenizer.peekBuffer(buf, { mayBeLess: true });\r\n            if (tokenizer.fileInfo.path) {\r\n                parserId = this.getParserIdForExtension(tokenizer.fileInfo.path);\r\n            }\r\n            if (!parserId) {\r\n                const guessedType = await FileType.fromBuffer(buf);\r\n                if (!guessedType) {\r\n                    throw new Error('Failed to determine audio format');\r\n                }\r\n                debug(`Guessed file type is mime=${guessedType.mime}, extension=${guessedType.ext}`);\r\n                parserId = ParserFactory.getParserIdForMimeType(guessedType.mime);\r\n                if (!parserId) {\r\n                    throw new Error('Guessed MIME-type not supported: ' + guessedType.mime);\r\n                }\r\n            }\r\n        }\r\n        // Parser found, execute parser\r\n        return this._parse(tokenizer, parserId, opts);\r\n    }\r\n    /**\r\n     * @param filePath - Path, filename or extension to audio file\r\n     * @return Parser sub-module name\r\n     */\r\n    static getParserIdForExtension(filePath) {\r\n        if (!filePath)\r\n            return;\r\n        const extension = this.getExtension(filePath).toLocaleLowerCase() || filePath;\r\n        switch (extension) {\r\n            case '.mp2':\r\n            case '.mp3':\r\n            case '.m2a':\r\n            case '.aac': // Assume it is ADTS-container\r\n                return 'mpeg';\r\n            case '.ape':\r\n                return 'apev2';\r\n            case '.mp4':\r\n            case '.m4a':\r\n            case '.m4b':\r\n            case '.m4pa':\r\n            case '.m4v':\r\n            case '.m4r':\r\n            case '.3gp':\r\n                return 'mp4';\r\n            case '.wma':\r\n            case '.wmv':\r\n            case '.asf':\r\n                return 'asf';\r\n            case '.flac':\r\n                return 'flac';\r\n            case '.ogg':\r\n            case '.ogv':\r\n            case '.oga':\r\n            case '.ogm':\r\n            case '.ogx':\r\n            case '.opus': // recommended filename extension for Ogg Opus\r\n            case '.spx': // recommended filename extension for Ogg Speex\r\n                return 'ogg';\r\n            case '.aif':\r\n            case '.aiff':\r\n            case '.aifc':\r\n                return 'aiff';\r\n            case '.wav':\r\n                return 'riff';\r\n            case '.wv':\r\n            case '.wvp':\r\n                return 'wavpack';\r\n            case '.mpc':\r\n                return 'musepack';\r\n            case '.dsf':\r\n                return 'dsf';\r\n            case '.dff':\r\n                return 'dsdiff';\r\n            case '.mka':\r\n            case '.mkv':\r\n            case '.mk3d':\r\n            case '.mks':\r\n            case '.webm':\r\n                return 'matroska';\r\n        }\r\n    }\r\n    static async loadParser(moduleName) {\r\n        switch (moduleName) {\r\n            case 'aiff': return new AiffParser_1.AIFFParser();\r\n            case 'adts':\r\n            case 'mpeg':\r\n                return new MpegParser_1.MpegParser();\r\n            case 'apev2': return new APEv2Parser_1.APEv2Parser();\r\n            case 'asf': return new AsfParser_1.AsfParser();\r\n            case 'dsf': return new DsfParser_1.DsfParser();\r\n            case 'dsdiff': return new DsdiffParser_1.DsdiffParser();\r\n            case 'flac': return new FlacParser_1.FlacParser();\r\n            case 'mp4': return new MP4Parser_1.MP4Parser();\r\n            case 'musepack': return new musepack_1.default();\r\n            case 'ogg': return new OggParser_1.OggParser();\r\n            case 'riff': return new WaveParser_1.WaveParser();\r\n            case 'wavpack': return new WavPackParser_1.WavPackParser();\r\n            case 'matroska': return new MatroskaParser_1.MatroskaParser();\r\n            default:\r\n                throw new Error(`Unknown parser type: ${moduleName}`);\r\n        }\r\n    }\r\n    static async _parse(tokenizer, parserId, opts = {}) {\r\n        // Parser found, execute parser\r\n        const parser = await ParserFactory.loadParser(parserId);\r\n        const metadata = new MetadataCollector_1.MetadataCollector(opts);\r\n        await parser.init(metadata, tokenizer, opts).parse();\r\n        return metadata.toCommonMetadata();\r\n    }\r\n    static getExtension(fname) {\r\n        const i = fname.lastIndexOf('.');\r\n        return i === -1 ? '' : fname.slice(i);\r\n    }\r\n    /**\r\n     * @param httpContentType - HTTP Content-Type, extension, path or filename\r\n     * @returns Parser sub-module name\r\n     */\r\n    static getParserIdForMimeType(httpContentType) {\r\n        let mime;\r\n        try {\r\n            mime = parseHttpContentType(httpContentType);\r\n        }\r\n        catch (err) {\r\n            debug(`Invalid HTTP Content-Type header value: ${httpContentType}`);\r\n            return;\r\n        }\r\n        const subType = mime.subtype.indexOf('x-') === 0 ? mime.subtype.substring(2) : mime.subtype;\r\n        switch (mime.type) {\r\n            case 'audio':\r\n                switch (subType) {\r\n                    case 'mp3': // Incorrect MIME-type, Chrome, in Web API File object\r\n                    case 'mpeg':\r\n                        return 'mpeg';\r\n                    case 'aac':\r\n                    case 'aacp':\r\n                        return 'adts';\r\n                    case 'flac':\r\n                        return 'flac';\r\n                    case 'ape':\r\n                    case 'monkeys-audio':\r\n                        return 'apev2';\r\n                    case 'mp4':\r\n                    case 'm4a':\r\n                        return 'mp4';\r\n                    case 'ogg': // RFC 7845\r\n                    case 'opus': // RFC 6716\r\n                    case 'speex': // RFC 5574\r\n                        return 'ogg';\r\n                    case 'ms-wma':\r\n                    case 'ms-wmv':\r\n                    case 'ms-asf':\r\n                        return 'asf';\r\n                    case 'aiff':\r\n                    case 'aif':\r\n                    case 'aifc':\r\n                        return 'aiff';\r\n                    case 'vnd.wave':\r\n                    case 'wav':\r\n                    case 'wave':\r\n                        return 'riff';\r\n                    case 'wavpack':\r\n                        return 'wavpack';\r\n                    case 'musepack':\r\n                        return 'musepack';\r\n                    case 'matroska':\r\n                    case 'webm':\r\n                        return 'matroska';\r\n                    case 'dsf':\r\n                        return 'dsf';\r\n                }\r\n                break;\r\n            case 'video':\r\n                switch (subType) {\r\n                    case 'ms-asf':\r\n                    case 'ms-wmv':\r\n                        return 'asf';\r\n                    case 'm4v':\r\n                    case 'mp4':\r\n                        return 'mp4';\r\n                    case 'ogg':\r\n                        return 'ogg';\r\n                    case 'matroska':\r\n                    case 'webm':\r\n                        return 'matroska';\r\n                }\r\n                break;\r\n            case 'application':\r\n                switch (subType) {\r\n                    case 'vnd.ms-asf':\r\n                        return 'asf';\r\n                    case 'ogg':\r\n                        return 'ogg';\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\nexports.ParserFactory = ParserFactory;\r\n"]},"metadata":{},"sourceType":"script"}