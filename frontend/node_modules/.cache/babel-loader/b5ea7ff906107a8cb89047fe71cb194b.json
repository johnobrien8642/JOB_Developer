{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeIntBE = exports.readIntBE = exports.writeUIntBE = exports.readUIntBE = exports.writeIntLE = exports.AnsiStringType = exports.StringType = exports.BufferType = exports.IgnoreType = exports.Float80_LE = exports.Float80_BE = exports.Float64_LE = exports.Float64_BE = exports.Float32_LE = exports.Float32_BE = exports.Float16_LE = exports.Float16_BE = exports.INT64_BE = exports.UINT64_BE = exports.INT64_LE = exports.UINT64_LE = exports.INT32_LE = exports.INT32_BE = exports.INT24_BE = exports.INT24_LE = exports.INT16_LE = exports.INT16_BE = exports.INT8 = exports.UINT32_BE = exports.UINT32_LE = exports.UINT24_BE = exports.UINT24_LE = exports.UINT16_BE = exports.UINT16_LE = exports.UINT8 = void 0;\n\nconst ieee754 = require(\"ieee754\"); // Primitive types\n\n/**\n * 8-bit unsigned integer\n */\n\n\nexports.UINT8 = {\n  len: 1,\n\n  get(buf, off) {\n    return buf.readUInt8(off);\n  },\n\n  put(buf, off, v) {\n    return buf.writeUInt8(v, off);\n  }\n\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT16_LE = {\n  len: 2,\n\n  get(buf, off) {\n    return buf.readUInt16LE(off);\n  },\n\n  put(buf, off, v) {\n    return buf.writeUInt16LE(v, off);\n  }\n\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT16_BE = {\n  len: 2,\n\n  get(buf, off) {\n    return buf.readUInt16BE(off);\n  },\n\n  put(buf, off, v) {\n    return buf.writeUInt16BE(v, off);\n  }\n\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT24_LE = {\n  len: 3,\n\n  get(buf, off) {\n    return buf.readUIntLE(off, 3);\n  },\n\n  put(buf, off, v) {\n    return buf.writeUIntLE(v, off, 3);\n  }\n\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT24_BE = {\n  len: 3,\n\n  get(buf, off) {\n    return buf.readUIntBE(off, 3);\n  },\n\n  put(buf, off, v) {\n    return buf.writeUIntBE(v, off, 3);\n  }\n\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT32_LE = {\n  len: 4,\n\n  get(buf, off) {\n    return buf.readUInt32LE(off);\n  },\n\n  put(b, o, v) {\n    return b.writeUInt32LE(v, o);\n  }\n\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT32_BE = {\n  len: 4,\n\n  get(buf, off) {\n    return buf.readUInt32BE(off);\n  },\n\n  put(buf, off, v) {\n    return buf.writeUInt32BE(v, off);\n  }\n\n};\n/**\n * 8-bit signed integer\n */\n\nexports.INT8 = {\n  len: 1,\n\n  get(buf, off) {\n    return buf.readInt8(off);\n  },\n\n  put(buf, off, v) {\n    return buf.writeInt8(v, off);\n  }\n\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\n\nexports.INT16_BE = {\n  len: 2,\n\n  get(buf, off) {\n    return buf.readInt16BE(off);\n  },\n\n  put(b, o, v) {\n    return b.writeInt16BE(v, o);\n  }\n\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\n\nexports.INT16_LE = {\n  len: 2,\n\n  get(buf, off) {\n    return buf.readInt16LE(off);\n  },\n\n  put(b, o, v) {\n    return b.writeInt16LE(v, o);\n  }\n\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\n\nexports.INT24_LE = {\n  len: 3,\n\n  get(buf, off) {\n    return buf.readIntLE(off, 3);\n  },\n\n  put(b, o, v) {\n    return b.writeIntLE(v, o, 3);\n  }\n\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\n\nexports.INT24_BE = {\n  len: 3,\n\n  get(buf, off) {\n    return buf.readIntBE(off, 3);\n  },\n\n  put(b, o, v) {\n    return b.writeIntBE(v, o, 3);\n  }\n\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\n\nexports.INT32_BE = {\n  len: 4,\n\n  get(buf, off) {\n    return buf.readInt32BE(off);\n  },\n\n  put(b, o, v) {\n    return b.writeInt32BE(v, o);\n  }\n\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\n\nexports.INT32_LE = {\n  len: 4,\n\n  get(buf, off) {\n    return buf.readInt32LE(off);\n  },\n\n  put(b, o, v) {\n    return b.writeInt32LE(v, o);\n  }\n\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT64_LE = {\n  len: 8,\n\n  get(buf, off) {\n    return readUIntLE(buf, off, this.len);\n  },\n\n  put(b, o, v) {\n    return writeUIntLE(b, v, o, this.len);\n  }\n\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\n\nexports.INT64_LE = {\n  len: 8,\n\n  get(buf, off) {\n    return readIntLE(buf, off, this.len);\n  },\n\n  put(b, off, v) {\n    return writeIntLE(b, v, off, this.len);\n  }\n\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT64_BE = {\n  len: 8,\n\n  get(b, off) {\n    return readUIntBE(b, off, this.len);\n  },\n\n  put(b, o, v) {\n    return writeUIntBE(b, v, o, this.len);\n  }\n\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\n\nexports.INT64_BE = {\n  len: 8,\n\n  get(b, off) {\n    return readIntBE(b, off, this.len);\n  },\n\n  put(b, off, v) {\n    return writeIntBE(b, v, off, this.len);\n  }\n\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\n\nexports.Float16_BE = {\n  len: 2,\n\n  get(b, off) {\n    return ieee754.read(b, off, false, 10, this.len);\n  },\n\n  put(b, off, v) {\n    ieee754.write(b, v, off, false, 10, this.len);\n    return off + this.len;\n  }\n\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\n\nexports.Float16_LE = {\n  len: 2,\n\n  get(b, off) {\n    return ieee754.read(b, off, true, 10, this.len);\n  },\n\n  put(b, off, v) {\n    ieee754.write(b, v, off, true, 10, this.len);\n    return off + this.len;\n  }\n\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\n\nexports.Float32_BE = {\n  len: 4,\n\n  get(b, off) {\n    return b.readFloatBE(off);\n  },\n\n  put(b, off, v) {\n    return b.writeFloatBE(v, off);\n  }\n\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\n\nexports.Float32_LE = {\n  len: 4,\n\n  get(b, off) {\n    return b.readFloatLE(off);\n  },\n\n  put(b, off, v) {\n    return b.writeFloatLE(v, off);\n  }\n\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\n\nexports.Float64_BE = {\n  len: 8,\n\n  get(b, off) {\n    return b.readDoubleBE(off);\n  },\n\n  put(b, off, v) {\n    return b.writeDoubleBE(v, off);\n  }\n\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\n\nexports.Float64_LE = {\n  len: 8,\n\n  get(b, off) {\n    return b.readDoubleLE(off);\n  },\n\n  put(b, off, v) {\n    return b.writeDoubleLE(v, off);\n  }\n\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\n\nexports.Float80_BE = {\n  len: 10,\n\n  get(b, off) {\n    return ieee754.read(b, off, false, 63, this.len);\n  },\n\n  put(b, off, v) {\n    ieee754.write(b, v, off, false, 63, this.len);\n    return off + this.len;\n  }\n\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\n\nexports.Float80_LE = {\n  len: 10,\n\n  get(b, off) {\n    return ieee754.read(b, off, true, 63, this.len);\n  },\n\n  put(b, off, v) {\n    ieee754.write(b, v, off, true, 63, this.len);\n    return off + this.len;\n  }\n\n};\n/**\n * Ignore a given number of bytes\n */\n\nclass IgnoreType {\n  /**\n   * @param len number of bytes to ignore\n   */\n  constructor(len) {\n    this.len = len;\n  } // ToDo: don't read, but skip data\n\n\n  get(buf, off) {}\n\n}\n\nexports.IgnoreType = IgnoreType;\n\nclass BufferType {\n  constructor(len) {\n    this.len = len;\n  }\n\n  get(buf, off) {\n    return buf.slice(off, off + this.len);\n  }\n\n}\n\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\n\nclass StringType {\n  constructor(len, encoding) {\n    this.len = len;\n    this.encoding = encoding;\n  }\n\n  get(buf, off) {\n    return buf.toString(this.encoding, off, off + this.len);\n  }\n\n}\n\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\n\nclass AnsiStringType {\n  constructor(len) {\n    this.len = len;\n  }\n\n  static decode(buffer, off, until) {\n    let str = '';\n\n    for (let i = off; i < until; ++i) {\n      str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n    }\n\n    return str;\n  }\n\n  static inRange(a, min, max) {\n    return min <= a && a <= max;\n  }\n\n  static codePointToString(cp) {\n    if (cp <= 0xFFFF) {\n      return String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n    }\n  }\n\n  static singleByteDecoder(bite) {\n    if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n      return bite;\n    }\n\n    const codePoint = AnsiStringType.windows1252[bite - 0x80];\n\n    if (codePoint === null) {\n      throw Error('invaliding encoding');\n    }\n\n    return codePoint;\n  }\n\n  get(buf, off = 0) {\n    return AnsiStringType.decode(buf, off, off + this.len);\n  }\n\n}\n\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255];\n/**\n * Best effort approach to read up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction readUIntLE(buf, offset, byteLength) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let val = buf[offset];\n  let mul = 1;\n  let i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += buf[offset + i] * mul;\n  }\n\n  return val;\n}\n/**\n * Best effort approach to write up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\n\nfunction writeUIntLE(buf, value, offset, byteLength) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let mul = 1;\n  let i = 0;\n  buf[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    buf[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n}\n/**\n * Best effort approach to read 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\n\nfunction readIntLE(buf, offset, byteLength) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let val = buf[offset];\n  let mul = 1;\n  let i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += buf[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n}\n/**\n * Best effort approach to write 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\n\nfunction writeIntLE(buf, value, offset, byteLength) {\n  value = +value;\n  offset = offset >>> 0;\n  let i = 0;\n  let mul = 1;\n  let sub = 0;\n  buf[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && buf[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    buf[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n}\n\nexports.writeIntLE = writeIntLE;\n/**\n * Best effort approach to read up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction readUIntBE(buf, offset, byteLength) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let val = buf[offset + --byteLength];\n  let mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += buf[offset + --byteLength] * mul;\n  }\n\n  return val;\n}\n\nexports.readUIntBE = readUIntBE;\n/**\n * Best effort approach to write up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction writeUIntBE(buf, value, offset, byteLength) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let i = byteLength - 1;\n  let mul = 1;\n  buf[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    buf[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n}\n\nexports.writeUIntBE = writeUIntBE;\n/**\n * Best effort approach to read 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction readIntBE(buf, offset, byteLength) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let i = byteLength;\n  let mul = 1;\n  let val = buf[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += buf[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n}\n\nexports.readIntBE = readIntBE;\n/**\n * Best effort approach to write 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction writeIntBE(buf, value, offset, byteLength) {\n  value = +value;\n  offset = offset >>> 0;\n  let i = byteLength - 1;\n  let mul = 1;\n  let sub = 0;\n  buf[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && buf[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    buf[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n}\n\nexports.writeIntBE = writeIntBE;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/token-types/lib/index.js"],"names":["Object","defineProperty","exports","value","writeIntBE","readIntBE","writeUIntBE","readUIntBE","writeIntLE","AnsiStringType","StringType","BufferType","IgnoreType","Float80_LE","Float80_BE","Float64_LE","Float64_BE","Float32_LE","Float32_BE","Float16_LE","Float16_BE","INT64_BE","UINT64_BE","INT64_LE","UINT64_LE","INT32_LE","INT32_BE","INT24_BE","INT24_LE","INT16_LE","INT16_BE","INT8","UINT32_BE","UINT32_LE","UINT24_BE","UINT24_LE","UINT16_BE","UINT16_LE","UINT8","ieee754","require","len","get","buf","off","readUInt8","put","v","writeUInt8","readUInt16LE","writeUInt16LE","readUInt16BE","writeUInt16BE","readUIntLE","writeUIntLE","readUInt32LE","b","o","writeUInt32LE","readUInt32BE","writeUInt32BE","readInt8","writeInt8","readInt16BE","writeInt16BE","readInt16LE","writeInt16LE","readIntLE","readInt32BE","writeInt32BE","readInt32LE","writeInt32LE","read","write","readFloatBE","writeFloatBE","readFloatLE","writeFloatLE","readDoubleBE","writeDoubleBE","readDoubleLE","writeDoubleLE","constructor","slice","encoding","toString","decode","buffer","until","str","i","codePointToString","singleByteDecoder","inRange","a","min","max","cp","String","fromCharCode","bite","codePoint","windows1252","Error","offset","byteLength","val","mul","Math","pow","sub"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.writeIntBE = exports.readIntBE = exports.writeUIntBE = exports.readUIntBE = exports.writeIntLE = exports.AnsiStringType = exports.StringType = exports.BufferType = exports.IgnoreType = exports.Float80_LE = exports.Float80_BE = exports.Float64_LE = exports.Float64_BE = exports.Float32_LE = exports.Float32_BE = exports.Float16_LE = exports.Float16_BE = exports.INT64_BE = exports.UINT64_BE = exports.INT64_LE = exports.UINT64_LE = exports.INT32_LE = exports.INT32_BE = exports.INT24_BE = exports.INT24_LE = exports.INT16_LE = exports.INT16_BE = exports.INT8 = exports.UINT32_BE = exports.UINT32_LE = exports.UINT24_BE = exports.UINT24_LE = exports.UINT16_BE = exports.UINT16_LE = exports.UINT8 = void 0;\nconst ieee754 = require(\"ieee754\");\n// Primitive types\n/**\n * 8-bit unsigned integer\n */\nexports.UINT8 = {\n    len: 1,\n    get(buf, off) {\n        return buf.readUInt8(off);\n    },\n    put(buf, off, v) {\n        return buf.writeUInt8(v, off);\n    }\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\nexports.UINT16_LE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readUInt16LE(off);\n    },\n    put(buf, off, v) {\n        return buf.writeUInt16LE(v, off);\n    }\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\nexports.UINT16_BE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readUInt16BE(off);\n    },\n    put(buf, off, v) {\n        return buf.writeUInt16BE(v, off);\n    }\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\nexports.UINT24_LE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readUIntLE(off, 3);\n    },\n    put(buf, off, v) {\n        return buf.writeUIntLE(v, off, 3);\n    }\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\nexports.UINT24_BE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readUIntBE(off, 3);\n    },\n    put(buf, off, v) {\n        return buf.writeUIntBE(v, off, 3);\n    }\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\nexports.UINT32_LE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readUInt32LE(off);\n    },\n    put(b, o, v) {\n        return b.writeUInt32LE(v, o);\n    }\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\nexports.UINT32_BE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readUInt32BE(off);\n    },\n    put(buf, off, v) {\n        return buf.writeUInt32BE(v, off);\n    }\n};\n/**\n * 8-bit signed integer\n */\nexports.INT8 = {\n    len: 1,\n    get(buf, off) {\n        return buf.readInt8(off);\n    },\n    put(buf, off, v) {\n        return buf.writeInt8(v, off);\n    }\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\nexports.INT16_BE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readInt16BE(off);\n    },\n    put(b, o, v) {\n        return b.writeInt16BE(v, o);\n    }\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\nexports.INT16_LE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readInt16LE(off);\n    },\n    put(b, o, v) {\n        return b.writeInt16LE(v, o);\n    }\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\nexports.INT24_LE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readIntLE(off, 3);\n    },\n    put(b, o, v) {\n        return b.writeIntLE(v, o, 3);\n    }\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\nexports.INT24_BE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readIntBE(off, 3);\n    },\n    put(b, o, v) {\n        return b.writeIntBE(v, o, 3);\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_BE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readInt32BE(off);\n    },\n    put(b, o, v) {\n        return b.writeInt32BE(v, o);\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_LE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readInt32LE(off);\n    },\n    put(b, o, v) {\n        return b.writeInt32LE(v, o);\n    }\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\nexports.UINT64_LE = {\n    len: 8,\n    get(buf, off) {\n        return readUIntLE(buf, off, this.len);\n    },\n    put(b, o, v) {\n        return writeUIntLE(b, v, o, this.len);\n    }\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\nexports.INT64_LE = {\n    len: 8,\n    get(buf, off) {\n        return readIntLE(buf, off, this.len);\n    },\n    put(b, off, v) {\n        return writeIntLE(b, v, off, this.len);\n    }\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\nexports.UINT64_BE = {\n    len: 8,\n    get(b, off) {\n        return readUIntBE(b, off, this.len);\n    },\n    put(b, o, v) {\n        return writeUIntBE(b, v, o, this.len);\n    }\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\nexports.INT64_BE = {\n    len: 8,\n    get(b, off) {\n        return readIntBE(b, off, this.len);\n    },\n    put(b, off, v) {\n        return writeIntBE(b, v, off, this.len);\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\nexports.Float16_BE = {\n    len: 2,\n    get(b, off) {\n        return ieee754.read(b, off, false, 10, this.len);\n    },\n    put(b, off, v) {\n        ieee754.write(b, v, off, false, 10, this.len);\n        return off + this.len;\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\nexports.Float16_LE = {\n    len: 2,\n    get(b, off) {\n        return ieee754.read(b, off, true, 10, this.len);\n    },\n    put(b, off, v) {\n        ieee754.write(b, v, off, true, 10, this.len);\n        return off + this.len;\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\nexports.Float32_BE = {\n    len: 4,\n    get(b, off) {\n        return b.readFloatBE(off);\n    },\n    put(b, off, v) {\n        return b.writeFloatBE(v, off);\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\nexports.Float32_LE = {\n    len: 4,\n    get(b, off) {\n        return b.readFloatLE(off);\n    },\n    put(b, off, v) {\n        return b.writeFloatLE(v, off);\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\nexports.Float64_BE = {\n    len: 8,\n    get(b, off) {\n        return b.readDoubleBE(off);\n    },\n    put(b, off, v) {\n        return b.writeDoubleBE(v, off);\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\nexports.Float64_LE = {\n    len: 8,\n    get(b, off) {\n        return b.readDoubleLE(off);\n    },\n    put(b, off, v) {\n        return b.writeDoubleLE(v, off);\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\nexports.Float80_BE = {\n    len: 10,\n    get(b, off) {\n        return ieee754.read(b, off, false, 63, this.len);\n    },\n    put(b, off, v) {\n        ieee754.write(b, v, off, false, 63, this.len);\n        return off + this.len;\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\nexports.Float80_LE = {\n    len: 10,\n    get(b, off) {\n        return ieee754.read(b, off, true, 63, this.len);\n    },\n    put(b, off, v) {\n        ieee754.write(b, v, off, true, 63, this.len);\n        return off + this.len;\n    }\n};\n/**\n * Ignore a given number of bytes\n */\nclass IgnoreType {\n    /**\n     * @param len number of bytes to ignore\n     */\n    constructor(len) {\n        this.len = len;\n    }\n    // ToDo: don't read, but skip data\n    get(buf, off) {\n    }\n}\nexports.IgnoreType = IgnoreType;\nclass BufferType {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return buf.slice(off, off + this.len);\n    }\n}\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\nclass StringType {\n    constructor(len, encoding) {\n        this.len = len;\n        this.encoding = encoding;\n    }\n    get(buf, off) {\n        return buf.toString(this.encoding, off, off + this.len);\n    }\n}\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\nclass AnsiStringType {\n    constructor(len) {\n        this.len = len;\n    }\n    static decode(buffer, off, until) {\n        let str = '';\n        for (let i = off; i < until; ++i) {\n            str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n        }\n        return str;\n    }\n    static inRange(a, min, max) {\n        return min <= a && a <= max;\n    }\n    static codePointToString(cp) {\n        if (cp <= 0xFFFF) {\n            return String.fromCharCode(cp);\n        }\n        else {\n            cp -= 0x10000;\n            return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n        }\n    }\n    static singleByteDecoder(bite) {\n        if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n            return bite;\n        }\n        const codePoint = AnsiStringType.windows1252[bite - 0x80];\n        if (codePoint === null) {\n            throw Error('invaliding encoding');\n        }\n        return codePoint;\n    }\n    get(buf, off = 0) {\n        return AnsiStringType.decode(buf, off, off + this.len);\n    }\n}\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352,\n    8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732,\n    8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\n    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\n    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255];\n/**\n * Best effort approach to read up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readUIntLE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let val = buf[offset];\n    let mul = 1;\n    let i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += buf[offset + i] * mul;\n    }\n    return val;\n}\n/**\n * Best effort approach to write up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeUIntLE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let mul = 1;\n    let i = 0;\n    buf[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n        buf[offset + i] = (value / mul) & 0xFF;\n    }\n    return offset + byteLength;\n}\n/**\n * Best effort approach to read 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readIntLE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let val = buf[offset];\n    let mul = 1;\n    let i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += buf[offset + i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength);\n    return val;\n}\n/**\n * Best effort approach to write 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeIntLE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    let i = 0;\n    let mul = 1;\n    let sub = 0;\n    buf[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && buf[offset + i - 1] !== 0) {\n            sub = 1;\n        }\n        buf[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n}\nexports.writeIntLE = writeIntLE;\n/**\n * Best effort approach to read up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readUIntBE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let val = buf[offset + --byteLength];\n    let mul = 1;\n    while (byteLength > 0 && (mul *= 0x100)) {\n        val += buf[offset + --byteLength] * mul;\n    }\n    return val;\n}\nexports.readUIntBE = readUIntBE;\n/**\n * Best effort approach to write up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeUIntBE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let i = byteLength - 1;\n    let mul = 1;\n    buf[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n        buf[offset + i] = (value / mul) & 0xFF;\n    }\n    return offset + byteLength;\n}\nexports.writeUIntBE = writeUIntBE;\n/**\n * Best effort approach to read 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readIntBE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let i = byteLength;\n    let mul = 1;\n    let val = buf[offset + --i];\n    while (i > 0 && (mul *= 0x100)) {\n        val += buf[offset + --i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength);\n    return val;\n}\nexports.readIntBE = readIntBE;\n/**\n * Best effort approach to write 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeIntBE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    let i = byteLength - 1;\n    let mul = 1;\n    let sub = 0;\n    buf[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && buf[offset + i + 1] !== 0) {\n            sub = 1;\n        }\n        buf[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n}\nexports.writeIntBE = writeIntBE;\n"]},"metadata":{},"sourceType":"script"}