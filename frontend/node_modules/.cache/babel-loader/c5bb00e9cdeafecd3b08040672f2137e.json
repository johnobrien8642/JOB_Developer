{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CombinedTagMapper = void 0;\n\nconst ID3v1TagMap_1 = require(\"../id3v1/ID3v1TagMap\");\n\nconst ID3v24TagMapper_1 = require(\"../id3v2/ID3v24TagMapper\");\n\nconst AsfTagMapper_1 = require(\"../asf/AsfTagMapper\");\n\nconst ID3v22TagMapper_1 = require(\"../id3v2/ID3v22TagMapper\");\n\nconst APEv2TagMapper_1 = require(\"../apev2/APEv2TagMapper\");\n\nconst MP4TagMapper_1 = require(\"../mp4/MP4TagMapper\");\n\nconst VorbisTagMapper_1 = require(\"../ogg/vorbis/VorbisTagMapper\");\n\nconst RiffInfoTagMap_1 = require(\"../riff/RiffInfoTagMap\");\n\nconst MatroskaTagMapper_1 = require(\"../matroska/MatroskaTagMapper\");\n\nclass CombinedTagMapper {\n  constructor() {\n    this.tagMappers = {};\n    [new ID3v1TagMap_1.ID3v1TagMapper(), new ID3v22TagMapper_1.ID3v22TagMapper(), new ID3v24TagMapper_1.ID3v24TagMapper(), new MP4TagMapper_1.MP4TagMapper(), new MP4TagMapper_1.MP4TagMapper(), new VorbisTagMapper_1.VorbisTagMapper(), new APEv2TagMapper_1.APEv2TagMapper(), new AsfTagMapper_1.AsfTagMapper(), new RiffInfoTagMap_1.RiffInfoTagMapper(), new MatroskaTagMapper_1.MatroskaTagMapper()].forEach(mapper => {\n      this.registerTagMapper(mapper);\n    });\n  }\n  /**\r\n   * Convert native to generic (common) tags\r\n   * @param tagType Originating tag format\r\n   * @param tag     Native tag to map to a generic tag id\r\n   * @param warnings\r\n   * @return Generic tag result (output of this function)\r\n   */\n\n\n  mapTag(tagType, tag, warnings) {\n    const tagMapper = this.tagMappers[tagType];\n\n    if (tagMapper) {\n      return this.tagMappers[tagType].mapGenericTag(tag, warnings);\n    }\n\n    throw new Error(\"No generic tag mapper defined for tag-format: \" + tagType);\n  }\n\n  registerTagMapper(genericTagMapper) {\n    for (const tagType of genericTagMapper.tagTypes) {\n      this.tagMappers[tagType] = genericTagMapper;\n    }\n  }\n\n}\n\nexports.CombinedTagMapper = CombinedTagMapper;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/common/CombinedTagMapper.js"],"names":["Object","defineProperty","exports","value","CombinedTagMapper","ID3v1TagMap_1","require","ID3v24TagMapper_1","AsfTagMapper_1","ID3v22TagMapper_1","APEv2TagMapper_1","MP4TagMapper_1","VorbisTagMapper_1","RiffInfoTagMap_1","MatroskaTagMapper_1","constructor","tagMappers","ID3v1TagMapper","ID3v22TagMapper","ID3v24TagMapper","MP4TagMapper","VorbisTagMapper","APEv2TagMapper","AsfTagMapper","RiffInfoTagMapper","MatroskaTagMapper","forEach","mapper","registerTagMapper","mapTag","tagType","tag","warnings","tagMapper","mapGenericTag","Error","genericTagMapper","tagTypes"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAA7B;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,0BAAD,CAAjC;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,qBAAD,CAA9B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,0BAAD,CAAjC;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,yBAAD,CAAhC;;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,qBAAD,CAA9B;;AACA,MAAMM,iBAAiB,GAAGN,OAAO,CAAC,+BAAD,CAAjC;;AACA,MAAMO,gBAAgB,GAAGP,OAAO,CAAC,wBAAD,CAAhC;;AACA,MAAMQ,mBAAmB,GAAGR,OAAO,CAAC,+BAAD,CAAnC;;AACA,MAAMF,iBAAN,CAAwB;AACpBW,EAAAA,WAAW,GAAG;AACV,SAAKC,UAAL,GAAkB,EAAlB;AACA,KACI,IAAIX,aAAa,CAACY,cAAlB,EADJ,EAEI,IAAIR,iBAAiB,CAACS,eAAtB,EAFJ,EAGI,IAAIX,iBAAiB,CAACY,eAAtB,EAHJ,EAII,IAAIR,cAAc,CAACS,YAAnB,EAJJ,EAKI,IAAIT,cAAc,CAACS,YAAnB,EALJ,EAMI,IAAIR,iBAAiB,CAACS,eAAtB,EANJ,EAOI,IAAIX,gBAAgB,CAACY,cAArB,EAPJ,EAQI,IAAId,cAAc,CAACe,YAAnB,EARJ,EASI,IAAIV,gBAAgB,CAACW,iBAArB,EATJ,EAUI,IAAIV,mBAAmB,CAACW,iBAAxB,EAVJ,EAWEC,OAXF,CAWUC,MAAM,IAAI;AAChB,WAAKC,iBAAL,CAAuBD,MAAvB;AACH,KAbD;AAcH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,MAAM,CAACC,OAAD,EAAUC,GAAV,EAAeC,QAAf,EAAyB;AAC3B,UAAMC,SAAS,GAAG,KAAKjB,UAAL,CAAgBc,OAAhB,CAAlB;;AACA,QAAIG,SAAJ,EAAe;AACX,aAAO,KAAKjB,UAAL,CAAgBc,OAAhB,EAAyBI,aAAzB,CAAuCH,GAAvC,EAA4CC,QAA5C,CAAP;AACH;;AACD,UAAM,IAAIG,KAAJ,CAAU,mDAAmDL,OAA7D,CAAN;AACH;;AACDF,EAAAA,iBAAiB,CAACQ,gBAAD,EAAmB;AAChC,SAAK,MAAMN,OAAX,IAAsBM,gBAAgB,CAACC,QAAvC,EAAiD;AAC7C,WAAKrB,UAAL,CAAgBc,OAAhB,IAA2BM,gBAA3B;AACH;AACJ;;AApCmB;;AAsCxBlC,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CombinedTagMapper = void 0;\r\nconst ID3v1TagMap_1 = require(\"../id3v1/ID3v1TagMap\");\r\nconst ID3v24TagMapper_1 = require(\"../id3v2/ID3v24TagMapper\");\r\nconst AsfTagMapper_1 = require(\"../asf/AsfTagMapper\");\r\nconst ID3v22TagMapper_1 = require(\"../id3v2/ID3v22TagMapper\");\r\nconst APEv2TagMapper_1 = require(\"../apev2/APEv2TagMapper\");\r\nconst MP4TagMapper_1 = require(\"../mp4/MP4TagMapper\");\r\nconst VorbisTagMapper_1 = require(\"../ogg/vorbis/VorbisTagMapper\");\r\nconst RiffInfoTagMap_1 = require(\"../riff/RiffInfoTagMap\");\r\nconst MatroskaTagMapper_1 = require(\"../matroska/MatroskaTagMapper\");\r\nclass CombinedTagMapper {\r\n    constructor() {\r\n        this.tagMappers = {};\r\n        [\r\n            new ID3v1TagMap_1.ID3v1TagMapper(),\r\n            new ID3v22TagMapper_1.ID3v22TagMapper(),\r\n            new ID3v24TagMapper_1.ID3v24TagMapper(),\r\n            new MP4TagMapper_1.MP4TagMapper(),\r\n            new MP4TagMapper_1.MP4TagMapper(),\r\n            new VorbisTagMapper_1.VorbisTagMapper(),\r\n            new APEv2TagMapper_1.APEv2TagMapper(),\r\n            new AsfTagMapper_1.AsfTagMapper(),\r\n            new RiffInfoTagMap_1.RiffInfoTagMapper(),\r\n            new MatroskaTagMapper_1.MatroskaTagMapper()\r\n        ].forEach(mapper => {\r\n            this.registerTagMapper(mapper);\r\n        });\r\n    }\r\n    /**\r\n     * Convert native to generic (common) tags\r\n     * @param tagType Originating tag format\r\n     * @param tag     Native tag to map to a generic tag id\r\n     * @param warnings\r\n     * @return Generic tag result (output of this function)\r\n     */\r\n    mapTag(tagType, tag, warnings) {\r\n        const tagMapper = this.tagMappers[tagType];\r\n        if (tagMapper) {\r\n            return this.tagMappers[tagType].mapGenericTag(tag, warnings);\r\n        }\r\n        throw new Error(\"No generic tag mapper defined for tag-format: \" + tagType);\r\n    }\r\n    registerTagMapper(genericTagMapper) {\r\n        for (const tagType of genericTagMapper.tagTypes) {\r\n            this.tagMappers[tagType] = genericTagMapper;\r\n        }\r\n    }\r\n}\r\nexports.CombinedTagMapper = CombinedTagMapper;\r\n"]},"metadata":{},"sourceType":"script"}