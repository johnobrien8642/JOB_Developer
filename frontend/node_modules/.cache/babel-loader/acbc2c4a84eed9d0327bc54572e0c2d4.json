{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/JOB_Developer/client/src/components/posts/types/create/VideoPostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport randomstring from 'randomstring';\nimport VideoInput from '../../util/components/forms/inputTypes/Video_Input';\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text';\nimport Tags from '../../util/components/forms/Tags';\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close';\nimport Queries from '../../../../graphql/queries.js';\nimport Mutations from '../../../../graphql/mutations.js';\nimport PostFormUtil from '../../util/functions/post_form_util.js';\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  postCreate,\n  postUpdate\n} = UpdateCacheUtil;\nconst {\n  bodyPost,\n  videoPost,\n  handleFormData,\n  stripAllImgs,\n  handleUploadedFiles,\n  resetDisplayIdx,\n  handleMentions,\n  discardMentions,\n  handleAllTextVideoPost,\n  allowScroll,\n  preventScroll,\n  handleTagInput\n} = PostFormUtil;\nconst {\n  CREATE_OR_UPDATE_POST\n} = Mutations;\nconst {\n  FETCH_USER_FEED\n} = Queries;\n\nconst VideoPostForm = ({\n  mobile,\n  user,\n  post,\n  update,\n  setUpdate,\n  videoPostActive,\n  setVideoPostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  _s();\n\n  let [videoFile, setVideoFile] = useState('');\n  let [videoObj, setVideoObj] = useState('');\n  let [isLink, setIsLink] = useState(false);\n  let [active, setActive] = useState(false);\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0);\n  let [confirmClose, setConfirmClose] = useState(false);\n  let [displayBodyImageAndTextInput, setDisplayBodyImageAndTextInput] = useState(false);\n  let history = useHistory();\n  const formId = 'videoPostForm';\n  const formInputId = 'videoPostInput';\n  useEffect(() => {\n    preventScroll(videoPostActive, document);\n  }, [videoPostActive]);\n  useEffect(() => {\n    resetDisplayIdx(body);\n  });\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, {\n      data\n    }) {\n      const {\n        createOrUpdatePost\n      } = data;\n      var currentUser = Cookies.get('currentUser');\n      var query = FETCH_USER_FEED;\n\n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query);\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query);\n      }\n    },\n\n    onCompleted() {\n      resetInputs();\n\n      if (post) {\n        setUpdate(update = false);\n      } else {\n        resetInputs();\n        allowScroll(document);\n        setVideoPostActive(videoPostActive = false);\n\n        if (mobile) {\n          setPostFormOpen(postFormOpen = false);\n          history.push('/dashboard');\n        }\n\n        setUploading(uploading = false);\n      }\n    },\n\n    onError(error) {\n      console.log(error);\n    }\n\n  });\n\n  const resetInputs = () => {\n    setVideoObj(videoObj = '');\n    setVideoFile(videoFile = '');\n    setActive(active = false);\n    setUploading(uploading = false);\n    setBodyImageFiles(bodyImageFiles = []);\n    body.current = [];\n    allText.current = '';\n    setDescription(description = '');\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (videoFile) {\n      var videoFileFormData = new FormData();\n      videoFileFormData.append('video', videoFile);\n    }\n\n    var bodyImagesFormData = handleFormData(bodyImageFiles);\n    Promise.all([bodyPost(bodyImagesFormData), videoPost(videoFileFormData, isLink, videoObj)]).then(([bodyUploads, video]) => {\n      var mentions = handleMentions(body, stripAllImgs);\n      discardMentions(post, mentions, objsToClean);\n      var descriptions = stripAllImgs(body);\n      handleAllTextVideoPost(allText, descriptions);\n      var instanceData = {\n        variants: {\n          videoLink: video[0]._id\n        },\n        allText: allText.current,\n        descriptions: descriptions,\n        descriptionImages: handleUploadedFiles(body, bodyUploads),\n        mentions: mentions,\n        user: Cookies.get('currentUser'),\n        tags,\n        kind: 'VideoPost',\n        objsToClean: objsToClean.current,\n        postId: post ? post._id : null\n      };\n      createOrUpdatePost({\n        variables: {\n          instanceData: instanceData\n        }\n      });\n    });\n  };\n\n  const disabledBool = () => {\n    return !videoFile && !videoObj && !uploading && body.current.length === 0 && !description;\n  };\n\n  const handleVideoPostFormClass = () => {\n    if (videoPostActive && !uploading || update) {\n      return 'postForm videoPostForm active';\n    } else if (videoPostActive && uploading) {\n      return 'postForm videoPostForm hidden';\n    } else {\n      return 'postForm videoPostForm none';\n    }\n  };\n\n  if (videoPostActive || update) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: update ? 'postFormContainer update' : 'postFormContainer',\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        user: update ? post.user : user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: handleVideoPostFormClass(),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"userNameHeader\",\n            children: update ? post.user.blogName : user.blogName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            id: formId,\n            onSubmit: e => {\n              setUploading(uploading = true);\n              handleSubmit(e);\n            },\n            onKeyPress: e => {\n              e.key === 'Enter' && e.preventDefault();\n            },\n            encType: 'multipart/form-data',\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: uploading ? 'Uploading, please wait...' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(VideoInput, {\n              displayBodyImageAndTextInput: displayBodyImageAndTextInput,\n              setDisplayBodyImageAndTextInput: setDisplayBodyImageAndTextInput,\n              post: post,\n              update: update,\n              formId: formId,\n              active: active,\n              objsToClean: objsToClean,\n              setActive: setActive,\n              videoObj: videoObj,\n              setVideoObj: setVideoObj,\n              videoFile: videoFile,\n              setVideoFile: setVideoFile,\n              isLink: isLink,\n              setIsLink: setIsLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(BodyImageAndText, {\n              displayBodyImageAndTextInput: displayBodyImageAndTextInput,\n              post: post,\n              update: update,\n              formId: formId,\n              formInputId: formInputId,\n              objsToClean: objsToClean,\n              body: body,\n              bodyImageFiles: bodyImageFiles,\n              setBodyImageFiles: setBodyImageFiles,\n              description: description,\n              setDescription: setDescription,\n              render: render,\n              setRender: setRender,\n              errMessage: errMessage,\n              setErrMessage: setErrMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Tags, {\n              post: post,\n              tag: tag,\n              setTag: setTag,\n              tags: tags,\n              setTags: setTags\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"closeOrPostContainer\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"closeBtn\",\n                onClick: () => {\n                  if (disabledBool()) {\n                    resetInputs();\n                    allowScroll(document);\n\n                    if (!update) {\n                      setVideoPostActive(videoPostActive = false);\n                      setPostFormModal(postFormModal = false);\n                    } else {\n                      setUpdate(update = false);\n                    }\n\n                    if (mobile) {\n                      setPostFormOpen(postFormOpen = false);\n                    }\n                  } else {\n                    setConfirmClose(confirmClose = true);\n                  }\n                },\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(ConfirmClose, {\n                mobile: mobile,\n                update: update,\n                setUpdate: setUpdate,\n                confirmClose: confirmClose,\n                setConfirmClose: setConfirmClose,\n                allowScroll: allowScroll,\n                resetInputs: resetInputs,\n                setFormActive: setVideoPostActive,\n                formActive: videoPostActive,\n                setPostFormModal: setPostFormModal,\n                postFormModal: postFormModal,\n                postFormOpen: postFormOpen,\n                setPostFormOpen: setPostFormOpen\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                disabled: disabledBool(),\n                className: disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn',\n                onClick: () => {\n                  if (description) {\n                    var textObj = {\n                      kind: 'text',\n                      srcType: 'text',\n                      content: description,\n                      displayIdx: body.current.length,\n                      uniqId: randomstring.generate({\n                        length: 12,\n                        charset: 'alphabetic'\n                      })\n                    };\n                    body.current.push(textObj);\n                    setDescription(description = '');\n                  }\n\n                  if (tag) {\n                    handleTagInput(tag, setTag, tags, setTags);\n                  }\n\n                  if (!update) {\n                    setPostFormModal(postFormModal = false);\n                  }\n\n                  setUploading(uploading = true);\n                },\n                children: post ? 'Update' : 'Post'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(VideoPostForm, \"eZEBBP+gCsO9rS4iZhPBuDW7NMw=\", false, function () {\n  return [useHistory, useMutation];\n});\n\n_c = VideoPostForm;\nexport default VideoPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPostForm\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/src/components/posts/types/create/VideoPostForm.js"],"names":["React","useState","useRef","useEffect","useMutation","useHistory","Cookies","randomstring","VideoInput","BodyImageAndText","Tags","ProfilePic","ConfirmClose","Queries","Mutations","PostFormUtil","UpdateCacheUtil","postCreate","postUpdate","bodyPost","videoPost","handleFormData","stripAllImgs","handleUploadedFiles","resetDisplayIdx","handleMentions","discardMentions","handleAllTextVideoPost","allowScroll","preventScroll","handleTagInput","CREATE_OR_UPDATE_POST","FETCH_USER_FEED","VideoPostForm","mobile","user","post","update","setUpdate","videoPostActive","setVideoPostActive","postFormModal","setPostFormModal","postFormOpen","setPostFormOpen","uploading","setUploading","videoFile","setVideoFile","videoObj","setVideoObj","isLink","setIsLink","active","setActive","objsToClean","description","setDescription","bodyImageFiles","setBodyImageFiles","body","allText","tag","setTag","tags","setTags","errMessage","setErrMessage","render","setRender","confirmClose","setConfirmClose","displayBodyImageAndTextInput","setDisplayBodyImageAndTextInput","history","formId","formInputId","document","createOrUpdatePost","client","data","currentUser","get","query","onCompleted","resetInputs","push","onError","error","console","log","current","handleSubmit","e","preventDefault","videoFileFormData","FormData","append","bodyImagesFormData","Promise","all","then","bodyUploads","video","mentions","descriptions","instanceData","variants","videoLink","_id","descriptionImages","kind","postId","variables","disabledBool","length","handleVideoPostFormClass","blogName","key","textObj","srcType","content","displayIdx","uniqId","generate","charset"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport randomstring from 'randomstring';\n\nimport VideoInput from '../../util/components/forms/inputTypes/Video_Input';\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text';\nimport Tags from '../../util/components/forms/Tags';\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close';\n\nimport Queries from '../../../../graphql/queries.js';\nimport Mutations from '../../../../graphql/mutations.js';\nimport PostFormUtil from '../../util/functions/post_form_util.js';\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nconst { postCreate, postUpdate } = UpdateCacheUtil;\nconst { bodyPost, videoPost, handleFormData, \n        stripAllImgs, handleUploadedFiles, \n        resetDisplayIdx, handleMentions, \n        discardMentions, handleAllTextVideoPost,\n        allowScroll, preventScroll, handleTagInput  } = PostFormUtil;\nconst { CREATE_OR_UPDATE_POST } = Mutations;\nconst { FETCH_USER_FEED } = Queries;\n\nconst VideoPostForm = ({\n  mobile,\n  user,\n  post, \n  update,\n  setUpdate,\n  videoPostActive,\n  setVideoPostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  let [videoFile, setVideoFile] = useState('');\n  let [videoObj, setVideoObj] = useState('');\n  let [isLink, setIsLink] = useState(false)\n  \n  let [active, setActive] = useState(false)\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0);\n  let [confirmClose, setConfirmClose] = useState(false);\n  let [displayBodyImageAndTextInput, setDisplayBodyImageAndTextInput] = useState(false);\n  let history = useHistory();\n  const formId = 'videoPostForm';\n  const formInputId = 'videoPostInput'\n\n  useEffect(() => {\n\n    preventScroll(videoPostActive, document)\n\n  }, [videoPostActive])\n\n  useEffect(() => {\n    resetDisplayIdx(body)\n  })\n\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, { data }){\n      const { createOrUpdatePost } = data;\n      var currentUser = Cookies.get('currentUser')\n      var query = FETCH_USER_FEED\n      \n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query)\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query)\n      }\n    },\n    onCompleted() {\n      resetInputs();\n      if (post) {\n        setUpdate(update = false)\n      } else {\n        resetInputs()\n        allowScroll(document)\n        setVideoPostActive(videoPostActive = false)\n        \n        if (mobile) {\n          setPostFormOpen(postFormOpen = false)\n          history.push('/dashboard')\n        }\n\n        setUploading(uploading = false)\n      }\n    },\n    onError(error) {\n      console.log(error)\n    }\n  });\n\n  const resetInputs = () => {\n    setVideoObj(videoObj = '');\n    setVideoFile(videoFile = '');\n    setActive(active = false);\n    setUploading(uploading = false);\n    setBodyImageFiles(bodyImageFiles = []);\n    body.current = [];\n    allText.current = '';\n    setDescription(description = '');\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n  }\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (videoFile) {\n      var videoFileFormData = new FormData();\n      videoFileFormData.append('video', videoFile)\n    }\n\n    var bodyImagesFormData = handleFormData(bodyImageFiles)\n\n    Promise.all([\n      bodyPost(bodyImagesFormData),\n      videoPost(videoFileFormData, isLink, videoObj)\n    ]).then(\n      ([bodyUploads, video]) => {\n\n        var mentions = handleMentions(body, stripAllImgs)\n        \n        discardMentions(post, mentions, objsToClean)\n\n        var descriptions = stripAllImgs(body)\n\n        handleAllTextVideoPost(allText, descriptions)\n\n        var instanceData = {\n          variants: {\n            videoLink: video[0]._id\n          },\n          allText: allText.current,\n          descriptions: descriptions,\n          descriptionImages: handleUploadedFiles(body, bodyUploads),\n          mentions: mentions,\n          user: Cookies.get('currentUser'),\n          tags, kind: 'VideoPost',\n          objsToClean: objsToClean.current,\n          postId: post ? post._id : null\n        };\n        \n        createOrUpdatePost({\n          variables: {\n            instanceData: instanceData\n          }\n        })\n      }\n    )\n  }\n\n  const disabledBool = () => {\n    return !videoFile && \n    !videoObj &&\n    !uploading &&\n    body.current.length === 0 &&\n    !description\n  }\n\n  const handleVideoPostFormClass = () => {\n    if ((videoPostActive && !uploading) || update) {\n      return 'postForm videoPostForm active'\n    } else if (videoPostActive && uploading) {\n      return 'postForm videoPostForm hidden'\n    } else {\n      return 'postForm videoPostForm none'\n    }\n  }\n\n  if (videoPostActive || update) {\n    return (\n    <div\n      className={update ? 'postFormContainer update' : 'postFormContainer'}\n    >\n\n      <ProfilePic user={update ? post.user : user} />\n\n      <div>\n        <div\n          className={handleVideoPostFormClass()}\n        >\n          \n          <h3\n            className='userNameHeader'\n          >{update ? post.user.blogName : user.blogName}</h3>\n\n          <form\n            id={formId}\n            onSubmit={e => {\n              setUploading(uploading = true)\n              handleSubmit(e)\n            }}\n            onKeyPress={e => { e.key === 'Enter' && e.preventDefault() }}\n            encType={'multipart/form-data'}\n          >\n\n          <p>{uploading ? 'Uploading, please wait...': ''}</p>\n          \n          <VideoInput\n            displayBodyImageAndTextInput={displayBodyImageAndTextInput}\n            setDisplayBodyImageAndTextInput={setDisplayBodyImageAndTextInput}\n            post={post}\n            update={update}\n            formId={formId}\n            active={active}\n            objsToClean={objsToClean}\n            setActive={setActive}\n            videoObj={videoObj}\n            setVideoObj={setVideoObj}\n            videoFile={videoFile}\n            setVideoFile={setVideoFile}\n            isLink={isLink}\n            setIsLink={setIsLink}\n          />\n\n          <BodyImageAndText\n            displayBodyImageAndTextInput={displayBodyImageAndTextInput}\n            post={post}\n            update={update}\n            formId={formId}\n            formInputId={formInputId}\n            objsToClean={objsToClean}\n            body={body}\n            bodyImageFiles={bodyImageFiles}\n            setBodyImageFiles={setBodyImageFiles}\n            description={description}\n            setDescription={setDescription}\n            render={render}\n            setRender={setRender}\n            errMessage={errMessage}\n            setErrMessage={setErrMessage}\n          />\n\n          <Tags\n            post={post}\n            tag={tag}\n            setTag={setTag}\n            tags={tags}\n            setTags={setTags}\n          />\n\n          <div\n            className='closeOrPostContainer'\n          >\n            <div\n              className='closeBtn'\n              onClick={() => {\n                if (disabledBool()) {\n                    resetInputs()\n                    allowScroll(document)\n                    \n                    if (!update) {\n                      setVideoPostActive(videoPostActive = false)\n                      setPostFormModal(postFormModal = false)\n                    } else {\n                      setUpdate(update = false)\n                    }\n\n                    if (mobile) {\n                      setPostFormOpen(postFormOpen = false)\n                    }\n                  } else {\n                    setConfirmClose(confirmClose = true)\n                  }\n              }}\n            >\n              Close\n            </div>\n\n            <ConfirmClose\n              mobile={mobile}\n              update={update}\n              setUpdate={setUpdate}\n              confirmClose={confirmClose}\n              setConfirmClose={setConfirmClose}\n              allowScroll={allowScroll}\n              resetInputs={resetInputs}\n              setFormActive={setVideoPostActive}\n              formActive={videoPostActive}\n              setPostFormModal={setPostFormModal}\n              postFormModal={postFormModal}\n              postFormOpen={postFormOpen}\n              setPostFormOpen={setPostFormOpen}\n            />\n\n            <button\n              type='submit'\n              disabled={disabledBool()}\n              className={disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn'}\n              onClick={() => {\n                if (description) {\n                  var textObj = {\n                    kind: 'text',\n                    srcType: 'text',\n                    content: description,\n                    displayIdx: body.current.length,\n                    uniqId: randomstring.generate({\n                      length: 12,\n                      charset: 'alphabetic'\n                    })\n                  }\n  \n                  body.current.push(textObj)\n                \n                  setDescription(description = '')\n                }\n                \n                if (tag) {\n                  handleTagInput(\n                    tag, setTag,\n                    tags, setTags\n                  )\n                }\n                \n                if (!update) {\n                  setPostFormModal(postFormModal = false)\n                }\n\n                setUploading(uploading = true)\n              }}\n            >\n              {post ? 'Update' : 'Post'}\n            </button>\n          </div>\n          </form>\n        </div>\n      </div>\n    </div>\n    )\n  } else {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default VideoPostForm;"]},"metadata":{},"sourceType":"module"}