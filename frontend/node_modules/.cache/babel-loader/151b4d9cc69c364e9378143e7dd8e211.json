{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VorbisDecoder = void 0;\n\nvar Token = require(\"token-types\");\n\nvar VorbisDecoder = /*#__PURE__*/function () {\n  function VorbisDecoder(data, offset) {\n    _classCallCheck(this, VorbisDecoder);\n\n    this.data = data;\n    this.offset = offset;\n  }\n\n  _createClass(VorbisDecoder, [{\n    key: \"readInt32\",\n    value: function readInt32() {\n      var value = Token.UINT32_LE.get(this.data, this.offset);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"readStringUtf8\",\n    value: function readStringUtf8() {\n      var len = this.readInt32();\n      var value = this.data.toString('utf8', this.offset, this.offset + len);\n      this.offset += len;\n      return value;\n    }\n  }, {\n    key: \"parseUserComment\",\n    value: function parseUserComment() {\n      var offset0 = this.offset;\n      var v = this.readStringUtf8();\n      var idx = v.indexOf('=');\n      return {\n        key: v.slice(0, idx).toUpperCase(),\n        value: v.slice(idx + 1),\n        len: this.offset - offset0\n      };\n    }\n  }]);\n\n  return VorbisDecoder;\n}();\n\nexports.VorbisDecoder = VorbisDecoder;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js"],"names":["Object","defineProperty","exports","value","VorbisDecoder","Token","require","data","offset","UINT32_LE","get","len","readInt32","toString","offset0","v","readStringUtf8","idx","indexOf","key","slice","toUpperCase"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;IACMF,a;AACF,yBAAYG,IAAZ,EAAkBC,MAAlB,EAA0B;AAAA;;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;;;WACD,qBAAY;AACR,UAAML,KAAK,GAAGE,KAAK,CAACI,SAAN,CAAgBC,GAAhB,CAAoB,KAAKH,IAAzB,EAA+B,KAAKC,MAApC,CAAd;AACA,WAAKA,MAAL,IAAe,CAAf;AACA,aAAOL,KAAP;AACH;;;WACD,0BAAiB;AACb,UAAMQ,GAAG,GAAG,KAAKC,SAAL,EAAZ;AACA,UAAMT,KAAK,GAAG,KAAKI,IAAL,CAAUM,QAAV,CAAmB,MAAnB,EAA2B,KAAKL,MAAhC,EAAwC,KAAKA,MAAL,GAAcG,GAAtD,CAAd;AACA,WAAKH,MAAL,IAAeG,GAAf;AACA,aAAOR,KAAP;AACH;;;WACD,4BAAmB;AACf,UAAMW,OAAO,GAAG,KAAKN,MAArB;AACA,UAAMO,CAAC,GAAG,KAAKC,cAAL,EAAV;AACA,UAAMC,GAAG,GAAGF,CAAC,CAACG,OAAF,CAAU,GAAV,CAAZ;AACA,aAAO;AACHC,QAAAA,GAAG,EAAEJ,CAAC,CAACK,KAAF,CAAQ,CAAR,EAAWH,GAAX,EAAgBI,WAAhB,EADF;AAEHlB,QAAAA,KAAK,EAAEY,CAAC,CAACK,KAAF,CAAQH,GAAG,GAAG,CAAd,CAFJ;AAGHN,QAAAA,GAAG,EAAE,KAAKH,MAAL,GAAcM;AAHhB,OAAP;AAKH;;;;;;AAELZ,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.VorbisDecoder = void 0;\r\nconst Token = require(\"token-types\");\r\nclass VorbisDecoder {\r\n    constructor(data, offset) {\r\n        this.data = data;\r\n        this.offset = offset;\r\n    }\r\n    readInt32() {\r\n        const value = Token.UINT32_LE.get(this.data, this.offset);\r\n        this.offset += 4;\r\n        return value;\r\n    }\r\n    readStringUtf8() {\r\n        const len = this.readInt32();\r\n        const value = this.data.toString('utf8', this.offset, this.offset + len);\r\n        this.offset += len;\r\n        return value;\r\n    }\r\n    parseUserComment() {\r\n        const offset0 = this.offset;\r\n        const v = this.readStringUtf8();\r\n        const idx = v.indexOf('=');\r\n        return {\r\n            key: v.slice(0, idx).toUpperCase(),\r\n            value: v.slice(idx + 1),\r\n            len: this.offset - offset0\r\n        };\r\n    }\r\n}\r\nexports.VorbisDecoder = VorbisDecoder;\r\n"]},"metadata":{},"sourceType":"script"}