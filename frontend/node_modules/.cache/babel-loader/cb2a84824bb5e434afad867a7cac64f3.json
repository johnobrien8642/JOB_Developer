{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/types/create/TextPostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport randomstring from 'randomstring';\nimport Cookies from 'js-cookie';\nimport TextPostInput from '../../util/components/forms/inputTypes/Text_Post_Input';\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text';\nimport Tags from '../../util/components/forms/Tags';\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close.js';\nimport Queries from '../../../../graphql/queries.js';\nimport Mutations from '../../../../graphql/mutations.js';\nimport PostFormUtil from '../../util/functions/post_form_util.js';\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  postCreate,\n  postUpdate\n} = UpdateCacheUtil;\nconst {\n  bodyPost,\n  handleFormData,\n  stripAllImgs,\n  handleUploadedFiles,\n  resetDisplayIdx,\n  handleTagInput,\n  handleAllTextTextPost,\n  handleMentions,\n  discardMentions,\n  preventScroll,\n  allowScroll\n} = PostFormUtil;\nconst {\n  CREATE_OR_UPDATE_POST\n} = Mutations;\nconst {\n  FETCH_USER_FEED\n} = Queries;\n\nconst TextPostForm = ({\n  user,\n  mobile,\n  post,\n  update,\n  setUpdate,\n  textPostActive,\n  setTextPostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  _s();\n\n  let [title, setTitle] = useState('');\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0);\n  let [confirmClose, setConfirmClose] = useState(false);\n  const formId = 'textPostForm';\n  const formInputId = 'textPostInput';\n  useEffect(() => {\n    preventScroll(textPostActive, document);\n  }, [textPostActive]);\n  useEffect(() => {\n    resetDisplayIdx(body);\n  });\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, {\n      data\n    }) {\n      const {\n        createOrUpdatePost\n      } = data;\n      var currentUser = Cookies.get('currentUser');\n      var query = FETCH_USER_FEED;\n\n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query);\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query);\n      }\n    },\n\n    onCompleted() {\n      resetInputs();\n\n      if (post) {\n        setUpdate(update = false);\n        setUploading(uploading = false);\n      } else {\n        allowScroll(document);\n        setUploading(uploading = false);\n        setTextPostActive(textPostActive = false);\n\n        if (mobile) {\n          setPostFormOpen(postFormOpen = false);\n        }\n\n        setUploading(uploading = false);\n      }\n    },\n\n    onError(error) {\n      console.log(error);\n    }\n\n  });\n\n  const resetInputs = () => {\n    objsToClean.current = [];\n    setTitle(title = '');\n    body.current = [];\n    allText.current = '';\n    setBodyImageFiles(bodyImageFiles = []);\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    var bodyImagesFormData = handleFormData(bodyImageFiles);\n    Promise.all([bodyPost(bodyImagesFormData)]).then(([bodyUploads]) => {\n      var mentions = handleMentions(body, stripAllImgs);\n      discardMentions(post, mentions, objsToClean);\n      var descriptions = stripAllImgs(body);\n      handleAllTextTextPost(allText, descriptions, title);\n      var instanceData = {\n        variants: {\n          title\n        },\n        allText: allText.current,\n        descriptions: descriptions,\n        descriptionImages: handleUploadedFiles(body, bodyUploads),\n        mentions: mentions,\n        user: Cookies.get('currentUser'),\n        tags,\n        kind: 'TextPost',\n        objsToClean: objsToClean.current,\n        postId: post ? post._id : null\n      };\n      createOrUpdatePost({\n        variables: {\n          instanceData: instanceData\n        }\n      });\n    });\n  };\n\n  const disabledBool = () => {\n    return !title && body.current.length === 0 && !description;\n  };\n\n  const handleTextPostFormClass = () => {\n    if (textPostActive && !uploading || update) {\n      return 'postForm textPostForm active';\n    } else if (textPostActive && uploading || uploading) {\n      return 'postForm textPostForm hidden';\n    } else {\n      return 'postForm textPostForm none';\n    }\n  };\n\n  if (textPostActive || update) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: update ? 'postFormContainer update' : 'postFormContainer',\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        user: update ? post.user : user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: handleTextPostFormClass(),\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          id: formId,\n          onSubmit: e => handleSubmit(e),\n          onKeyPress: e => {\n            e.key === 'Enter' && e.preventDefault();\n          },\n          encType: 'multipart/form-data',\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"userNameHeader\",\n            children: update ? post.user.blogName : user.blogName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(TextPostInput, {\n            post: post,\n            update: update,\n            formInputId: formInputId,\n            title: title,\n            setTitle: setTitle,\n            render: render,\n            setRender: setRender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(BodyImageAndText, {\n            displayBodyImageAndTextInput: true,\n            post: post,\n            update: update,\n            formId: formId,\n            formInputId: formInputId,\n            objsToClean: objsToClean,\n            body: body,\n            bodyImageFiles: bodyImageFiles,\n            setBodyImageFiles: setBodyImageFiles,\n            description: description,\n            setDescription: setDescription,\n            render: render,\n            setRender: setRender,\n            errMessage: errMessage,\n            setErrMessage: setErrMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Tags, {\n            post: post,\n            tag: tag,\n            setTag: setTag,\n            tags: tags,\n            setTags: setTags\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"closeOrPostContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: 'closeBtn',\n              onClick: () => {\n                if (disabledBool()) {\n                  allowScroll(document);\n                  resetInputs();\n\n                  if (!update) {\n                    setTextPostActive(textPostActive = false);\n                    setPostFormModal(postFormModal = false);\n                  } else {\n                    setUpdate(update = false);\n                  }\n\n                  if (mobile) {\n                    setPostFormOpen(postFormOpen = false);\n                  }\n                } else {\n                  setConfirmClose(confirmClose = true);\n                }\n              },\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(ConfirmClose, {\n              mobile: mobile,\n              update: update,\n              setUpdate: setUpdate,\n              confirmClose: confirmClose,\n              setConfirmClose: setConfirmClose,\n              allowScroll: allowScroll,\n              resetInputs: resetInputs,\n              setFormActive: setTextPostActive,\n              formActive: textPostActive,\n              setPostFormModal: setPostFormModal,\n              postFormModal: postFormModal,\n              postFormOpen: postFormOpen,\n              setPostFormOpen: setPostFormOpen\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn',\n              disabled: disabledBool(),\n              onClick: () => {\n                if (description) {\n                  var textObj = {\n                    kind: 'text',\n                    srcType: 'text',\n                    content: description,\n                    displayIdx: body.current.length,\n                    uniqId: randomstring.generate({\n                      length: 12,\n                      charset: 'alphabetic'\n                    })\n                  };\n                  body.current.push(textObj);\n                  setDescription(description = '');\n                }\n\n                if (tag) {\n                  handleTagInput(tag, setTag, tags, setTags);\n                }\n\n                if (!update) {\n                  setPostFormModal(postFormModal = false);\n                }\n\n                setUploading(uploading = true);\n              },\n              children: post ? 'Update' : 'Post'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(TextPostForm, \"prfN4cMR8glpJ3i5P0eXBHjQztk=\", false, function () {\n  return [useMutation];\n});\n\n_c = TextPostForm;\nexport default TextPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextPostForm\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/types/create/TextPostForm.js"],"names":["React","useState","useRef","useEffect","useMutation","randomstring","Cookies","TextPostInput","BodyImageAndText","Tags","ProfilePic","ConfirmClose","Queries","Mutations","PostFormUtil","UpdateCacheUtil","postCreate","postUpdate","bodyPost","handleFormData","stripAllImgs","handleUploadedFiles","resetDisplayIdx","handleTagInput","handleAllTextTextPost","handleMentions","discardMentions","preventScroll","allowScroll","CREATE_OR_UPDATE_POST","FETCH_USER_FEED","TextPostForm","user","mobile","post","update","setUpdate","textPostActive","setTextPostActive","postFormModal","setPostFormModal","postFormOpen","setPostFormOpen","uploading","setUploading","title","setTitle","objsToClean","description","setDescription","bodyImageFiles","setBodyImageFiles","body","allText","tag","setTag","tags","setTags","errMessage","setErrMessage","render","setRender","confirmClose","setConfirmClose","formId","formInputId","document","createOrUpdatePost","client","data","currentUser","get","query","onCompleted","resetInputs","onError","error","console","log","current","handleSubmit","e","preventDefault","bodyImagesFormData","Promise","all","then","bodyUploads","mentions","descriptions","instanceData","variants","descriptionImages","kind","postId","_id","variables","disabledBool","length","handleTextPostFormClass","key","blogName","textObj","srcType","content","displayIdx","uniqId","generate","charset","push"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport randomstring from 'randomstring';\nimport Cookies from 'js-cookie';\n\nimport TextPostInput from '../../util/components/forms/inputTypes/Text_Post_Input'\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text'\nimport Tags from '../../util/components/forms/Tags'\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close.js';\n\nimport Queries from '../../../../graphql/queries.js';\nimport Mutations from '../../../../graphql/mutations.js';\nimport PostFormUtil from '../../util/functions/post_form_util.js';\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nconst { postCreate, postUpdate } = UpdateCacheUtil;\nconst { bodyPost, handleFormData, \n        stripAllImgs, handleUploadedFiles, \n        resetDisplayIdx, handleTagInput,\n        handleAllTextTextPost, handleMentions, \n        discardMentions, preventScroll, \n        allowScroll } = PostFormUtil;\nconst { CREATE_OR_UPDATE_POST } = Mutations;\nconst { FETCH_USER_FEED } = Queries;\n\nconst TextPostForm = ({\n  user,\n  mobile,\n  post, \n  update,\n  setUpdate,\n  textPostActive,\n  setTextPostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  let [title, setTitle] = useState('');\n\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0);\n  let [confirmClose, setConfirmClose] = useState(false);\n  const formId = 'textPostForm'\n  const formInputId = 'textPostInput'\n\n  useEffect(() => {\n\n    preventScroll(textPostActive, document)\n\n  }, [textPostActive])\n  \n  useEffect(() => {\n    resetDisplayIdx(body)\n  })\n\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, { data }){\n    const { createOrUpdatePost } = data;\n    var currentUser = Cookies.get('currentUser')\n    var query = FETCH_USER_FEED\n      \n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query)\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query)\n      }\n    },\n    onCompleted() {\n      resetInputs();\n      if (post) {\n        setUpdate(update = false)\n        setUploading(uploading = false)\n      } else {\n        allowScroll(document)\n        setUploading(uploading = false)\n        setTextPostActive(textPostActive = false)\n\n        if (mobile) {\n          setPostFormOpen(postFormOpen = false)\n        }\n\n        setUploading(uploading = false)\n      }\n    },\n    onError(error) {\n      console.log(error)\n    }\n  });\n\n  const resetInputs = () => {\n    objsToClean.current = [];\n    setTitle(title = '');\n    body.current = []\n    allText.current = '';\n    setBodyImageFiles(bodyImageFiles = []);\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    var bodyImagesFormData = handleFormData(bodyImageFiles)\n  \n    Promise.all([\n      bodyPost(bodyImagesFormData)\n    ]).then(\n      ([bodyUploads]) => {\n\n        var mentions = handleMentions(body, stripAllImgs)\n        \n        discardMentions(post, mentions, objsToClean)\n\n        var descriptions = stripAllImgs(body)\n\n        handleAllTextTextPost(allText, descriptions, title)\n\n        var instanceData = {\n          variants: {\n            title \n          },\n          allText: allText.current,\n          descriptions: descriptions,\n          descriptionImages: handleUploadedFiles(body, bodyUploads),\n          mentions: mentions,\n          user: Cookies.get('currentUser'),\n          tags, kind: 'TextPost',\n          objsToClean: objsToClean.current,\n          postId: post ? post._id : null\n        }\n        \n        createOrUpdatePost({\n          variables: {\n            instanceData: instanceData\n          }\n        })\n      }\n    )\n  }\n\n  const disabledBool = () => {\n    return !title && body.current.length === 0 && !description\n  }\n\n  const handleTextPostFormClass = () => {\n    if ((textPostActive && !uploading) || update) {\n      return 'postForm textPostForm active'\n    } else if ((textPostActive && uploading) || uploading) {\n      return 'postForm textPostForm hidden'\n    } else {\n      return 'postForm textPostForm none'\n    }\n  }\n  \n  \n  if (textPostActive || update) {\n    return (\n    <div\n      className={update ? 'postFormContainer update' : 'postFormContainer'}\n    >\n\n      <ProfilePic user={update ? post.user : user} />\n\n      <div\n        className={handleTextPostFormClass()}\n      >\n        <form\n          id={formId}\n          onSubmit={e => handleSubmit(e)}\n          onKeyPress={e => { e.key === 'Enter' && e.preventDefault() }}\n          encType={'multipart/form-data'}\n        >\n\n        <h3\n          className='userNameHeader'\n        >{update ? post.user.blogName : user.blogName}</h3>\n  \n        <TextPostInput\n          post={post}\n          update={update}\n          formInputId={formInputId}\n          title={title}\n          setTitle={setTitle}\n          render={render}\n          setRender={setRender}\n        />\n  \n        <BodyImageAndText\n          displayBodyImageAndTextInput={true}\n          post={post}\n          update={update}\n          formId={formId}\n          formInputId={formInputId}\n          objsToClean={objsToClean}\n          body={body}\n          bodyImageFiles={bodyImageFiles}\n          setBodyImageFiles={setBodyImageFiles}\n          description={description}\n          setDescription={setDescription}\n          render={render}\n          setRender={setRender}\n          errMessage={errMessage}\n          setErrMessage={setErrMessage}\n        />\n  \n        <Tags\n          post={post}\n          tag={tag}\n          setTag={setTag}\n          tags={tags}\n          setTags={setTags}\n        />\n\n          <div\n            className='closeOrPostContainer'\n          >\n            <div\n              className={'closeBtn'}\n              onClick={() => {\n                if (disabledBool()) {\n                  allowScroll(document)\n                  resetInputs()\n                  \n                  if (!update) {\n                    setTextPostActive(textPostActive = false)\n                    setPostFormModal(postFormModal = false)\n                  } else {\n                    setUpdate(update = false)\n                  }\n\n                  if (mobile) {\n                    setPostFormOpen(postFormOpen = false)\n                  }\n                } else  {\n                  setConfirmClose(confirmClose = true)\n                }\n              }}\n            >\n              Close\n            </div>\n\n            <ConfirmClose\n              mobile={mobile}\n              update={update}\n              setUpdate={setUpdate}\n              confirmClose={confirmClose}\n              setConfirmClose={setConfirmClose}\n              allowScroll={allowScroll}\n              resetInputs={resetInputs}\n              setFormActive={setTextPostActive}\n              formActive={textPostActive}\n              setPostFormModal={setPostFormModal}\n              postFormModal={postFormModal}\n              postFormOpen={postFormOpen}\n              setPostFormOpen={setPostFormOpen}\n            />\n            \n            <button\n              type='submit'\n              className={disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn'}\n              disabled={disabledBool()}\n              onClick={() => {\n                if (description) {\n                  var textObj = {\n                    kind: 'text',\n                    srcType: 'text',\n                    content: description,\n                    displayIdx: body.current.length,\n                    uniqId: randomstring.generate({\n                      length: 12,\n                      charset: 'alphabetic'\n                    })\n                  }\n\n                  body.current.push(textObj)\n                \n                  setDescription(description = '')\n                }\n                \n                if (tag) {\n                  handleTagInput(\n                    tag, setTag,\n                    tags, setTags\n                  )\n                }\n                \n                if (!update) {\n                  setPostFormModal(postFormModal = false)\n                }\n\n                setUploading(uploading = true)\n              }}\n            >\n              {post ? 'Update' : 'Post'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n    )\n  } else {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default TextPostForm;"]},"metadata":{},"sourceType":"module"}