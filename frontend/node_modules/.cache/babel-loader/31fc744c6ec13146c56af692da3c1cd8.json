{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitReader = void 0;\n\nconst Token = require(\"token-types\");\n\nclass BitReader {\n  constructor(tokenizer) {\n    this.tokenizer = tokenizer;\n    this.pos = 0;\n    this.dword = undefined;\n  }\n  /**\r\n   *\r\n   * @param bits 1..30 bits\r\n   */\n\n\n  async read(bits) {\n    while (this.dword === undefined) {\n      this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n    }\n\n    let out = this.dword;\n    this.pos += bits;\n\n    if (this.pos < 32) {\n      out >>>= 32 - this.pos;\n      return out & (1 << bits) - 1;\n    } else {\n      this.pos -= 32;\n\n      if (this.pos === 0) {\n        this.dword = undefined;\n        return out & (1 << bits) - 1;\n      } else {\n        this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n\n        if (this.pos) {\n          out <<= this.pos;\n          out |= this.dword >>> 32 - this.pos;\n        }\n\n        return out & (1 << bits) - 1;\n      }\n    }\n  }\n\n  async ignore(bits) {\n    if (this.pos > 0) {\n      const remaining = 32 - this.pos;\n      this.dword = undefined;\n      bits -= remaining;\n      this.pos = 0;\n    }\n\n    const remainder = bits % 32;\n    const numOfWords = (bits - remainder) / 32;\n    await this.tokenizer.ignore(numOfWords * 4);\n    return this.read(remainder);\n  }\n\n}\n\nexports.BitReader = BitReader;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/musepack/sv7/BitReader.js"],"names":["Object","defineProperty","exports","value","BitReader","Token","require","constructor","tokenizer","pos","dword","undefined","read","bits","readToken","UINT32_LE","out","ignore","remaining","remainder","numOfWords"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMF,SAAN,CAAgB;AACZG,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,GAAL,GAAW,CAAX;AACA,SAAKC,KAAL,GAAaC,SAAb;AACH;AACD;AACJ;AACA;AACA;;;AACc,QAAJC,IAAI,CAACC,IAAD,EAAO;AACb,WAAO,KAAKH,KAAL,KAAeC,SAAtB,EAAiC;AAC7B,WAAKD,KAAL,GAAa,MAAM,KAAKF,SAAL,CAAeM,SAAf,CAAyBT,KAAK,CAACU,SAA/B,CAAnB;AACH;;AACD,QAAIC,GAAG,GAAG,KAAKN,KAAf;AACA,SAAKD,GAAL,IAAYI,IAAZ;;AACA,QAAI,KAAKJ,GAAL,GAAW,EAAf,EAAmB;AACfO,MAAAA,GAAG,MAAO,KAAK,KAAKP,GAApB;AACA,aAAOO,GAAG,GAAI,CAAC,KAAKH,IAAN,IAAc,CAA5B;AACH,KAHD,MAIK;AACD,WAAKJ,GAAL,IAAY,EAAZ;;AACA,UAAI,KAAKA,GAAL,KAAa,CAAjB,EAAoB;AAChB,aAAKC,KAAL,GAAaC,SAAb;AACA,eAAOK,GAAG,GAAI,CAAC,KAAKH,IAAN,IAAc,CAA5B;AACH,OAHD,MAIK;AACD,aAAKH,KAAL,GAAa,MAAM,KAAKF,SAAL,CAAeM,SAAf,CAAyBT,KAAK,CAACU,SAA/B,CAAnB;;AACA,YAAI,KAAKN,GAAT,EAAc;AACVO,UAAAA,GAAG,KAAK,KAAKP,GAAb;AACAO,UAAAA,GAAG,IAAI,KAAKN,KAAL,KAAgB,KAAK,KAAKD,GAAjC;AACH;;AACD,eAAOO,GAAG,GAAI,CAAC,KAAKH,IAAN,IAAc,CAA5B;AACH;AACJ;AACJ;;AACW,QAANI,MAAM,CAACJ,IAAD,EAAO;AACf,QAAI,KAAKJ,GAAL,GAAW,CAAf,EAAkB;AACd,YAAMS,SAAS,GAAG,KAAK,KAAKT,GAA5B;AACA,WAAKC,KAAL,GAAaC,SAAb;AACAE,MAAAA,IAAI,IAAIK,SAAR;AACA,WAAKT,GAAL,GAAW,CAAX;AACH;;AACD,UAAMU,SAAS,GAAGN,IAAI,GAAG,EAAzB;AACA,UAAMO,UAAU,GAAG,CAACP,IAAI,GAAGM,SAAR,IAAqB,EAAxC;AACA,UAAM,KAAKX,SAAL,CAAeS,MAAf,CAAsBG,UAAU,GAAG,CAAnC,CAAN;AACA,WAAO,KAAKR,IAAL,CAAUO,SAAV,CAAP;AACH;;AA/CW;;AAiDhBjB,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BitReader = void 0;\r\nconst Token = require(\"token-types\");\r\nclass BitReader {\r\n    constructor(tokenizer) {\r\n        this.tokenizer = tokenizer;\r\n        this.pos = 0;\r\n        this.dword = undefined;\r\n    }\r\n    /**\r\n     *\r\n     * @param bits 1..30 bits\r\n     */\r\n    async read(bits) {\r\n        while (this.dword === undefined) {\r\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\r\n        }\r\n        let out = this.dword;\r\n        this.pos += bits;\r\n        if (this.pos < 32) {\r\n            out >>>= (32 - this.pos);\r\n            return out & ((1 << bits) - 1);\r\n        }\r\n        else {\r\n            this.pos -= 32;\r\n            if (this.pos === 0) {\r\n                this.dword = undefined;\r\n                return out & ((1 << bits) - 1);\r\n            }\r\n            else {\r\n                this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\r\n                if (this.pos) {\r\n                    out <<= this.pos;\r\n                    out |= this.dword >>> (32 - this.pos);\r\n                }\r\n                return out & ((1 << bits) - 1);\r\n            }\r\n        }\r\n    }\r\n    async ignore(bits) {\r\n        if (this.pos > 0) {\r\n            const remaining = 32 - this.pos;\r\n            this.dword = undefined;\r\n            bits -= remaining;\r\n            this.pos = 0;\r\n        }\r\n        const remainder = bits % 32;\r\n        const numOfWords = (bits - remainder) / 32;\r\n        await this.tokenizer.ignore(numOfWords * 4);\r\n        return this.read(remainder);\r\n    }\r\n}\r\nexports.BitReader = BitReader;\r\n"]},"metadata":{},"sourceType":"script"}