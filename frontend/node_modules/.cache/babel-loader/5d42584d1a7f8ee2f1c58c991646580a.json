{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MpcSv8Parser = void 0;\n\nconst initDebug = require(\"debug\");\n\nconst BasicParser_1 = require(\"../../common/BasicParser\");\n\nconst SV8 = require(\"./StreamVersion8\");\n\nconst APEv2Parser_1 = require(\"../../apev2/APEv2Parser\");\n\nconst FourCC_1 = require(\"../../common/FourCC\");\n\nconst debug = initDebug('music-metadata:parser:musepack');\n\nclass MpcSv8Parser extends BasicParser_1.BasicParser {\n  constructor() {\n    super(...arguments);\n    this.audioLength = 0;\n  }\n\n  async parse() {\n    const signature = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n    if (signature !== 'MPCK') throw new Error('Invalid Magic number');\n    this.metadata.setFormat('container', 'Musepack, SV8');\n    return this.parsePacket();\n  }\n\n  async parsePacket() {\n    const sv8reader = new SV8.StreamReader(this.tokenizer);\n\n    do {\n      const header = await sv8reader.readPacketHeader();\n      debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\n\n      switch (header.key) {\n        case 'SH':\n          // Stream Header\n          const sh = await sv8reader.readStreamHeader(header.payloadLength);\n          this.metadata.setFormat('numberOfSamples', sh.sampleCount);\n          this.metadata.setFormat('sampleRate', sh.sampleFrequency);\n          this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\n          this.metadata.setFormat('numberOfChannels', sh.channelCount);\n          break;\n\n        case 'AP':\n          // Audio Packet\n          this.audioLength += header.payloadLength;\n          await this.tokenizer.ignore(header.payloadLength);\n          break;\n\n        case 'RG': // Replaygain\n\n        case 'EI': // Encoder Info\n\n        case 'SO': // Seek Table Offset\n\n        case 'ST': // Seek Table\n\n        case 'CT':\n          // Chapter-Tag\n          await this.tokenizer.ignore(header.payloadLength);\n          break;\n\n        case 'SE':\n          // Stream End\n          this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\n          return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n\n        default:\n          throw new Error(`Unexpected header: ${header.key}`);\n      }\n    } while (true);\n  }\n\n}\n\nexports.MpcSv8Parser = MpcSv8Parser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js"],"names":["Object","defineProperty","exports","value","MpcSv8Parser","initDebug","require","BasicParser_1","SV8","APEv2Parser_1","FourCC_1","debug","BasicParser","constructor","arguments","audioLength","parse","signature","tokenizer","readToken","FourCcToken","Error","metadata","setFormat","parsePacket","sv8reader","StreamReader","header","readPacketHeader","key","payloadLength","sh","readStreamHeader","sampleCount","sampleFrequency","channelCount","ignore","format","duration","APEv2Parser","tryParseApeHeader","options"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MpcSv8Parser = void 0;\r\nconst initDebug = require(\"debug\");\r\nconst BasicParser_1 = require(\"../../common/BasicParser\");\r\nconst SV8 = require(\"./StreamVersion8\");\r\nconst APEv2Parser_1 = require(\"../../apev2/APEv2Parser\");\r\nconst FourCC_1 = require(\"../../common/FourCC\");\r\nconst debug = initDebug('music-metadata:parser:musepack');\r\nclass MpcSv8Parser extends BasicParser_1.BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.audioLength = 0;\r\n    }\r\n    async parse() {\r\n        const signature = await this.tokenizer.readToken(FourCC_1.FourCcToken);\r\n        if (signature !== 'MPCK')\r\n            throw new Error('Invalid Magic number');\r\n        this.metadata.setFormat('container', 'Musepack, SV8');\r\n        return this.parsePacket();\r\n    }\r\n    async parsePacket() {\r\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\r\n        do {\r\n            const header = await sv8reader.readPacketHeader();\r\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\r\n            switch (header.key) {\r\n                case 'SH': // Stream Header\r\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\r\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\r\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\r\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\r\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\r\n                    break;\r\n                case 'AP': // Audio Packet\r\n                    this.audioLength += header.payloadLength;\r\n                    await this.tokenizer.ignore(header.payloadLength);\r\n                    break;\r\n                case 'RG': // Replaygain\r\n                case 'EI': // Encoder Info\r\n                case 'SO': // Seek Table Offset\r\n                case 'ST': // Seek Table\r\n                case 'CT': // Chapter-Tag\r\n                    await this.tokenizer.ignore(header.payloadLength);\r\n                    break;\r\n                case 'SE': // Stream End\r\n                    this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\r\n                    return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\r\n                default:\r\n                    throw new Error(`Unexpected header: ${header.key}`);\r\n            }\r\n        } while (true);\r\n    }\r\n}\r\nexports.MpcSv8Parser = MpcSv8Parser;\r\n"]},"metadata":{},"sourceType":"script"}