{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormatChunk = exports.ChannelType = exports.DsdChunk = exports.ChunkHeader = void 0;\n\nvar Token = require(\"token-types\");\n\nvar FourCC_1 = require(\"../common/FourCC\");\n/**\r\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\r\n */\n\n\nexports.ChunkHeader = {\n  len: 12,\n  get: function get(buf, off) {\n    return {\n      id: FourCC_1.FourCcToken.get(buf, off),\n      size: Token.UINT64_LE.get(buf, off + 4)\n    };\n  }\n};\n/**\r\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\r\n */\n\nexports.DsdChunk = {\n  len: 16,\n  get: function get(buf, off) {\n    return {\n      fileSize: Token.INT64_LE.get(buf, off),\n      metadataPointer: Token.INT64_LE.get(buf, off + 8)\n    };\n  }\n};\nvar ChannelType;\n\n(function (ChannelType) {\n  ChannelType[ChannelType[\"mono\"] = 1] = \"mono\";\n  ChannelType[ChannelType[\"stereo\"] = 2] = \"stereo\";\n  ChannelType[ChannelType[\"channels\"] = 3] = \"channels\";\n  ChannelType[ChannelType[\"quad\"] = 4] = \"quad\";\n  ChannelType[ChannelType[\"4 channels\"] = 5] = \"4 channels\";\n  ChannelType[ChannelType[\"5 channels\"] = 6] = \"5 channels\";\n  ChannelType[ChannelType[\"5.1 channels\"] = 7] = \"5.1 channels\";\n})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));\n/**\r\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\r\n */\n\n\nexports.FormatChunk = {\n  len: 40,\n  get: function get(buf, off) {\n    return {\n      formatVersion: Token.INT32_LE.get(buf, off),\n      formatID: Token.INT32_LE.get(buf, off + 4),\n      channelType: Token.INT32_LE.get(buf, off + 8),\n      channelNum: Token.INT32_LE.get(buf, off + 12),\n      samplingFrequency: Token.INT32_LE.get(buf, off + 16),\n      bitsPerSample: Token.INT32_LE.get(buf, off + 20),\n      sampleCount: Token.INT64_LE.get(buf, off + 24),\n      blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)\n    };\n  }\n};","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/dsf/DsfChunk.js"],"names":["Object","defineProperty","exports","value","FormatChunk","ChannelType","DsdChunk","ChunkHeader","Token","require","FourCC_1","len","get","buf","off","id","FourCcToken","size","UINT64_LE","fileSize","INT64_LE","metadataPointer","formatVersion","INT32_LE","formatID","channelType","channelNum","samplingFrequency","bitsPerSample","sampleCount","blockSizePerChannel"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FormatChunk = exports.ChannelType = exports.DsdChunk = exports.ChunkHeader = void 0;\r\nconst Token = require(\"token-types\");\r\nconst FourCC_1 = require(\"../common/FourCC\");\r\n/**\r\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\r\n */\r\nexports.ChunkHeader = {\r\n    len: 12,\r\n    get: (buf, off) => {\r\n        return { id: FourCC_1.FourCcToken.get(buf, off), size: Token.UINT64_LE.get(buf, off + 4) };\r\n    }\r\n};\r\n/**\r\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\r\n */\r\nexports.DsdChunk = {\r\n    len: 16,\r\n    get: (buf, off) => {\r\n        return {\r\n            fileSize: Token.INT64_LE.get(buf, off),\r\n            metadataPointer: Token.INT64_LE.get(buf, off + 8)\r\n        };\r\n    }\r\n};\r\nvar ChannelType;\r\n(function (ChannelType) {\r\n    ChannelType[ChannelType[\"mono\"] = 1] = \"mono\";\r\n    ChannelType[ChannelType[\"stereo\"] = 2] = \"stereo\";\r\n    ChannelType[ChannelType[\"channels\"] = 3] = \"channels\";\r\n    ChannelType[ChannelType[\"quad\"] = 4] = \"quad\";\r\n    ChannelType[ChannelType[\"4 channels\"] = 5] = \"4 channels\";\r\n    ChannelType[ChannelType[\"5 channels\"] = 6] = \"5 channels\";\r\n    ChannelType[ChannelType[\"5.1 channels\"] = 7] = \"5.1 channels\";\r\n})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));\r\n/**\r\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\r\n */\r\nexports.FormatChunk = {\r\n    len: 40,\r\n    get: (buf, off) => {\r\n        return {\r\n            formatVersion: Token.INT32_LE.get(buf, off),\r\n            formatID: Token.INT32_LE.get(buf, off + 4),\r\n            channelType: Token.INT32_LE.get(buf, off + 8),\r\n            channelNum: Token.INT32_LE.get(buf, off + 12),\r\n            samplingFrequency: Token.INT32_LE.get(buf, off + 16),\r\n            bitsPerSample: Token.INT32_LE.get(buf, off + 20),\r\n            sampleCount: Token.INT64_LE.get(buf, off + 24),\r\n            blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}