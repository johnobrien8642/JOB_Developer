{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Common = void 0;\n\nvar Token = require(\"token-types\");\n\nvar FourCC_1 = require(\"../common/FourCC\");\n\nvar Common = /*#__PURE__*/function () {\n  function Common(header, isAifc) {\n    _classCallCheck(this, Common);\n\n    this.isAifc = isAifc;\n    var minimumChunkSize = isAifc ? 22 : 18;\n    if (header.chunkSize < minimumChunkSize) throw new Error(\"COMMON CHUNK size should always be at least \".concat(minimumChunkSize));\n    this.len = header.chunkSize;\n  }\n\n  _createClass(Common, [{\n    key: \"get\",\n    value: function get(buf, off) {\n      // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\n      var shift = buf.readUInt16BE(off + 8) - 16398;\n      var baseSampleRate = buf.readUInt16BE(off + 8 + 2);\n      var res = {\n        numChannels: buf.readUInt16BE(off),\n        numSampleFrames: buf.readUInt32BE(off + 2),\n        sampleSize: buf.readUInt16BE(off + 6),\n        sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\n      };\n\n      if (this.isAifc) {\n        res.compressionType = FourCC_1.FourCcToken.get(buf, off + 18);\n\n        if (this.len > 22) {\n          var strLen = buf.readInt8(off + 22);\n          var padding = (strLen + 1) % 2;\n\n          if (23 + strLen + padding === this.len) {\n            res.compressionName = new Token.StringType(strLen, 'binary').get(buf, off + 23);\n          } else {\n            throw new Error('Illegal pstring length');\n          }\n        }\n      } else {\n        res.compressionName = 'PCM';\n      }\n\n      return res;\n    }\n  }]);\n\n  return Common;\n}();\n\nexports.Common = Common;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/aiff/AiffToken.js"],"names":["Object","defineProperty","exports","value","Common","Token","require","FourCC_1","header","isAifc","minimumChunkSize","chunkSize","Error","len","buf","off","shift","readUInt16BE","baseSampleRate","res","numChannels","numSampleFrames","readUInt32BE","sampleSize","sampleRate","Math","abs","compressionType","FourCcToken","get","strLen","readInt8","padding","compressionName","StringType"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAxB;;IACMF,M;AACF,kBAAYI,MAAZ,EAAoBC,MAApB,EAA4B;AAAA;;AACxB,SAAKA,MAAL,GAAcA,MAAd;AACA,QAAMC,gBAAgB,GAAGD,MAAM,GAAG,EAAH,GAAQ,EAAvC;AACA,QAAID,MAAM,CAACG,SAAP,GAAmBD,gBAAvB,EACI,MAAM,IAAIE,KAAJ,uDAAyDF,gBAAzD,EAAN;AACJ,SAAKG,GAAL,GAAWL,MAAM,CAACG,SAAlB;AACH;;;;WACD,aAAIG,GAAJ,EAASC,GAAT,EAAc;AACV;AACA,UAAMC,KAAK,GAAGF,GAAG,CAACG,YAAJ,CAAiBF,GAAG,GAAG,CAAvB,IAA4B,KAA1C;AACA,UAAMG,cAAc,GAAGJ,GAAG,CAACG,YAAJ,CAAiBF,GAAG,GAAG,CAAN,GAAU,CAA3B,CAAvB;AACA,UAAMI,GAAG,GAAG;AACRC,QAAAA,WAAW,EAAEN,GAAG,CAACG,YAAJ,CAAiBF,GAAjB,CADL;AAERM,QAAAA,eAAe,EAAEP,GAAG,CAACQ,YAAJ,CAAiBP,GAAG,GAAG,CAAvB,CAFT;AAGRQ,QAAAA,UAAU,EAAET,GAAG,CAACG,YAAJ,CAAiBF,GAAG,GAAG,CAAvB,CAHJ;AAIRS,QAAAA,UAAU,EAAER,KAAK,GAAG,CAAR,GAAYE,cAAc,IAAIO,IAAI,CAACC,GAAL,CAASV,KAAT,CAA9B,GAAgDE,cAAc,IAAIF;AAJtE,OAAZ;;AAMA,UAAI,KAAKP,MAAT,EAAiB;AACbU,QAAAA,GAAG,CAACQ,eAAJ,GAAsBpB,QAAQ,CAACqB,WAAT,CAAqBC,GAArB,CAAyBf,GAAzB,EAA8BC,GAAG,GAAG,EAApC,CAAtB;;AACA,YAAI,KAAKF,GAAL,GAAW,EAAf,EAAmB;AACf,cAAMiB,MAAM,GAAGhB,GAAG,CAACiB,QAAJ,CAAahB,GAAG,GAAG,EAAnB,CAAf;AACA,cAAMiB,OAAO,GAAG,CAACF,MAAM,GAAG,CAAV,IAAe,CAA/B;;AACA,cAAI,KAAKA,MAAL,GAAcE,OAAd,KAA0B,KAAKnB,GAAnC,EAAwC;AACpCM,YAAAA,GAAG,CAACc,eAAJ,GAAsB,IAAI5B,KAAK,CAAC6B,UAAV,CAAqBJ,MAArB,EAA6B,QAA7B,EAAuCD,GAAvC,CAA2Cf,GAA3C,EAAgDC,GAAG,GAAG,EAAtD,CAAtB;AACH,WAFD,MAGK;AACD,kBAAM,IAAIH,KAAJ,CAAU,wBAAV,CAAN;AACH;AACJ;AACJ,OAZD,MAaK;AACDO,QAAAA,GAAG,CAACc,eAAJ,GAAsB,KAAtB;AACH;;AACD,aAAOd,GAAP;AACH;;;;;;AAELjB,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Common = void 0;\r\nconst Token = require(\"token-types\");\r\nconst FourCC_1 = require(\"../common/FourCC\");\r\nclass Common {\r\n    constructor(header, isAifc) {\r\n        this.isAifc = isAifc;\r\n        const minimumChunkSize = isAifc ? 22 : 18;\r\n        if (header.chunkSize < minimumChunkSize)\r\n            throw new Error(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\r\n        this.len = header.chunkSize;\r\n    }\r\n    get(buf, off) {\r\n        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\r\n        const shift = buf.readUInt16BE(off + 8) - 16398;\r\n        const baseSampleRate = buf.readUInt16BE(off + 8 + 2);\r\n        const res = {\r\n            numChannels: buf.readUInt16BE(off),\r\n            numSampleFrames: buf.readUInt32BE(off + 2),\r\n            sampleSize: buf.readUInt16BE(off + 6),\r\n            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\r\n        };\r\n        if (this.isAifc) {\r\n            res.compressionType = FourCC_1.FourCcToken.get(buf, off + 18);\r\n            if (this.len > 22) {\r\n                const strLen = buf.readInt8(off + 22);\r\n                const padding = (strLen + 1) % 2;\r\n                if (23 + strLen + padding === this.len) {\r\n                    res.compressionName = new Token.StringType(strLen, 'binary').get(buf, off + 23);\r\n                }\r\n                else {\r\n                    throw new Error('Illegal pstring length');\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            res.compressionName = 'PCM';\r\n        }\r\n        return res;\r\n    }\r\n}\r\nexports.Common = Common;\r\n"]},"metadata":{},"sourceType":"script"}