{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/util/components/forms/Body_Image_And_Text.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport BodyImageDnD from './dragAndDrop/Body_Image_DnD';\nimport BodyTextDnD from '../forms/dragAndDrop/Body_Text_DnD';\nimport BodyImageInput from './inputTypes/Body_Image_Input';\nimport DescriptionStringInput from './inputTypes/Description_String_Input';\nimport PostUpdateUtil from '../../functions/post_update_util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  reassembleBody\n} = PostUpdateUtil;\n\nconst BodyImageAndText = ({\n  displayBodyImageAndTextInput,\n  post,\n  formId,\n  update,\n  formInputId,\n  objsToClean,\n  body,\n  bodyImageFiles,\n  setBodyImageFiles,\n  description,\n  setDescription,\n  render,\n  setRender,\n  errMessage,\n  setErrMessage\n}) => {\n  _s();\n\n  useEffect(() => {\n    if (post) {\n      //eslint-disable-next-line\n      reassembleBody(body, post.descriptionImages, post.descriptions);\n      setRender(render + 1);\n    } //eslint-disable-next-line\n\n  }, []);\n\n  if (displayBodyImageAndTextInput) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'bodyPreview',\n      children: [body.current.map((obj, i) => {\n        if (obj.srcType === 'newImgFile' || obj.srcType === 'newImgLink' || obj.srcType === 'oldImgUpload' || obj.srcType === 'oldImgLink') {\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(BodyImageDnD, {\n              bodyIdx: i,\n              img: obj,\n              body: body,\n              bodyImageFiles: bodyImageFiles,\n              setBodyImageFiles: setBodyImageFiles,\n              render: render,\n              setRender: setRender,\n              objsToClean: objsToClean\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 21\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 19\n          }, this);\n        } else if (obj.srcType === 'text' || obj.srcType === 'oldText') {\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(BodyTextDnD, {\n              bodyIdx: i,\n              update: update,\n              formInputId: formInputId,\n              text: obj,\n              body: body,\n              bodyImageFiles: bodyImageFiles,\n              setBodyImageFiles: setBodyImageFiles,\n              render: render,\n              setRender: setRender,\n              objsToClean: objsToClean\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 21\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 19\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this);\n        }\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bodyImageOrDescriptionStringContainer\",\n        children: [/*#__PURE__*/_jsxDEV(BodyImageInput, {\n          formId: formId,\n          body: body,\n          bodyImageFiles: bodyImageFiles,\n          setBodyImageFiles: setBodyImageFiles,\n          render: render,\n          setRender: setRender,\n          errMessage: errMessage,\n          setErrMessage: setErrMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DescriptionStringInput, {\n          body: body,\n          update: update,\n          description: description,\n          setDescription: setDescription,\n          formInputId: formInputId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(BodyImageAndText, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = BodyImageAndText;\nexport default BodyImageAndText;\n\nvar _c;\n\n$RefreshReg$(_c, \"BodyImageAndText\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/util/components/forms/Body_Image_And_Text.js"],"names":["React","useEffect","BodyImageDnD","BodyTextDnD","BodyImageInput","DescriptionStringInput","PostUpdateUtil","reassembleBody","BodyImageAndText","displayBodyImageAndTextInput","post","formId","update","formInputId","objsToClean","body","bodyImageFiles","setBodyImageFiles","description","setDescription","render","setRender","errMessage","setErrMessage","descriptionImages","descriptions","current","map","obj","i","srcType"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\nimport BodyImageDnD from './dragAndDrop/Body_Image_DnD'\nimport BodyTextDnD from '../forms/dragAndDrop/Body_Text_DnD'\nimport BodyImageInput from './inputTypes/Body_Image_Input';\nimport DescriptionStringInput from './inputTypes/Description_String_Input';\n\nimport PostUpdateUtil from '../../functions/post_update_util.js';\nconst { reassembleBody } = PostUpdateUtil;\n\nconst BodyImageAndText = ({\n  displayBodyImageAndTextInput,\n  post, \n  formId, \n  update,\n  formInputId, \n  objsToClean,\n  body, \n  bodyImageFiles,\n  setBodyImageFiles, \n  description,\n  setDescription, \n  render,\n  setRender, \n  errMessage,\n  setErrMessage\n}) => {\n\n  useEffect(() => {\n    if (post) {\n      //eslint-disable-next-line\n      reassembleBody(body, post.descriptionImages, post.descriptions)\n      setRender(render + 1)\n    }\n    //eslint-disable-next-line\n  }, [])\n\n  if (displayBodyImageAndTextInput) {\n    return(\n    <div\n      className={'bodyPreview'}\n    >\n        {body.current.map((obj, i) => {\n            if (\n                obj.srcType === 'newImgFile' ||\n                obj.srcType === 'newImgLink' ||\n                obj.srcType === 'oldImgUpload' ||\n                obj.srcType === 'oldImgLink'\n              ) {\n                return (\n                  <React.Fragment\n                    key={i}\n                  >\n                    <BodyImageDnD\n                      bodyIdx={i}\n                      img={obj}\n                      body={body}\n                      bodyImageFiles={bodyImageFiles}\n                      setBodyImageFiles={setBodyImageFiles}\n                      render={render}\n                      setRender={setRender}\n                      objsToClean={objsToClean}       \n                    />\n                  </React.Fragment>\n                )\n              } else if (\n                  obj.srcType === 'text' ||\n                  obj.srcType === 'oldText'\n                ) {\n                return (\n                  <React.Fragment\n                    key={i}\n                  >\n                    <BodyTextDnD\n                      bodyIdx={i}\n                      update={update}\n                      formInputId={formInputId}\n                      text={obj}\n                      body={body}\n                      bodyImageFiles={bodyImageFiles}\n                      setBodyImageFiles={setBodyImageFiles}\n                      render={render}\n                      setRender={setRender}\n                      objsToClean={objsToClean}\n                    />\n                  </React.Fragment>\n                )\n            } else {\n              return (\n                <div></div>\n              )\n            }\n        })}\n  \n        <div\n          className='bodyImageOrDescriptionStringContainer'\n        >\n            <BodyImageInput\n              formId={formId}\n              body={body}\n              bodyImageFiles={bodyImageFiles}\n              setBodyImageFiles={setBodyImageFiles}\n              render={render}\n              setRender={setRender}\n              errMessage={errMessage}\n              setErrMessage={setErrMessage}\n            />\n  \n            <DescriptionStringInput\n              body={body}\n              update={update}\n              description={description}\n              setDescription={setDescription}\n              formInputId={formInputId}\n            />\n          </div>\n        </div>\n    )\n  } else {\n    return (\n      <div></div>\n    )\n  }\n  \n}\n\nexport default BodyImageAndText;"]},"metadata":{},"sourceType":"module"}