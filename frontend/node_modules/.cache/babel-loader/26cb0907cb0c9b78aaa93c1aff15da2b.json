{"ast":null,"code":"import React from'react';import{useApolloClient}from'@apollo/client';import randomstring from'randomstring';import DOMPurify from'dompurify';import Editor from'ckeditor5-custom-build/build/ckeditor';import{CKEditor}from'@ckeditor/ckeditor5-react';import Queries from'../../../../../../graphql/queries.js';import PostFormUtil from'../../../functions/post_form_util.js';import{jsx as _jsx}from\"react/jsx-runtime\";var FETCH_USERS_FOR_MENTIONS=Queries.FETCH_USERS_FOR_MENTIONS;var removeBodyObj=PostFormUtil.removeBodyObj,drag=PostFormUtil.drag,onDropBody=PostFormUtil.onDropBody,allowDrop=PostFormUtil.allowDrop,MentionCustomization=PostFormUtil.MentionCustomization;var BodyTextDnD=function BodyTextDnD(_ref){var bodyIdx=_ref.bodyIdx,text=_ref.text,body=_ref.body,bodyImageFiles=_ref.bodyImageFiles,setBodyImageFiles=_ref.setBodyImageFiles,objsToClean=_ref.objsToClean,render=_ref.render,setRender=_ref.setRender;var client=useApolloClient();var editorConfiguration={extraPlugins:[MentionCustomization],balloonToolbar:['bold','italic','underline','link','blockQuote','undo','redo'],mention:{feeds:[{marker:'@',feed:function feed(query){return client.query({query:FETCH_USERS_FOR_MENTIONS,variables:{filter:query}}).then(function(res){return res.data.fetchUsersForMentions.map(function(u){return{id:'@'+u.blogName,actualId:randomstring.generate({length:12,charset:'alphabetic'})};});});},minimumCharacters:1}]}};return/*#__PURE__*/_jsx(\"div\",{id:text.uniqId,className:\"draggable textContentContainer\",onDrop:function onDrop(e){onDropBody(e,bodyIdx,body,bodyImageFiles);setRender(render+1);},onDragStart:function onDragStart(e){return drag(e,bodyIdx,JSON.stringify(text));},onDragOver:function onDragOver(e){return allowDrop(e);},draggable:\"true\",children:/*#__PURE__*/_jsx(CKEditor,{id:\"\".concat(text.uniqId),editor:Editor,config:editorConfiguration,data:DOMPurify.sanitize(text.content),onChange:function onChange(e,editor){body.current[bodyIdx].content=editor.getData();},onBlur:function onBlur(){if(body.current[bodyIdx].content===''){removeBodyObj(text.srcType,body,setBodyImageFiles,bodyImageFiles,objsToClean,bodyIdx);setRender(render+1);}}})});};export default BodyTextDnD;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/util/components/forms/dragAndDrop/Body_Text_DnD.js"],"names":["React","useApolloClient","randomstring","DOMPurify","Editor","CKEditor","Queries","PostFormUtil","FETCH_USERS_FOR_MENTIONS","removeBodyObj","drag","onDropBody","allowDrop","MentionCustomization","BodyTextDnD","bodyIdx","text","body","bodyImageFiles","setBodyImageFiles","objsToClean","render","setRender","client","editorConfiguration","extraPlugins","balloonToolbar","mention","feeds","marker","feed","query","variables","filter","then","res","data","fetchUsersForMentions","map","u","id","blogName","actualId","generate","length","charset","minimumCharacters","uniqId","e","JSON","stringify","sanitize","content","editor","current","getData","srcType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport randomstring from 'randomstring';\nimport DOMPurify from 'dompurify';\n\nimport Editor from 'ckeditor5-custom-build/build/ckeditor';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n\nimport Queries from '../../../../../../graphql/queries.js';\nimport PostFormUtil from '../../../functions/post_form_util.js';\nconst { FETCH_USERS_FOR_MENTIONS } = Queries;\nconst { removeBodyObj, drag, \n        onDropBody, allowDrop, MentionCustomization } = PostFormUtil;\n\nconst BodyTextDnD = ({\n  bodyIdx,\n  text, body,\n  bodyImageFiles,\n  setBodyImageFiles,\n  objsToClean,\n  render, setRender,\n}) => {\n  const client = useApolloClient();\n\n  const editorConfiguration = {\n    extraPlugins: [MentionCustomization],\n    balloonToolbar: [\n      'bold',\n      'italic',\n      'underline',\n      'link',\n      'blockQuote',\n      'undo',\n      'redo'\n    ],\n    mention: {\n      feeds: [\n        {\n          marker: '@',\n          feed: query => {\n            return client.query({\n              query: FETCH_USERS_FOR_MENTIONS,\n              variables: {\n                filter: query\n              }\n            }).then(res => {\n              return res.data.fetchUsersForMentions.map(u => ({\n                id: '@' + u.blogName,\n                actualId: randomstring.generate({\n                  length: 12,\n                  charset: 'alphabetic'\n                })\n              }))\n            })\n          },\n          minimumCharacters: 1\n        }\n      ]\n    }\n  }\n\n  return (\n    <div\n      id={text.uniqId}\n      className='draggable textContentContainer'\n      onDrop={e => {\n        onDropBody(\n          e, bodyIdx, body,\n          bodyImageFiles,\n        )\n        \n        setRender(render + 1)\n      }}\n      onDragStart={e => drag(e, bodyIdx, JSON.stringify(text))}\n      onDragOver={e => allowDrop(e)}\n      draggable='true'\n    >\n      <CKEditor\n        id={`${text.uniqId}`}\n        editor={ Editor }\n        config={ editorConfiguration }\n        data={DOMPurify.sanitize(text.content)}\n        onChange={(e, editor) => {\n          body.current[bodyIdx].content = editor.getData()\n        }}\n        onBlur={() => {\n          if (body.current[bodyIdx].content === '') {\n            removeBodyObj(\n              text.srcType, body,\n              setBodyImageFiles,\n              bodyImageFiles,\n              objsToClean, bodyIdx\n            )\n\n            setRender(render + 1)\n          }\n        }}\n      />\n    </div>\n  )\n}\n\nexport default BodyTextDnD;"]},"metadata":{},"sourceType":"module"}