{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/util/components/social/Repost_Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport PostShow from '../../../types/showOrUpdate/PostShow';\nimport ConfirmClose from '../../../../nav/Confirm_Close';\nimport DescriptionStringInput from '../forms/inputTypes/Description_String_Input';\nimport Queries from '../../../../../graphql/queries';\nimport Mutations from '../../../../../graphql/mutations';\nimport PostFormUtil from '../../functions/post_form_util.js';\nimport UpdateCacheUtil from '../../functions/update_cache_util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  CREATE_REPOST,\n  UPDATE_REPOST\n} = Mutations;\nconst {\n  FETCH_USER_FEED\n} = Queries;\nconst {\n  preventScroll,\n  allowScroll\n} = PostFormUtil;\nconst {\n  postCreate\n} = UpdateCacheUtil;\n\nconst RepostForm = ({\n  post,\n  show,\n  repostActive,\n  setRepostActive,\n  update,\n  setUpdate\n}) => {\n  _s();\n\n  let [repostCaption, setRepostCaption] = useState(''); // let repostTrail = useState([])\n\n  let [confirmClose, setConfirmClose] = useState(false);\n  useEffect(() => {\n    if (repostActive) {\n      preventScroll(repostActive, document);\n    }\n\n    return () => {\n      allowScroll(document);\n    };\n  });\n  let [repost] = useMutation(CREATE_REPOST, {\n    update(client, {\n      data\n    }) {\n      const {\n        repost\n      } = data;\n      var createQuery = FETCH_USER_FEED;\n      postCreate(client, repost, Cookies.get('currentUser'), createQuery);\n    },\n\n    onCompleted(data) {\n      resetInputs();\n      setRepostActive(repostActive = false);\n    },\n\n    onError(error) {\n      console.log(error);\n    }\n\n  });\n  let [updateRepost] = useMutation(UPDATE_REPOST, {\n    onCompleted() {\n      setUpdate(update = false);\n    },\n\n    onError(error) {\n      console.log(error);\n    }\n\n  });\n\n  const resetInputs = () => {\n    setRepostCaption(repostCaption = '');\n  };\n\n  const handleSubmit = () => {\n    var repostObj = {};\n\n    if (post.kind === 'Repost') {\n      repostObj.repostedId = post._id;\n      repostObj.postId = post.post._id;\n      repostObj.postKind = post.post.kind;\n      repostObj.postAuthor = post.post.user._id;\n    } else {\n      repostObj.repostedId = post._id;\n      repostObj.postId = post._id;\n      repostObj.postKind = post.kind;\n      repostObj.postAuthor = post.user._id;\n    }\n\n    if (update) {\n      repostObj.captionId = post.repostTrail[post.repostTrail.length - 1]._id;\n      repostObj.update = true;\n    } else {\n      repostObj.update = false;\n      repostObj.updatedRepostTrail = null;\n    }\n\n    repostObj.previousReposter = post.kind === 'Repost' ? post.user : null;\n    repostObj.repostCaption = repostCaption;\n    repostObj.user = Cookies.get('currentUser');\n    repostObj.repostedFrom = post.user.blogName;\n\n    if (update) {\n      updateRepost({\n        variables: {\n          repostData: repostObj\n        }\n      });\n    } else {\n      repost({\n        variables: {\n          repostData: repostObj\n        }\n      });\n    }\n  };\n\n  const handleRepostFormHeader = () => {\n    if (!update) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userRepostFormHeader\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            className: \"user\",\n            to: `/view/blog/${Cookies.get('currentUser')}`,\n            children: Cookies.get('currentUser')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://img.icons8.com/material-two-tone/24/ffffff/retweet.png\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            className: \"repostedFrom\",\n            to: `/view/blog/${post.user.blogName}`,\n            children: post.user.blogName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const handleConfirmCloseForm = () => {\n    if (!update) {\n      return /*#__PURE__*/_jsxDEV(ConfirmClose, {\n        update: update,\n        setUpdate: setUpdate,\n        confirmClose: confirmClose,\n        setConfirmClose: setConfirmClose,\n        allowScroll: allowScroll,\n        resetInputs: resetInputs,\n        setFormActive: setRepostActive,\n        formActive: repostActive,\n        repost: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const handleConfirmCloseUpdate = () => {\n    if (update) {\n      return /*#__PURE__*/_jsxDEV(ConfirmClose, {\n        update: update,\n        setUpdate: setUpdate,\n        confirmClose: confirmClose,\n        setConfirmClose: setConfirmClose,\n        allowScroll: allowScroll,\n        resetInputs: resetInputs,\n        setFormActive: setRepostActive,\n        formActive: repostActive,\n        repost: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const handleCaptionInput = () => {\n    if (!update) {\n      return /*#__PURE__*/_jsxDEV(DescriptionStringInput, {\n        repost: true,\n        description: repostCaption,\n        setDescription: setRepostCaption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (repostActive || update) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: update ? 'repostModal none' : 'repostModal',\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: update ? 'repostForm update' : 'repostForm',\n          children: [handleRepostFormHeader(), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              handleSubmit();\n            },\n            children: [/*#__PURE__*/_jsxDEV(PostShow, {\n              post: post,\n              repostFormBool: true,\n              update: update,\n              repostCaption: repostCaption,\n              setRepostCaption: setRepostCaption\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), handleCaptionInput(), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"closeOrPostContainer\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"closeBtn\",\n                type: \"button\",\n                onClick: () => {\n                  if (repostCaption || update) {\n                    setConfirmClose(confirmClose = true);\n                  } else {\n                    setRepostActive(repostActive = false);\n                  }\n                },\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 17\n              }, this), handleConfirmCloseForm(), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"formSubmitBtn\",\n                type: \"submit\",\n                children: update ? 'Update' : 'Repost'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), handleConfirmCloseUpdate()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(RepostForm, \"8c5CWOMvc/1jf62WZRXCylKto+g=\", false, function () {\n  return [useMutation, useMutation];\n});\n\n_c = RepostForm;\nexport default RepostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RepostForm\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/util/components/social/Repost_Form.js"],"names":["React","useState","useEffect","useMutation","Link","Cookies","PostShow","ConfirmClose","DescriptionStringInput","Queries","Mutations","PostFormUtil","UpdateCacheUtil","CREATE_REPOST","UPDATE_REPOST","FETCH_USER_FEED","preventScroll","allowScroll","postCreate","RepostForm","post","show","repostActive","setRepostActive","update","setUpdate","repostCaption","setRepostCaption","confirmClose","setConfirmClose","document","repost","client","data","createQuery","get","onCompleted","resetInputs","onError","error","console","log","updateRepost","handleSubmit","repostObj","kind","repostedId","_id","postId","postKind","postAuthor","user","captionId","repostTrail","length","updatedRepostTrail","previousReposter","repostedFrom","blogName","variables","repostData","handleRepostFormHeader","handleConfirmCloseForm","handleConfirmCloseUpdate","handleCaptionInput","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport Cookies from 'js-cookie';\n\nimport PostShow from '../../../types/showOrUpdate/PostShow'\nimport ConfirmClose from '../../../../nav/Confirm_Close';\nimport DescriptionStringInput from '../forms/inputTypes/Description_String_Input';\n\nimport Queries from '../../../../../graphql/queries';\nimport Mutations from '../../../../../graphql/mutations';\nimport PostFormUtil from '../../functions/post_form_util.js';\nimport UpdateCacheUtil from '../../functions/update_cache_util.js';\nconst { CREATE_REPOST, UPDATE_REPOST } = Mutations;\nconst { FETCH_USER_FEED } = Queries;\nconst { preventScroll, allowScroll } = PostFormUtil;\nconst { postCreate } = UpdateCacheUtil;\n\nconst RepostForm = ({\n  post,\n  show,\n  repostActive,\n  setRepostActive,\n  update,\n  setUpdate\n}) => {\n  let [repostCaption, setRepostCaption] = useState('');\n  // let repostTrail = useState([])\n  let [confirmClose, setConfirmClose] = useState(false);\n\n  useEffect(() => {\n\n    if (repostActive) {\n      preventScroll(repostActive, document)\n    }\n\n    return () => {\n      allowScroll(document)\n    }\n  })\n  \n  let [repost] = useMutation(CREATE_REPOST, {\n    update(client, { data }) {\n      const { repost } = data;\n      var createQuery = FETCH_USER_FEED\n\n      postCreate(client, repost, Cookies.get('currentUser'), createQuery)\n    },\n    onCompleted(data) {\n      resetInputs();\n      setRepostActive(repostActive = false)\n    },\n    onError(error) {\n      console.log(error)\n    }\n  })\n  \n  let [updateRepost] = useMutation(UPDATE_REPOST, {\n    onCompleted() {\n      setUpdate(update = false)\n    },\n    onError(error) {\n      console.log(error)\n    }\n  })\n  \n  const resetInputs = () => {\n    setRepostCaption(repostCaption = '');\n  }\n\n  const handleSubmit = () => {\n    var repostObj = {}\n\n    if (post.kind === 'Repost') {\n      repostObj.repostedId = post._id\n      repostObj.postId = post.post._id\n      repostObj.postKind = post.post.kind\n      repostObj.postAuthor = post.post.user._id\n    } else {\n      repostObj.repostedId = post._id\n      repostObj.postId = post._id\n      repostObj.postKind = post.kind\n      repostObj.postAuthor = post.user._id\n    }\n\n    if (update) {\n      repostObj.captionId = post.repostTrail[post.repostTrail.length - 1]._id\n      repostObj.update = true\n    } else {\n      repostObj.update = false\n      repostObj.updatedRepostTrail = null\n    }\n    \n    repostObj.previousReposter = post.kind === 'Repost' ? post.user : null\n    repostObj.repostCaption = repostCaption\n    repostObj.user = Cookies.get('currentUser')\n    repostObj.repostedFrom = post.user.blogName\n\n    if (update) {\n      updateRepost({\n        variables: {\n          repostData: repostObj\n        }\n      })\n    } else {\n      repost({\n        variables: {\n          repostData: repostObj\n        }\n      })\n    }\n  }\n\n  const handleRepostFormHeader = () => {\n    if (!update) {\n      return (\n        <div\n          className='userRepostFormHeader'\n        >\n          <span>\n            <Link \n              className='user'\n              to={`/view/blog/${Cookies.get('currentUser')}`}>\n              {Cookies.get('currentUser')}\n            </Link> \n            <img \n              src=\"https://img.icons8.com/material-two-tone/24/ffffff/retweet.png\"\n              alt=''\n            />\n            <Link\n              className='repostedFrom'\n              to={`/view/blog/${post.user.blogName}`}\n            >\n              {post.user.blogName}\n            </Link>\n          </span>\n        </div>\n      )\n    }\n  }\n  \n  const handleConfirmCloseForm = () => {\n    if (!update) {\n      return (\n        <ConfirmClose\n          update={update}\n          setUpdate={setUpdate}\n          confirmClose={confirmClose}\n          setConfirmClose={setConfirmClose}\n          allowScroll={allowScroll}\n          resetInputs={resetInputs}\n          setFormActive={setRepostActive}\n          formActive={repostActive}\n          repost={true}\n        />\n      )\n    }\n  }\n\n  const handleConfirmCloseUpdate = () => {\n    if (update) {\n      return (\n        <ConfirmClose\n          update={update}\n          setUpdate={setUpdate}\n          confirmClose={confirmClose}\n          setConfirmClose={setConfirmClose}\n          allowScroll={allowScroll}\n          resetInputs={resetInputs}\n          setFormActive={setRepostActive}\n          formActive={repostActive}\n          repost={true}\n        />\n      )\n    }\n  }\n\n  const handleCaptionInput = () => {\n    if (!update) {\n      return (\n        <DescriptionStringInput\n          repost={true}\n          description={repostCaption}\n          setDescription={setRepostCaption}\n        />\n      )\n    }\n  }\n\n  if (repostActive || update) {\n    return (\n      <React.Fragment>\n        <div \n          className={update ? 'repostModal none' : 'repostModal'}\n        >\n          <div\n            className={update ? 'repostForm update' : 'repostForm'}\n          >\n\n            {handleRepostFormHeader()}\n\n            <form\n              onSubmit={e => {\n                e.preventDefault();\n                handleSubmit()\n              }}\n            >\n            \n              <PostShow\n                post={post}\n                repostFormBool={true}\n                update={update}\n                repostCaption={repostCaption}\n                setRepostCaption={setRepostCaption}\n              />\n\n              {handleCaptionInput()}\n\n              <div\n                className='closeOrPostContainer'\n              >\n                <button\n                  className='closeBtn'\n                  type='button'\n                  onClick={() => {\n                    if (repostCaption || update) {\n                      setConfirmClose(confirmClose = true)\n                    } else {\n                      setRepostActive(repostActive = false)\n                    }\n                  }} \n                >\n                  Close\n                </button>\n              \n                {handleConfirmCloseForm()}\n\n                <button\n                  className='formSubmitBtn'\n                  type='submit'\n                >\n                  {update ? 'Update' : 'Repost'}\n                </button>\n              </div>\n            </form>\n          </div>\n          {handleConfirmCloseUpdate()}\n        </div>\n      </React.Fragment>\n    )\n  } else {\n    return (\n      <div></div>\n    )\n  }\n}\n\nexport default RepostForm;"]},"metadata":{},"sourceType":"module"}