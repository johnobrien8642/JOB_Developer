{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readXingHeader = exports.XingHeaderFlags = exports.LameEncoderVersion = exports.InfoTagHeaderTag = void 0;\n\nvar Token = require(\"token-types\");\n\nvar Util_1 = require(\"../common/Util\");\n\nvar ExtendedLameHeader_1 = require(\"./ExtendedLameHeader\");\n/**\r\n * Info Tag: Xing, LAME\r\n */\n\n\nexports.InfoTagHeaderTag = new Token.StringType(4, 'ascii');\n/**\r\n * LAME TAG value\r\n * Did not find any official documentation for this\r\n * Value e.g.: \"3.98.4\"\r\n */\n\nexports.LameEncoderVersion = new Token.StringType(6, 'ascii');\n/**\r\n * Info Tag\r\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\r\n */\n\nexports.XingHeaderFlags = {\n  len: 4,\n  get: function get(buf, off) {\n    return {\n      frames: Util_1.default.isBitSet(buf, off, 31),\n      bytes: Util_1.default.isBitSet(buf, off, 30),\n      toc: Util_1.default.isBitSet(buf, off, 29),\n      vbrScale: Util_1.default.isBitSet(buf, off, 28)\n    };\n  }\n}; // /**\n//  * XING Header Tag\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n//  */\n\nfunction readXingHeader(_x) {\n  return _readXingHeader.apply(this, arguments);\n}\n\nfunction _readXingHeader() {\n  _readXingHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenizer) {\n    var flags, xingInfoTag, lameTag, match, majorMinorVersion, version;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return tokenizer.readToken(exports.XingHeaderFlags);\n\n          case 2:\n            flags = _context.sent;\n            xingInfoTag = {};\n\n            if (!flags.frames) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 7;\n            return tokenizer.readToken(Token.UINT32_BE);\n\n          case 7:\n            xingInfoTag.numFrames = _context.sent;\n\n          case 8:\n            if (!flags.bytes) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 11;\n            return tokenizer.readToken(Token.UINT32_BE);\n\n          case 11:\n            xingInfoTag.streamSize = _context.sent;\n\n          case 12:\n            if (!flags.toc) {\n              _context.next = 16;\n              break;\n            }\n\n            xingInfoTag.toc = Buffer.alloc(100);\n            _context.next = 16;\n            return tokenizer.readBuffer(xingInfoTag.toc);\n\n          case 16:\n            if (!flags.vbrScale) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.next = 19;\n            return tokenizer.readToken(Token.UINT32_BE);\n\n          case 19:\n            xingInfoTag.vbrScale = _context.sent;\n\n          case 20:\n            _context.next = 22;\n            return tokenizer.peekToken(new Token.StringType(4, 'ascii'));\n\n          case 22:\n            lameTag = _context.sent;\n\n            if (!(lameTag === 'LAME')) {\n              _context.next = 38;\n              break;\n            }\n\n            _context.next = 26;\n            return tokenizer.ignore(4);\n\n          case 26:\n            _context.next = 28;\n            return tokenizer.readToken(new Token.StringType(5, 'ascii'));\n\n          case 28:\n            _context.t0 = _context.sent;\n            xingInfoTag.lame = {\n              version: _context.t0\n            };\n            match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\n\n            if (!match) {\n              _context.next = 38;\n              break;\n            }\n\n            majorMinorVersion = xingInfoTag.lame.version.match(/\\d+.\\d+/g)[0]; // e.g. 3.97\n\n            version = majorMinorVersion.split('.').map(function (n) {\n              return parseInt(n, 10);\n            });\n\n            if (!(version[0] >= 3 && version[1] >= 90)) {\n              _context.next = 38;\n              break;\n            }\n\n            _context.next = 37;\n            return tokenizer.readToken(ExtendedLameHeader_1.ExtendedLameHeader);\n\n          case 37:\n            xingInfoTag.lame.extended = _context.sent;\n\n          case 38:\n            return _context.abrupt(\"return\", xingInfoTag);\n\n          case 39:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _readXingHeader.apply(this, arguments);\n}\n\nexports.readXingHeader = readXingHeader;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/mpeg/XingTag.js"],"names":["Object","defineProperty","exports","value","readXingHeader","XingHeaderFlags","LameEncoderVersion","InfoTagHeaderTag","Token","require","Util_1","ExtendedLameHeader_1","StringType","len","get","buf","off","frames","default","isBitSet","bytes","toc","vbrScale","tokenizer","readToken","flags","xingInfoTag","UINT32_BE","numFrames","streamSize","Buffer","alloc","readBuffer","peekToken","lameTag","ignore","lame","version","match","majorMinorVersion","split","map","n","parseInt","ExtendedLameHeader","extended"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.readXingHeader = exports.XingHeaderFlags = exports.LameEncoderVersion = exports.InfoTagHeaderTag = void 0;\r\nconst Token = require(\"token-types\");\r\nconst Util_1 = require(\"../common/Util\");\r\nconst ExtendedLameHeader_1 = require(\"./ExtendedLameHeader\");\r\n/**\r\n * Info Tag: Xing, LAME\r\n */\r\nexports.InfoTagHeaderTag = new Token.StringType(4, 'ascii');\r\n/**\r\n * LAME TAG value\r\n * Did not find any official documentation for this\r\n * Value e.g.: \"3.98.4\"\r\n */\r\nexports.LameEncoderVersion = new Token.StringType(6, 'ascii');\r\n/**\r\n * Info Tag\r\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\r\n */\r\nexports.XingHeaderFlags = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        return {\r\n            frames: Util_1.default.isBitSet(buf, off, 31),\r\n            bytes: Util_1.default.isBitSet(buf, off, 30),\r\n            toc: Util_1.default.isBitSet(buf, off, 29),\r\n            vbrScale: Util_1.default.isBitSet(buf, off, 28)\r\n        };\r\n    }\r\n};\r\n// /**\r\n//  * XING Header Tag\r\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\r\n//  */\r\nasync function readXingHeader(tokenizer) {\r\n    const flags = await tokenizer.readToken(exports.XingHeaderFlags);\r\n    const xingInfoTag = {};\r\n    if (flags.frames) {\r\n        xingInfoTag.numFrames = await tokenizer.readToken(Token.UINT32_BE);\r\n    }\r\n    if (flags.bytes) {\r\n        xingInfoTag.streamSize = await tokenizer.readToken(Token.UINT32_BE);\r\n    }\r\n    if (flags.toc) {\r\n        xingInfoTag.toc = Buffer.alloc(100);\r\n        await tokenizer.readBuffer(xingInfoTag.toc);\r\n    }\r\n    if (flags.vbrScale) {\r\n        xingInfoTag.vbrScale = await tokenizer.readToken(Token.UINT32_BE);\r\n    }\r\n    const lameTag = await tokenizer.peekToken(new Token.StringType(4, 'ascii'));\r\n    if (lameTag === 'LAME') {\r\n        await tokenizer.ignore(4);\r\n        xingInfoTag.lame = {\r\n            version: await tokenizer.readToken(new Token.StringType(5, 'ascii'))\r\n        };\r\n        const match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\r\n        if (match) {\r\n            const majorMinorVersion = xingInfoTag.lame.version.match(/\\d+.\\d+/g)[0]; // e.g. 3.97\r\n            const version = majorMinorVersion.split('.').map(n => parseInt(n, 10));\r\n            if (version[0] >= 3 && version[1] >= 90) {\r\n                xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader_1.ExtendedLameHeader);\r\n            }\r\n        }\r\n    }\r\n    return xingInfoTag;\r\n}\r\nexports.readXingHeader = readXingHeader;\r\n"]},"metadata":{},"sourceType":"script"}