{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeexParser = void 0;\n\nconst initDebug = require(\"debug\");\n\nconst Speex = require(\"./Speex\");\n\nconst VorbisParser_1 = require(\"../vorbis/VorbisParser\");\n\nconst debug = initDebug('music-metadata:parser:ogg:speex');\n/**\r\n * Speex, RFC 5574\r\n * Ref:\r\n *   https://www.speex.org/docs/manual/speex-manual/\r\n *   https://tools.ietf.org/html/rfc5574\r\n */\n\nclass SpeexParser extends VorbisParser_1.VorbisParser {\n  constructor(metadata, options, tokenizer) {\n    super(metadata, options);\n    this.tokenizer = tokenizer;\n  }\n  /**\r\n   * Parse first Speex Ogg page\r\n   * @param {IPageHeader} header\r\n   * @param {Buffer} pageData\r\n   */\n\n\n  parseFirstPage(header, pageData) {\n    debug('First Ogg/Speex page');\n    const speexHeader = Speex.Header.get(pageData, 0);\n    this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\n    this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\n    this.metadata.setFormat('sampleRate', speexHeader.rate);\n\n    if (speexHeader.bitrate !== -1) {\n      this.metadata.setFormat('bitrate', speexHeader.bitrate);\n    }\n  }\n\n}\n\nexports.SpeexParser = SpeexParser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/music-metadata/lib/ogg/speex/SpeexParser.js"],"names":["Object","defineProperty","exports","value","SpeexParser","initDebug","require","Speex","VorbisParser_1","debug","VorbisParser","constructor","metadata","options","tokenizer","parseFirstPage","header","pageData","speexHeader","Header","get","setFormat","version","nb_channels","rate","bitrate"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,OAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,wBAAD,CAA9B;;AACA,MAAMG,KAAK,GAAGJ,SAAS,CAAC,iCAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMD,WAAN,SAA0BI,cAAc,CAACE,YAAzC,CAAsD;AAClDC,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoBC,SAApB,EAA+B;AACtC,UAAMF,QAAN,EAAgBC,OAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,cAAc,CAACC,MAAD,EAASC,QAAT,EAAmB;AAC7BR,IAAAA,KAAK,CAAC,sBAAD,CAAL;AACA,UAAMS,WAAW,GAAGX,KAAK,CAACY,MAAN,CAAaC,GAAb,CAAiBH,QAAjB,EAA2B,CAA3B,CAApB;AACA,SAAKL,QAAL,CAAcS,SAAd,CAAwB,OAAxB,EAAkC,SAAQH,WAAW,CAACI,OAAQ,EAA9D;AACA,SAAKV,QAAL,CAAcS,SAAd,CAAwB,kBAAxB,EAA4CH,WAAW,CAACK,WAAxD;AACA,SAAKX,QAAL,CAAcS,SAAd,CAAwB,YAAxB,EAAsCH,WAAW,CAACM,IAAlD;;AACA,QAAIN,WAAW,CAACO,OAAZ,KAAwB,CAAC,CAA7B,EAAgC;AAC5B,WAAKb,QAAL,CAAcS,SAAd,CAAwB,SAAxB,EAAmCH,WAAW,CAACO,OAA/C;AACH;AACJ;;AAnBiD;;AAqBtDvB,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SpeexParser = void 0;\r\nconst initDebug = require(\"debug\");\r\nconst Speex = require(\"./Speex\");\r\nconst VorbisParser_1 = require(\"../vorbis/VorbisParser\");\r\nconst debug = initDebug('music-metadata:parser:ogg:speex');\r\n/**\r\n * Speex, RFC 5574\r\n * Ref:\r\n *   https://www.speex.org/docs/manual/speex-manual/\r\n *   https://tools.ietf.org/html/rfc5574\r\n */\r\nclass SpeexParser extends VorbisParser_1.VorbisParser {\r\n    constructor(metadata, options, tokenizer) {\r\n        super(metadata, options);\r\n        this.tokenizer = tokenizer;\r\n    }\r\n    /**\r\n     * Parse first Speex Ogg page\r\n     * @param {IPageHeader} header\r\n     * @param {Buffer} pageData\r\n     */\r\n    parseFirstPage(header, pageData) {\r\n        debug('First Ogg/Speex page');\r\n        const speexHeader = Speex.Header.get(pageData, 0);\r\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\r\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\r\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\r\n        if (speexHeader.bitrate !== -1) {\r\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\r\n        }\r\n    }\r\n}\r\nexports.SpeexParser = SpeexParser;\r\n"]},"metadata":{},"sourceType":"script"}