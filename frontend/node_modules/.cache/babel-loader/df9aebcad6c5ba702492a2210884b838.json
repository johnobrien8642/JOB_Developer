{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadableWebToNodeStream = void 0;\n\nconst readable_stream_1 = require(\"readable-stream\");\n/**\n * Converts a Web-API stream into Node stream.Readable class\n * Node stream readable: https://nodejs.org/api/stream.html#stream_readable_streams\n * Web API readable-stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n * Node readable stream: https://nodejs.org/api/stream.html#stream_readable_streams\n */\n\n\nclass ReadableWebToNodeStream extends readable_stream_1.Readable {\n  /**\n   *\n   * @param stream Readable​Stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n   */\n  constructor(stream) {\n    super();\n    this.bytesRead = 0;\n    this.released = false;\n    this.reader = stream.getReader();\n  }\n  /**\n   * Implementation of readable._read(size).\n   * When readable._read() is called, if data is available from the resource,\n   * the implementation should begin pushing that data into the read queue\n   * https://nodejs.org/api/stream.html#stream_readable_read_size_1\n   */\n\n\n  async _read() {\n    // Should start pushing data into the queue\n    // Read data from the underlying Web-API-readable-stream\n    if (this.released) {\n      this.push(null); // Signal EOF\n\n      return;\n    }\n\n    this.pendingRead = this.reader.read();\n    const data = await this.pendingRead; // clear the promise before pushing pushing new data to the queue and allow sequential calls to _read()\n\n    delete this.pendingRead;\n\n    if (data.done || this.released) {\n      this.push(null); // Signal EOF\n    } else {\n      this.bytesRead += data.value.length;\n      this.push(data.value); // Push new data to the queue\n    }\n  }\n  /**\n   * If there is no unresolved read call to Web-API Readable​Stream immediately returns;\n   * otherwise will wait until the read is resolved.\n   */\n\n\n  async waitForReadToComplete() {\n    if (this.pendingRead) {\n      await this.pendingRead;\n    }\n  }\n  /**\n   * Close wrapper\n   */\n\n\n  async close() {\n    await this.syncAndRelease();\n  }\n\n  async syncAndRelease() {\n    this.released = true;\n    await this.waitForReadToComplete();\n    await this.reader.releaseLock();\n  }\n\n}\n\nexports.ReadableWebToNodeStream = ReadableWebToNodeStream;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/readable-web-to-node-stream/lib/index.js"],"names":["Object","defineProperty","exports","value","ReadableWebToNodeStream","readable_stream_1","require","Readable","constructor","stream","bytesRead","released","reader","getReader","_read","push","pendingRead","read","data","done","length","waitForReadToComplete","close","syncAndRelease","releaseLock"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,iBAAD,CAAjC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,uBAAN,SAAsCC,iBAAiB,CAACE,QAAxD,CAAiE;AAC7D;AACJ;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,MAAL,GAAcH,MAAM,CAACI,SAAP,EAAd;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACe,QAALC,KAAK,GAAG;AACV;AACA;AACA,QAAI,KAAKH,QAAT,EAAmB;AACf,WAAKI,IAAL,CAAU,IAAV,EADe,CACE;;AACjB;AACH;;AACD,SAAKC,WAAL,GAAmB,KAAKJ,MAAL,CAAYK,IAAZ,EAAnB;AACA,UAAMC,IAAI,GAAG,MAAM,KAAKF,WAAxB,CARU,CASV;;AACA,WAAO,KAAKA,WAAZ;;AACA,QAAIE,IAAI,CAACC,IAAL,IAAa,KAAKR,QAAtB,EAAgC;AAC5B,WAAKI,IAAL,CAAU,IAAV,EAD4B,CACX;AACpB,KAFD,MAGK;AACD,WAAKL,SAAL,IAAkBQ,IAAI,CAACf,KAAL,CAAWiB,MAA7B;AACA,WAAKL,IAAL,CAAUG,IAAI,CAACf,KAAf,EAFC,CAEsB;AAC1B;AACJ;AACD;AACJ;AACA;AACA;;;AAC+B,QAArBkB,qBAAqB,GAAG;AAC1B,QAAI,KAAKL,WAAT,EAAsB;AAClB,YAAM,KAAKA,WAAX;AACH;AACJ;AACD;AACJ;AACA;;;AACe,QAALM,KAAK,GAAG;AACV,UAAM,KAAKC,cAAL,EAAN;AACH;;AACmB,QAAdA,cAAc,GAAG;AACnB,SAAKZ,QAAL,GAAgB,IAAhB;AACA,UAAM,KAAKU,qBAAL,EAAN;AACA,UAAM,KAAKT,MAAL,CAAYY,WAAZ,EAAN;AACH;;AAvD4D;;AAyDjEtB,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadableWebToNodeStream = void 0;\nconst readable_stream_1 = require(\"readable-stream\");\n/**\n * Converts a Web-API stream into Node stream.Readable class\n * Node stream readable: https://nodejs.org/api/stream.html#stream_readable_streams\n * Web API readable-stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n * Node readable stream: https://nodejs.org/api/stream.html#stream_readable_streams\n */\nclass ReadableWebToNodeStream extends readable_stream_1.Readable {\n    /**\n     *\n     * @param stream Readable​Stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n     */\n    constructor(stream) {\n        super();\n        this.bytesRead = 0;\n        this.released = false;\n        this.reader = stream.getReader();\n    }\n    /**\n     * Implementation of readable._read(size).\n     * When readable._read() is called, if data is available from the resource,\n     * the implementation should begin pushing that data into the read queue\n     * https://nodejs.org/api/stream.html#stream_readable_read_size_1\n     */\n    async _read() {\n        // Should start pushing data into the queue\n        // Read data from the underlying Web-API-readable-stream\n        if (this.released) {\n            this.push(null); // Signal EOF\n            return;\n        }\n        this.pendingRead = this.reader.read();\n        const data = await this.pendingRead;\n        // clear the promise before pushing pushing new data to the queue and allow sequential calls to _read()\n        delete this.pendingRead;\n        if (data.done || this.released) {\n            this.push(null); // Signal EOF\n        }\n        else {\n            this.bytesRead += data.value.length;\n            this.push(data.value); // Push new data to the queue\n        }\n    }\n    /**\n     * If there is no unresolved read call to Web-API Readable​Stream immediately returns;\n     * otherwise will wait until the read is resolved.\n     */\n    async waitForReadToComplete() {\n        if (this.pendingRead) {\n            await this.pendingRead;\n        }\n    }\n    /**\n     * Close wrapper\n     */\n    async close() {\n        await this.syncAndRelease();\n    }\n    async syncAndRelease() {\n        this.released = true;\n        await this.waitForReadToComplete();\n        await this.reader.releaseLock();\n    }\n}\nexports.ReadableWebToNodeStream = ReadableWebToNodeStream;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}