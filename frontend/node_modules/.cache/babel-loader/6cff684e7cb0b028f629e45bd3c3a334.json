{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/JOB_Developer/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink } from '@apollo/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport { onError } from '@apollo/client/link/error';\nimport { setContext } from '@apollo/client/link/context';\nimport Cookies from 'js-cookie';\nimport App from './components/App';\nimport './index.css';\nimport Queries from './graphql/queries';\nimport Mutations from './graphql/mutations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  IS_LOGGED_IN\n} = Queries;\nconst {\n  VERIFY_USER\n} = Mutations;\nconst token = Cookies.get('auth-token');\nconst port = process.env.PORT || 5000;\nconst authLink = setContext((_, {\n  headers\n}) => {\n  return {\n    headers: { ...headers,\n      authorization: token ? token : \"\"\n    }\n  };\n});\nconst httpLink = new HttpLink({\n  uri: 'https://rumblr.app/graphql'\n});\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) graphQLErrors.forEach(({\n    message,\n    locations,\n    path\n  }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    typePolicies: {\n      UserType: {\n        fields: {\n          userFollows: {\n            merge(existing = [], incoming = []) {\n              return incoming;\n            }\n\n          },\n          tagFollows: {\n            merge(existing = [], incoming = []) {\n              return incoming;\n            }\n\n          }\n        }\n      },\n      Query: {\n        fields: {\n          fetchLikesRepostsAndComments: {\n            merge: (existing = [], incoming = []) => {\n              return incoming;\n            }\n          },\n          fetchUserFeed: {\n            keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n              //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n              //object with __typename is added to the beginning of the array.\n              //This tells merge function that we are adding or deleting a\n              //post and would like the incoming array returned.\n              if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n                return incoming.slice(1, incoming.length);\n              } else {\n                const elements = [...existing, ...incoming].reduce((array, current) => {\n                  return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n                }, []);\n                return elements;\n              }\n            }\n          },\n          fetchTagFeed: {\n            keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n              //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n              //object with __typename is added to the beginning of the array.\n              //This tells merge function that we are adding or deleting a\n              //post and would like the incoming array returned.\n              if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n                return incoming.slice(1, incoming.length);\n              } else {\n                const elements = [...existing, ...incoming].reduce((array, current) => {\n                  return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n                }, []);\n                return elements;\n              }\n            }\n          },\n          fetchAllUserActivity: {\n            keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n              //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n              //object with __typename is added to the beginning of the array.\n              //This tells merge function that we are adding or deleting a\n              //post and would like the incoming array returned.\n              if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n                return incoming.slice(1, incoming.length);\n              } else {\n                const elements = [...existing, ...incoming].reduce((array, current) => {\n                  return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n                }, []);\n                return elements;\n              }\n            }\n          },\n          fetchUserFollowers: {\n            keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n              //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n              //object with __typename is added to the beginning of the array.\n              //This tells merge function that we are adding or deleting a\n              //post and would like the incoming array returned.\n              if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n                return incoming.slice(1, incoming.length);\n              } else {\n                const elements = [...existing, ...incoming].reduce((array, current) => {\n                  return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n                }, []);\n                return elements;\n              }\n            }\n          },\n          fetchFollowedUsers: {\n            keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n              //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n              //object with __typename is added to the beginning of the array.\n              //This tells merge function that we are adding or deleting a\n              //post and would like the incoming array returned.\n              if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n                return incoming.slice(1, incoming.length);\n              } else {\n                const elements = [...existing, ...incoming].reduce((array, current) => {\n                  return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n                }, []);\n                return elements;\n              }\n            }\n          },\n          fetchAllTagFeed: {\n            keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n              //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n              //object with __typename is added to the beginning of the array.\n              //This tells merge function that we are adding or deleting a\n              //post and would like the incoming array returned.\n              if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n                return incoming.slice(1, incoming.length);\n              } else {\n                const elements = [...existing, ...incoming].reduce((array, current) => {\n                  return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n                }, []);\n                return elements;\n              }\n            }\n          },\n          fetchCheckOutTheseBlogs: {\n            merge: (existing = [], incoming = []) => {\n              return incoming;\n            }\n          }\n        }\n      }\n    }\n  }),\n  errorLink\n});\nclient.writeQuery({\n  query: IS_LOGGED_IN,\n  data: {\n    isLoggedIn: Boolean(token)\n  }\n});\n\nif (token) {\n  client.mutate({\n    mutation: VERIFY_USER,\n    variables: {\n      token\n    }\n  }).then(({\n    data\n  }) => {\n    client.writeQuery({\n      query: IS_LOGGED_IN,\n      data: {\n        isLoggedIn: data.verifyUser.loggedIn\n      }\n    });\n  });\n}\n\nconst Root = () => {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Root;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 223,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Root\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/src/index.js"],"names":["React","ReactDOM","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","BrowserRouter","onError","setContext","Cookies","App","Queries","Mutations","IS_LOGGED_IN","VERIFY_USER","token","get","port","process","env","PORT","authLink","_","headers","authorization","httpLink","uri","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","log","client","link","concat","cache","typePolicies","UserType","fields","userFollows","merge","existing","incoming","tagFollows","Query","fetchLikesRepostsAndComments","fetchUserFeed","keyArgs","length","slice","elements","reduce","array","current","map","i","__ref","includes","fetchTagFeed","fetchAllUserActivity","fetchUserFollowers","fetchFollowedUsers","fetchAllTagFeed","fetchCheckOutTheseBlogs","writeQuery","query","data","isLoggedIn","Boolean","mutate","mutation","variables","then","verifyUser","loggedIn","Root","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, InMemoryCache,\n          ApolloProvider, HttpLink } from '@apollo/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport { onError } from '@apollo/client/link/error';\nimport { setContext } from '@apollo/client/link/context';\nimport Cookies from 'js-cookie';\n\nimport App from './components/App';\nimport './index.css';\n\nimport Queries from './graphql/queries'\nimport Mutations from './graphql/mutations'\n\nconst { IS_LOGGED_IN } = Queries;\nconst { VERIFY_USER } = Mutations;\n\nconst token = Cookies.get('auth-token');\nconst port = process.env.PORT || 5000;\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? token : \"\",\n    }\n  }\n});\n\nconst httpLink = new HttpLink({\n  uri: 'https://rumblr.app/graphql'\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n  graphQLErrors.forEach(({ message, locations, path }) =>\n    console.log(\n      `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n    ),\n  );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    typePolicies: {\n      UserType: {\n        fields: {\n          userFollows: {\n            merge(existing = [], incoming = []) {\n              return incoming\n            }\n          },\n          tagFollows: {\n            merge(existing = [], incoming = []) {\n              return incoming\n            }\n          }\n        }\n      },\n      Query: {\n       fields: {\n         fetchLikesRepostsAndComments: {\n           merge: (existing = [], incoming = []) => {\n             return incoming\n           }\n        },\n        fetchUserFeed: {\n          keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n\n            //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n            //object with __typename is added to the beginning of the array.\n            //This tells merge function that we are adding or deleting a\n            //post and would like the incoming array returned.\n            if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n              return incoming.slice(1, incoming.length)\n            } else {\n              const elements = [...existing, ...incoming].reduce((array, current) => {\n                return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n              }, []);\n            \n              return elements\n            }\n          }\n        },\n        fetchTagFeed: {\n          keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n\n            //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n            //object with __typename is added to the beginning of the array.\n            //This tells merge function that we are adding or deleting a\n            //post and would like the incoming array returned.\n            if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n              return incoming.slice(1, incoming.length)\n            } else {\n              const elements = [...existing, ...incoming].reduce((array, current) => {\n                return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n              }, []);\n            \n              return elements\n            }\n          }\n        },\n        fetchAllUserActivity: {\n          keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n            //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n            //object with __typename is added to the beginning of the array.\n            //This tells merge function that we are adding or deleting a\n            //post and would like the incoming array returned.\n            if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n              return incoming.slice(1, incoming.length)\n            } else {\n              const elements = [...existing, ...incoming].reduce((array, current) => {\n                return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n              }, []);\n            \n              return elements\n            }\n          }\n        },\n        fetchUserFollowers: {\n          keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n            //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n            //object with __typename is added to the beginning of the array.\n            //This tells merge function that we are adding or deleting a\n            //post and would like the incoming array returned.\n            if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n              return incoming.slice(1, incoming.length)\n            } else {\n              const elements = [...existing, ...incoming].reduce((array, current) => {\n                return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n              }, []);\n            \n              return elements\n            }\n          }\n        },\n        fetchFollowedUsers: {\n          keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n            //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n            //object with __typename is added to the beginning of the array.\n            //This tells merge function that we are adding or deleting a\n            //post and would like the incoming array returned.\n            if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n              return incoming.slice(1, incoming.length)\n            } else {\n              const elements = [...existing, ...incoming].reduce((array, current) => {\n                return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n              }, []);\n            \n              return elements\n            }\n          }\n        },\n        fetchAllTagFeed: {\n          keyArgs: ['query'],\n            merge: (existing = [], incoming = []) => {\n            //post_form_util.js #updateCacheCreate and #updateCacheDelete,\n            //object with __typename is added to the beginning of the array.\n            //This tells merge function that we are adding or deleting a\n            //post and would like the incoming array returned.\n            if (incoming.length > 0 && \"__typename\" in incoming[0]) {\n              return incoming.slice(1, incoming.length)\n            } else {\n              const elements = [...existing, ...incoming].reduce((array, current) => {\n                return array.map(i => i.__ref).includes(current.__ref) ? array : [...array, current];\n              }, []);\n            \n              return elements\n            }\n          }\n        },\n        fetchCheckOutTheseBlogs: {\n          merge: (existing = [], incoming = []) => {\n            return incoming\n          }\n        }\n      }\n    }\n  }\n  }),\n  errorLink\n})\n\nclient.writeQuery({\n  query: IS_LOGGED_IN,\n  data: {\n    isLoggedIn: Boolean(token)\n  }\n})\n\nif (token) {\n  client\n    .mutate({ mutation: VERIFY_USER, variables: { token } })\n    .then(({ data }) => {\n      client.writeQuery({\n        query: IS_LOGGED_IN,\n        data: {\n          isLoggedIn: data.verifyUser.loggedIn\n        }\n      })\n    })\n}\n\nconst Root = () => {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ApolloProvider>\n  )\n}\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n\n"]},"metadata":{},"sourceType":"module"}