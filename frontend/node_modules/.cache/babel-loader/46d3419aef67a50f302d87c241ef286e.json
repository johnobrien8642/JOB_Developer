{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _createForOfIteratorHelper = require(\"/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FrameParser = exports.parseGenre = void 0;\n\nvar initDebug = require(\"debug\");\n\nvar Token = require(\"token-types\");\n\nvar Util_1 = require(\"../common/Util\");\n\nvar ID3v2Token_1 = require(\"./ID3v2Token\");\n\nvar ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\n\nvar debug = initDebug('music-metadata:id3v2:frame-parser');\nvar defaultEnc = 'iso-8859-1';\n\nfunction parseGenre(origVal) {\n  // match everything inside parentheses\n  var genres = [];\n  var code;\n  var word = '';\n\n  var _iterator = _createForOfIteratorHelper(origVal),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var c = _step.value;\n\n      if (typeof code === 'string') {\n        if (c === '(' && code === '') {\n          word += '(';\n          code = undefined;\n        } else if (c === ')') {\n          if (word !== '') {\n            genres.push(word);\n            word = '';\n          }\n\n          var genre = parseGenreCode(code);\n\n          if (genre) {\n            genres.push(genre);\n          }\n\n          code = undefined;\n        } else code += c;\n      } else if (c === '(') {\n        code = '';\n      } else {\n        word += c;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (word) {\n    if (genres.length === 0 && word.match(/^\\d*$/)) {\n      word = ID3v1Parser_1.Genres[word];\n    }\n\n    genres.push(word);\n  }\n\n  return genres;\n}\n\nexports.parseGenre = parseGenre;\n\nfunction parseGenreCode(code) {\n  if (code === 'RX') return 'Remix';\n  if (code === 'CR') return 'Cover';\n\n  if (code.match(/^\\d*$/)) {\n    return ID3v1Parser_1.Genres[code];\n  }\n}\n\nvar FrameParser = /*#__PURE__*/function () {\n  /**\r\n   * Create id3v2 frame parser\r\n   * @param major - Major version, e.g. (4) for  id3v2.4\r\n   * @param warningCollector - Used to collect decode issue\r\n   */\n  function FrameParser(major, warningCollector) {\n    _classCallCheck(this, FrameParser);\n\n    this.major = major;\n    this.warningCollector = warningCollector;\n  }\n\n  _createClass(FrameParser, [{\n    key: \"readData\",\n    value: function readData(b, type, includeCovers) {\n      if (b.length === 0) {\n        this.warningCollector.addWarning(\"id3v2.\".concat(this.major, \" header has empty tag type=\").concat(type));\n        return;\n      }\n\n      var _ID3v2Token_1$TextEnc = ID3v2Token_1.TextEncodingToken.get(b, 0),\n          encoding = _ID3v2Token_1$TextEnc.encoding,\n          bom = _ID3v2Token_1$TextEnc.bom;\n\n      var length = b.length;\n      var offset = 0;\n      var output = []; // ToDo\n\n      var nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n      var fzero;\n      var out = {};\n      debug(\"Parsing tag type=\".concat(type, \", encoding=\").concat(encoding, \", bom=\").concat(bom));\n\n      switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n        case 'T*': // 4.2.1. Text information frames - details\n\n        case 'IPLS': // v2.3: Involved people list\n\n        case 'MVIN':\n        case 'MVNM':\n        case 'PCS':\n        case 'PCST':\n          var text = Util_1.default.decodeString(b.slice(1), encoding).replace(/\\x00+$/, '');\n\n          switch (type) {\n            case 'TMCL': // Musician credits list\n\n            case 'TIPL': // Involved people list\n\n            case 'IPLS':\n              // Involved people list\n              output = this.splitValue(type, text);\n              output = FrameParser.functionList(output);\n              break;\n\n            case 'TRK':\n            case 'TRCK':\n            case 'TPOS':\n              output = text;\n              break;\n\n            case 'TCOM':\n            case 'TEXT':\n            case 'TOLY':\n            case 'TOPE':\n            case 'TPE1':\n            case 'TSRC':\n              // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n              output = this.splitValue(type, text);\n              break;\n\n            case 'TCO':\n            case 'TCON':\n              output = this.splitValue(type, text).map(function (v) {\n                return parseGenre(v);\n              }).reduce(function (acc, val) {\n                return acc.concat(val);\n              }, []);\n              break;\n\n            case 'PCS':\n            case 'PCST':\n              // TODO: Why `default` not results `1` but `''`?\n              output = this.major >= 4 ? this.splitValue(type, text) : [text];\n              output = Array.isArray(output) && output[0] === '' ? 1 : 0;\n              break;\n\n            default:\n              output = this.major >= 4 ? this.splitValue(type, text) : [text];\n          }\n\n          break;\n\n        case 'TXXX':\n          output = FrameParser.readIdentifierAndData(b, offset + 1, length, encoding);\n          output = {\n            description: output.id,\n            text: this.splitValue(type, Util_1.default.decodeString(output.data, encoding).replace(/\\x00+$/, ''))\n          };\n          break;\n\n        case 'PIC':\n        case 'APIC':\n          if (includeCovers) {\n            var pic = {};\n            offset += 1;\n\n            switch (this.major) {\n              case 2:\n                pic.format = Util_1.default.decodeString(b.slice(offset, offset + 3), 'iso-8859-1');\n                offset += 3;\n                break;\n\n              case 3:\n              case 4:\n                fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\n                pic.format = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                break;\n\n              default:\n                throw new Error('Warning: unexpected major versionIndex: ' + this.major);\n            }\n\n            pic.format = FrameParser.fixPictureMimeType(pic.format);\n            pic.type = ID3v2Token_1.AttachedPictureType[b[offset]];\n            offset += 1;\n            fzero = Util_1.default.findZero(b, offset, length, encoding);\n            pic.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n            offset = fzero + nullTerminatorLength;\n            pic.data = Buffer.from(b.slice(offset, length));\n            output = pic;\n          }\n\n          break;\n\n        case 'CNT':\n        case 'PCNT':\n          output = Token.UINT32_BE.get(b, 0);\n          break;\n\n        case 'SYLT':\n          // skip text encoding (1 byte),\n          //      language (3 bytes),\n          //      time stamp format (1 byte),\n          //      content tagTypes (1 byte),\n          //      content descriptor (1 byte)\n          offset += 7;\n          output = [];\n\n          while (offset < length) {\n            var txt = b.slice(offset, offset = Util_1.default.findZero(b, offset, length, encoding));\n            offset += 5; // push offset forward one +  4 byte timestamp\n\n            output.push(Util_1.default.decodeString(txt, encoding));\n          }\n\n          break;\n\n        case 'ULT':\n        case 'USLT':\n        case 'COM':\n        case 'COMM':\n          offset += 1;\n          out.language = Util_1.default.decodeString(b.slice(offset, offset + 3), defaultEnc);\n          offset += 3;\n          fzero = Util_1.default.findZero(b, offset, length, encoding);\n          out.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n          offset = fzero + nullTerminatorLength;\n          out.text = Util_1.default.decodeString(b.slice(offset, length), encoding).replace(/\\x00+$/, '');\n          output = [out];\n          break;\n\n        case 'UFID':\n          output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\n          output = {\n            owner_identifier: output.id,\n            identifier: output.data\n          };\n          break;\n\n        case 'PRIV':\n          // private frame\n          output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\n          output = {\n            owner_identifier: output.id,\n            data: output.data\n          };\n          break;\n\n        case 'POPM':\n          // Popularimeter\n          fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\n          var email = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n          offset = fzero + 1;\n          var dataLen = length - offset;\n          output = {\n            email: email,\n            rating: b.readUInt8(offset),\n            counter: dataLen >= 5 ? b.readUInt32BE(offset + 1) : undefined\n          };\n          break;\n\n        case 'GEOB':\n          {\n            // General encapsulated object\n            fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\n            var mimeType = Util_1.default.decodeString(b.slice(offset + 1, fzero), defaultEnc);\n            offset = fzero + 1;\n            fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\n            var filename = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n            offset = fzero + 1;\n            fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\n            var description = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n            output = {\n              type: mimeType,\n              filename: filename,\n              description: description,\n              data: b.slice(offset + 1, length)\n            };\n            break;\n          }\n        // W-Frames:\n\n        case 'WCOM':\n        case 'WCOP':\n        case 'WOAF':\n        case 'WOAR':\n        case 'WOAS':\n        case 'WORS':\n        case 'WPAY':\n        case 'WPUB':\n          // Decode URL\n          output = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n          break;\n\n        case 'WXXX':\n          {\n            // Decode URL\n            fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\n\n            var _description = Util_1.default.decodeString(b.slice(offset + 1, fzero), encoding);\n\n            offset = fzero + (encoding === 'utf16' ? 2 : 1);\n            output = {\n              description: _description,\n              url: Util_1.default.decodeString(b.slice(offset, length), defaultEnc)\n            };\n            break;\n          }\n\n        case 'WFD':\n        case 'WFED':\n          output = Util_1.default.decodeString(b.slice(offset + 1, Util_1.default.findZero(b, offset + 1, length, encoding)), encoding);\n          break;\n\n        case 'MCDI':\n          {\n            // Music CD identifier\n            output = b.slice(0, length);\n            break;\n          }\n\n        default:\n          debug('Warning: unsupported id3v2-tag-type: ' + type);\n          break;\n      }\n\n      return output;\n    }\n  }, {\n    key: \"splitValue\",\n    value:\n    /**\r\n     * id3v2.4 defines that multiple T* values are separated by 0x00\r\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\r\n     * @param tag - Tag name\r\n     * @param text - Concatenated tag value\r\n     * @returns Split tag value\r\n     */\n    function splitValue(tag, text) {\n      var values;\n\n      if (this.major < 4) {\n        values = text.split(/\\x00/g);\n\n        if (values.length > 1) {\n          this.warningCollector.addWarning(\"ID3v2.\".concat(this.major, \" \").concat(tag, \" uses non standard null-separator.\"));\n        } else {\n          values = text.split(/\\//g);\n        }\n      } else {\n        values = text.split(/\\x00/g);\n      }\n\n      return FrameParser.trimArray(values);\n    }\n  }], [{\n    key: \"fixPictureMimeType\",\n    value: function fixPictureMimeType(pictureType) {\n      pictureType = pictureType.toLocaleLowerCase();\n\n      switch (pictureType) {\n        case 'jpg':\n          return 'image/jpeg';\n\n        case 'png':\n          return 'image/png';\n      }\n\n      return pictureType;\n    }\n    /**\r\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\r\n     * @param entries\r\n     */\n\n  }, {\n    key: \"functionList\",\n    value: function functionList(entries) {\n      var res = {};\n\n      for (var i = 0; i + 1 < entries.length; i += 2) {\n        var names = entries[i + 1].split(',');\n        res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;\n      }\n\n      return res;\n    }\n  }, {\n    key: \"trimArray\",\n    value: function trimArray(values) {\n      return values.map(function (value) {\n        return value.replace(/\\x00+$/, '').trim();\n      });\n    }\n  }, {\n    key: \"readIdentifierAndData\",\n    value: function readIdentifierAndData(b, offset, length, encoding) {\n      var fzero = Util_1.default.findZero(b, offset, length, encoding);\n      var id = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n      offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n      return {\n        id: id,\n        data: b.slice(offset, length)\n      };\n    }\n  }, {\n    key: \"getNullTerminatorLength\",\n    value: function getNullTerminatorLength(enc) {\n      return enc === 'utf16' ? 2 : 1;\n    }\n  }]);\n\n  return FrameParser;\n}();\n\nexports.FrameParser = FrameParser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/id3v2/FrameParser.js"],"names":["Object","defineProperty","exports","value","FrameParser","parseGenre","initDebug","require","Token","Util_1","ID3v2Token_1","ID3v1Parser_1","debug","defaultEnc","origVal","genres","code","word","c","undefined","push","genre","parseGenreCode","length","match","Genres","major","warningCollector","b","type","includeCovers","addWarning","TextEncodingToken","get","encoding","bom","offset","output","nullTerminatorLength","getNullTerminatorLength","fzero","out","text","default","decodeString","slice","replace","splitValue","functionList","map","v","reduce","acc","val","concat","Array","isArray","readIdentifierAndData","description","id","data","pic","format","findZero","Error","fixPictureMimeType","AttachedPictureType","Buffer","from","UINT32_BE","txt","language","owner_identifier","identifier","email","dataLen","rating","readUInt8","counter","readUInt32BE","mimeType","filename","url","tag","values","split","trimArray","pictureType","toLocaleLowerCase","entries","res","i","names","hasOwnProperty","trim","enc"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FrameParser = exports.parseGenre = void 0;\r\nconst initDebug = require(\"debug\");\r\nconst Token = require(\"token-types\");\r\nconst Util_1 = require(\"../common/Util\");\r\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\r\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\r\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\r\nconst defaultEnc = 'iso-8859-1';\r\nfunction parseGenre(origVal) {\r\n    // match everything inside parentheses\r\n    const genres = [];\r\n    let code;\r\n    let word = '';\r\n    for (const c of origVal) {\r\n        if (typeof code === 'string') {\r\n            if (c === '(' && code === '') {\r\n                word += '(';\r\n                code = undefined;\r\n            }\r\n            else if (c === ')') {\r\n                if (word !== '') {\r\n                    genres.push(word);\r\n                    word = '';\r\n                }\r\n                const genre = parseGenreCode(code);\r\n                if (genre) {\r\n                    genres.push(genre);\r\n                }\r\n                code = undefined;\r\n            }\r\n            else\r\n                code += c;\r\n        }\r\n        else if (c === '(') {\r\n            code = '';\r\n        }\r\n        else {\r\n            word += c;\r\n        }\r\n    }\r\n    if (word) {\r\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\r\n            word = ID3v1Parser_1.Genres[word];\r\n        }\r\n        genres.push(word);\r\n    }\r\n    return genres;\r\n}\r\nexports.parseGenre = parseGenre;\r\nfunction parseGenreCode(code) {\r\n    if (code === 'RX')\r\n        return 'Remix';\r\n    if (code === 'CR')\r\n        return 'Cover';\r\n    if (code.match(/^\\d*$/)) {\r\n        return ID3v1Parser_1.Genres[code];\r\n    }\r\n}\r\nclass FrameParser {\r\n    /**\r\n     * Create id3v2 frame parser\r\n     * @param major - Major version, e.g. (4) for  id3v2.4\r\n     * @param warningCollector - Used to collect decode issue\r\n     */\r\n    constructor(major, warningCollector) {\r\n        this.major = major;\r\n        this.warningCollector = warningCollector;\r\n    }\r\n    readData(b, type, includeCovers) {\r\n        if (b.length === 0) {\r\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\r\n            return;\r\n        }\r\n        const { encoding, bom } = ID3v2Token_1.TextEncodingToken.get(b, 0);\r\n        const length = b.length;\r\n        let offset = 0;\r\n        let output = []; // ToDo\r\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\r\n        let fzero;\r\n        const out = {};\r\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\r\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\r\n            case 'T*': // 4.2.1. Text information frames - details\r\n            case 'IPLS': // v2.3: Involved people list\r\n            case 'MVIN':\r\n            case 'MVNM':\r\n            case 'PCS':\r\n            case 'PCST':\r\n                const text = Util_1.default.decodeString(b.slice(1), encoding).replace(/\\x00+$/, '');\r\n                switch (type) {\r\n                    case 'TMCL': // Musician credits list\r\n                    case 'TIPL': // Involved people list\r\n                    case 'IPLS': // Involved people list\r\n                        output = this.splitValue(type, text);\r\n                        output = FrameParser.functionList(output);\r\n                        break;\r\n                    case 'TRK':\r\n                    case 'TRCK':\r\n                    case 'TPOS':\r\n                        output = text;\r\n                        break;\r\n                    case 'TCOM':\r\n                    case 'TEXT':\r\n                    case 'TOLY':\r\n                    case 'TOPE':\r\n                    case 'TPE1':\r\n                    case 'TSRC':\r\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\r\n                        output = this.splitValue(type, text);\r\n                        break;\r\n                    case 'TCO':\r\n                    case 'TCON':\r\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\r\n                        break;\r\n                    case 'PCS':\r\n                    case 'PCST':\r\n                        // TODO: Why `default` not results `1` but `''`?\r\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\r\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\r\n                        break;\r\n                    default:\r\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\r\n                }\r\n                break;\r\n            case 'TXXX':\r\n                output = FrameParser.readIdentifierAndData(b, offset + 1, length, encoding);\r\n                output = {\r\n                    description: output.id,\r\n                    text: this.splitValue(type, Util_1.default.decodeString(output.data, encoding).replace(/\\x00+$/, ''))\r\n                };\r\n                break;\r\n            case 'PIC':\r\n            case 'APIC':\r\n                if (includeCovers) {\r\n                    const pic = {};\r\n                    offset += 1;\r\n                    switch (this.major) {\r\n                        case 2:\r\n                            pic.format = Util_1.default.decodeString(b.slice(offset, offset + 3), 'iso-8859-1');\r\n                            offset += 3;\r\n                            break;\r\n                        case 3:\r\n                        case 4:\r\n                            fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\r\n                            pic.format = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                            offset = fzero + 1;\r\n                            break;\r\n                        default:\r\n                            throw new Error('Warning: unexpected major versionIndex: ' + this.major);\r\n                    }\r\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\r\n                    pic.type = ID3v2Token_1.AttachedPictureType[b[offset]];\r\n                    offset += 1;\r\n                    fzero = Util_1.default.findZero(b, offset, length, encoding);\r\n                    pic.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\r\n                    offset = fzero + nullTerminatorLength;\r\n                    pic.data = Buffer.from(b.slice(offset, length));\r\n                    output = pic;\r\n                }\r\n                break;\r\n            case 'CNT':\r\n            case 'PCNT':\r\n                output = Token.UINT32_BE.get(b, 0);\r\n                break;\r\n            case 'SYLT':\r\n                // skip text encoding (1 byte),\r\n                //      language (3 bytes),\r\n                //      time stamp format (1 byte),\r\n                //      content tagTypes (1 byte),\r\n                //      content descriptor (1 byte)\r\n                offset += 7;\r\n                output = [];\r\n                while (offset < length) {\r\n                    const txt = b.slice(offset, offset = Util_1.default.findZero(b, offset, length, encoding));\r\n                    offset += 5; // push offset forward one +  4 byte timestamp\r\n                    output.push(Util_1.default.decodeString(txt, encoding));\r\n                }\r\n                break;\r\n            case 'ULT':\r\n            case 'USLT':\r\n            case 'COM':\r\n            case 'COMM':\r\n                offset += 1;\r\n                out.language = Util_1.default.decodeString(b.slice(offset, offset + 3), defaultEnc);\r\n                offset += 3;\r\n                fzero = Util_1.default.findZero(b, offset, length, encoding);\r\n                out.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\r\n                offset = fzero + nullTerminatorLength;\r\n                out.text = Util_1.default.decodeString(b.slice(offset, length), encoding).replace(/\\x00+$/, '');\r\n                output = [out];\r\n                break;\r\n            case 'UFID':\r\n                output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\r\n                output = { owner_identifier: output.id, identifier: output.data };\r\n                break;\r\n            case 'PRIV': // private frame\r\n                output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\r\n                output = { owner_identifier: output.id, data: output.data };\r\n                break;\r\n            case 'POPM': // Popularimeter\r\n                fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\r\n                const email = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                offset = fzero + 1;\r\n                const dataLen = length - offset;\r\n                output = {\r\n                    email,\r\n                    rating: b.readUInt8(offset),\r\n                    counter: dataLen >= 5 ? b.readUInt32BE(offset + 1) : undefined\r\n                };\r\n                break;\r\n            case 'GEOB': { // General encapsulated object\r\n                fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\r\n                const mimeType = Util_1.default.decodeString(b.slice(offset + 1, fzero), defaultEnc);\r\n                offset = fzero + 1;\r\n                fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\r\n                const filename = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                offset = fzero + 1;\r\n                fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\r\n                const description = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                output = {\r\n                    type: mimeType,\r\n                    filename,\r\n                    description,\r\n                    data: b.slice(offset + 1, length)\r\n                };\r\n                break;\r\n            }\r\n            // W-Frames:\r\n            case 'WCOM':\r\n            case 'WCOP':\r\n            case 'WOAF':\r\n            case 'WOAR':\r\n            case 'WOAS':\r\n            case 'WORS':\r\n            case 'WPAY':\r\n            case 'WPUB':\r\n                // Decode URL\r\n                output = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                break;\r\n            case 'WXXX': {\r\n                // Decode URL\r\n                fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\r\n                const description = Util_1.default.decodeString(b.slice(offset + 1, fzero), encoding);\r\n                offset = fzero + (encoding === 'utf16' ? 2 : 1);\r\n                output = { description, url: Util_1.default.decodeString(b.slice(offset, length), defaultEnc) };\r\n                break;\r\n            }\r\n            case 'WFD':\r\n            case 'WFED':\r\n                output = Util_1.default.decodeString(b.slice(offset + 1, Util_1.default.findZero(b, offset + 1, length, encoding)), encoding);\r\n                break;\r\n            case 'MCDI': {\r\n                // Music CD identifier\r\n                output = b.slice(0, length);\r\n                break;\r\n            }\r\n            default:\r\n                debug('Warning: unsupported id3v2-tag-type: ' + type);\r\n                break;\r\n        }\r\n        return output;\r\n    }\r\n    static fixPictureMimeType(pictureType) {\r\n        pictureType = pictureType.toLocaleLowerCase();\r\n        switch (pictureType) {\r\n            case 'jpg':\r\n                return 'image/jpeg';\r\n            case 'png':\r\n                return 'image/png';\r\n        }\r\n        return pictureType;\r\n    }\r\n    /**\r\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\r\n     * @param entries\r\n     */\r\n    static functionList(entries) {\r\n        const res = {};\r\n        for (let i = 0; i + 1 < entries.length; i += 2) {\r\n            const names = entries[i + 1].split(',');\r\n            res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * id3v2.4 defines that multiple T* values are separated by 0x00\r\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\r\n     * @param tag - Tag name\r\n     * @param text - Concatenated tag value\r\n     * @returns Split tag value\r\n     */\r\n    splitValue(tag, text) {\r\n        let values;\r\n        if (this.major < 4) {\r\n            values = text.split(/\\x00/g);\r\n            if (values.length > 1) {\r\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\r\n            }\r\n            else {\r\n                values = text.split(/\\//g);\r\n            }\r\n        }\r\n        else {\r\n            values = text.split(/\\x00/g);\r\n        }\r\n        return FrameParser.trimArray(values);\r\n    }\r\n    static trimArray(values) {\r\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\r\n    }\r\n    static readIdentifierAndData(b, offset, length, encoding) {\r\n        const fzero = Util_1.default.findZero(b, offset, length, encoding);\r\n        const id = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\r\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\r\n        return { id, data: b.slice(offset, length) };\r\n    }\r\n    static getNullTerminatorLength(enc) {\r\n        return enc === 'utf16' ? 2 : 1;\r\n    }\r\n}\r\nexports.FrameParser = FrameParser;\r\n"]},"metadata":{},"sourceType":"script"}