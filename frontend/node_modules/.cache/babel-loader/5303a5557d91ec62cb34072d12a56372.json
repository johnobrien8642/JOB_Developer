{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/JOB_Developer/client/src/components/posts/util/functions/feed_util.js\";\nimport React from 'react';\nimport TagResult from '../../../search/resultTypes/Tag_Result';\nimport UserResult from '../../../search/resultTypes/User_Result';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst header = (user, tag) => {\n  if (user) {\n    return /*#__PURE__*/_jsxDEV(UserResult, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this);\n  } else if (tag) {\n    return /*#__PURE__*/_jsxDEV(TagResult, {\n      tag: tag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  }\n};\n\nconst infiniteScroll = (client, updateCacheFunc, query, gqlQuery, cursorId, fetchMoreDiv, fetchMoreDivId) => {\n  return document.addEventListener('scroll', function (event) {\n    fetchMoreDiv.current = document.querySelector(fetchMoreDivId.current);\n\n    if (fetchMoreDiv.current) {\n      var el = fetchMoreDiv.current.getBoundingClientRect();\n      var elTop = el.top;\n      var elBottom = el.bottom;\n      var innerHeight = window.innerHeight;\n\n      if (elTop >= 0 && elBottom <= innerHeight) {\n        client.query({\n          query: gqlQuery.current,\n          variables: {\n            query: query.current,\n            cursorId: cursorId.current\n          },\n          fetchPolicy: 'no-cache'\n        }).then(res => {\n          if (res.loading) return 'Loading...';\n          updateCacheFunc(res, client, query.current, gqlQuery.current, cursorId);\n        });\n      }\n    }\n  });\n};\n\nconst handlePostNotesScrollOutOfWindow = (notesActive, setNotesActive) => {\n  return document.addEventListener('scroll', function (event) {\n    var node = document.querySelector('.postNotes');\n\n    if (node) {\n      var el = node.getBoundingClientRect(),\n          elTop = el.top,\n          elBottom = el.bottom,\n          innerHeight = window.innerHeight;\n\n      if (elTop > innerHeight + 10 || elBottom < -10) {\n        setNotesActive(notesActive = false);\n      }\n    }\n  });\n};\n\nconst updateCacheInfScroll = (res, client, query, gqlQuery, cursorId) => {\n  var readFeed = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query,\n      cursorId: cursorId.current\n    }\n  });\n\n  if (readFeed) {\n    var {\n      fetchTagFeed,\n      fetchUserFeed,\n      fetchAllUserActivity\n    } = readFeed;\n  }\n\n  var newData;\n  var oldArr;\n  var newArr;\n\n  if (fetchTagFeed) {\n    oldArr = fetchTagFeed;\n    newData = res.data.fetchTagFeed;\n    newArr = [...oldArr, ...newData];\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchTagFeed: newArr\n      }\n    });\n  } else if (fetchUserFeed) {\n    oldArr = fetchUserFeed;\n    newData = res.data.fetchUserFeed;\n    newArr = [...oldArr, ...newData];\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchUserFeed: newArr\n      }\n    });\n  } else if (fetchAllUserActivity) {\n    oldArr = fetchAllUserActivity;\n    newData = res.data.fetchAllUserActivity;\n    newArr = [...oldArr, ...newData];\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchAllUserActivity: newArr\n      }\n    });\n  } else if (fetchAllUserActivity) {\n    oldArr = fetchAllUserActivity;\n    newData = res.data.fetchAllUserActivity;\n    newArr = [...oldArr, ...newData];\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchAllUserActivity: newArr\n      }\n    });\n  }\n\n  if (newData) {\n    cursorId.current = newData.length > 0 ? newData[newData.length - 1]._id : null;\n  }\n};\n\nconst updateCacheInfScrollActivity = (res, client, query, gqlQuery, cursorId) => {\n  var readFeed = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query,\n      cursorId: cursorId.current\n    }\n  });\n\n  if (readFeed) {\n    var {\n      fetchAllUserActivity\n    } = readFeed;\n  }\n\n  var oldArr;\n  var newData;\n\n  if (fetchAllUserActivity) {\n    console.log(fetchAllUserActivity);\n    oldArr = fetchAllUserActivity;\n    newData = res.data.fetchAllUserActivity;\n    var newArr = [...oldArr, ...newData];\n\n    if (fetchAllUserActivity) {\n      client.writeQuery({\n        query: gqlQuery,\n        variables: {\n          query: query,\n          cursorId: cursorId.current\n        },\n        data: {\n          fetchAllUserActivity: newArr\n        }\n      });\n    }\n\n    if (newData) {\n      cursorId.current = newData.length > 0 ? newData[newData.length - 1]._id : null;\n    }\n  }\n};\n\nconst updateCacheInfScrollUserFollowers = (res, client, query, gqlQuery, cursorId) => {\n  var readFeed = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query,\n      cursorId: cursorId.current\n    }\n  });\n\n  if (readFeed) {\n    var {\n      fetchUserFollowers\n    } = readFeed;\n  }\n\n  var oldArr;\n  var newData;\n  var newArr;\n\n  if (fetchUserFollowers) {\n    oldArr = fetchUserFollowers;\n    newData = res.data.fetchUserFollowers;\n    newArr = [...oldArr, ...newData];\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchUserFollowers: newArr\n      }\n    });\n  }\n\n  if (newData) {\n    cursorId.current = newData.length > 0 ? newData[newData.length - 1]._id : null;\n  }\n};\n\nconst updateCacheInfScrollFollowedUsers = (res, client, query, gqlQuery, cursorId) => {\n  var readFeed = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query,\n      cursorId: cursorId.current\n    }\n  });\n\n  if (readFeed) {\n    var {\n      fetchFollowedUsers\n    } = readFeed;\n  }\n\n  var oldArr;\n  var newData;\n  var newArr;\n\n  if (fetchFollowedUsers) {\n    oldArr = fetchFollowedUsers;\n    newData = res.data.fetchFollowedUsers;\n    newArr = [...oldArr, ...newData];\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchFollowedUsers: newArr\n      }\n    });\n  }\n\n  if (newData) {\n    cursorId.current = newData.length > 0 ? newData[newData.length - 1]._id : null;\n  }\n};\n\nconst handleData = (data, feedArr, cursorId, endOfPosts) => {\n  var {\n    fetchUserFeed,\n    fetchUserBlogFeed,\n    fetchTagFeed,\n    fetchAllUserActivity,\n    fetchUserFollowers,\n    fetchFollowedUsers,\n    fetchUserLikes\n  } = data;\n\n  if (fetchUserFeed) {\n    feedArr.current = fetchUserFeed;\n  } else if (fetchUserBlogFeed) {\n    feedArr.current = fetchUserBlogFeed;\n  } else if (fetchTagFeed) {\n    feedArr.current = fetchTagFeed;\n  } else if (fetchAllUserActivity) {\n    var arr = [...fetchAllUserActivity];\n    arr.sort((a, b) => b.createdAt - a.createdAt);\n    feedArr.current = arr;\n  } else if (fetchUserFollowers) {\n    feedArr.current = fetchUserFollowers;\n  } else if (fetchFollowedUsers) {\n    feedArr.current = fetchFollowedUsers;\n  } else if (fetchUserLikes) {\n    feedArr.current = fetchUserLikes;\n  } else if (fetchFollowedUsers) {\n    feedArr.current = fetchFollowedUsers;\n  } else if (fetchUserFollowers) {\n    feedArr.current = fetchUserFollowers;\n  }\n\n  endOfPosts.current = feedArr.current.length === 0 ? true : false;\n\n  if (feedArr.current.length > 0) {\n    cursorId.current = feedArr.current[feedArr.current.length - 1]._id;\n  }\n};\n\nconst setgqlQueryAndQueryFeed = (tag, user, userLikes, gqlQuery, query, FETCH_TAG_FEED, FETCH_USER_BLOG_FEED, FETCH_USER_LIKES, currentUser) => {\n  if (tag) {\n    query.current = tag.title.slice(1);\n    gqlQuery.current = FETCH_TAG_FEED;\n  } else if (user) {\n    query.current = user.blogName;\n    gqlQuery.current = FETCH_USER_BLOG_FEED;\n  } else if (userLikes) {\n    query.current = currentUser;\n    gqlQuery.current = FETCH_USER_LIKES;\n  } else {\n    query.current = currentUser;\n  }\n};\n\nconst setgqlQueryUserFollowedOrFollowingOrActivity = (historyParam, gqlQuery, FETCH_USER_FOLLOWERS, FETCH_FOLLOWED_USERS, FETCH_ALL_ACTIVITY) => {\n  if (historyParam === '/followers') {\n    gqlQuery.current = FETCH_USER_FOLLOWERS;\n  } else if (historyParam === '/following') {\n    gqlQuery.current = FETCH_FOLLOWED_USERS;\n  } else if (historyParam === '/activity') {\n    gqlQuery.current = FETCH_ALL_ACTIVITY;\n  }\n};\n\nconst FeedUtil = {\n  header,\n  updateCacheInfScroll,\n  infiniteScroll,\n  updateCacheInfScrollActivity,\n  updateCacheInfScrollUserFollowers,\n  updateCacheInfScrollFollowedUsers,\n  handlePostNotesScrollOutOfWindow,\n  handleData,\n  setgqlQueryAndQueryFeed,\n  setgqlQueryUserFollowedOrFollowingOrActivity // doesUserFollowUser\n\n};\nexport default FeedUtil;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/src/components/posts/util/functions/feed_util.js"],"names":["React","TagResult","UserResult","header","user","tag","infiniteScroll","client","updateCacheFunc","query","gqlQuery","cursorId","fetchMoreDiv","fetchMoreDivId","document","addEventListener","event","current","querySelector","el","getBoundingClientRect","elTop","top","elBottom","bottom","innerHeight","window","variables","fetchPolicy","then","res","loading","handlePostNotesScrollOutOfWindow","notesActive","setNotesActive","node","updateCacheInfScroll","readFeed","readQuery","fetchTagFeed","fetchUserFeed","fetchAllUserActivity","newData","oldArr","newArr","data","writeQuery","length","_id","updateCacheInfScrollActivity","console","log","updateCacheInfScrollUserFollowers","fetchUserFollowers","updateCacheInfScrollFollowedUsers","fetchFollowedUsers","handleData","feedArr","endOfPosts","fetchUserBlogFeed","fetchUserLikes","arr","sort","a","b","createdAt","setgqlQueryAndQueryFeed","userLikes","FETCH_TAG_FEED","FETCH_USER_BLOG_FEED","FETCH_USER_LIKES","currentUser","title","slice","blogName","setgqlQueryUserFollowedOrFollowingOrActivity","historyParam","FETCH_USER_FOLLOWERS","FETCH_FOLLOWED_USERS","FETCH_ALL_ACTIVITY","FeedUtil"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TagResult from '../../../search/resultTypes/Tag_Result';\nimport UserResult from '../../../search/resultTypes/User_Result';\n\nconst header = (user, tag) => {\n  if (user) {\n    return (\n      <UserResult user={user} />\n    )\n  } else if (tag) {\n    return (\n      <TagResult tag={tag} />\n    )\n  }\n}\n\nconst infiniteScroll = (\n  client,\n  updateCacheFunc,\n  query, \n  gqlQuery,\n  cursorId,\n  fetchMoreDiv,\n  fetchMoreDivId\n) => {\n\n  return document.addEventListener('scroll', function(event) {\n    fetchMoreDiv.current = document.querySelector(fetchMoreDivId.current)\n      if (fetchMoreDiv.current) {\n        var el = fetchMoreDiv.current.getBoundingClientRect()\n        var elTop = el.top\n        var elBottom = el.bottom\n        var innerHeight = window.innerHeight\n        \n        if (elTop >= 0 && elBottom <= innerHeight) {\n          client.query({\n            query: gqlQuery.current,\n            variables: {\n              query: query.current,\n              cursorId: cursorId.current\n            },\n            fetchPolicy: 'no-cache'\n            \n          }).then(res => {\n            if (res.loading) return 'Loading...';\n              updateCacheFunc(\n                res, client, query.current,\n                gqlQuery.current, cursorId\n              )\n          })\n        }\n      }\n    })\n}\n\nconst handlePostNotesScrollOutOfWindow = (\n  notesActive,\n  setNotesActive\n) => {\n  return document.addEventListener('scroll', function(event) {\n    var node = document.querySelector('.postNotes')\n    if (node) {\n      var el = node.getBoundingClientRect(),\n      elTop = el.top,\n      elBottom = el.bottom,\n      innerHeight = window.innerHeight\n      \n      if (elTop > innerHeight + 10 || elBottom < -10) {\n        setNotesActive(notesActive = false)\n      }\n    }\n  })\n}\n\nconst updateCacheInfScroll = (\n  res, \n  client, \n  query, \n  gqlQuery, \n  cursorId\n) => {\n  \n  var readFeed  = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query,\n      cursorId: cursorId.current\n    },\n  })\n  \n  if (readFeed) {\n    var { fetchTagFeed, fetchUserFeed, \n          fetchAllUserActivity } = readFeed;\n  }\n  \n  var newData\n  var oldArr\n  var newArr\n  if (fetchTagFeed) {\n    oldArr = fetchTagFeed\n    newData = res.data.fetchTagFeed\n    newArr = [...oldArr, ...newData]\n\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchTagFeed: newArr\n      }\n    })\n  } else if (fetchUserFeed) {\n    oldArr = fetchUserFeed\n    newData = res.data.fetchUserFeed\n    newArr = [...oldArr, ...newData]\n\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchUserFeed: newArr\n      }\n    })\n  } else if (fetchAllUserActivity) {\n    oldArr = fetchAllUserActivity\n    newData = res.data.fetchAllUserActivity\n    newArr = [...oldArr, ...newData]\n\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchAllUserActivity: newArr\n      }\n    })\n  } else if (fetchAllUserActivity) {\n    oldArr = fetchAllUserActivity\n    newData = res.data.fetchAllUserActivity\n    newArr = [...oldArr, ...newData]\n\n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchAllUserActivity: newArr\n      }\n    })\n  }\n  \n  if (newData) {\n    cursorId.current = newData.length > 0 ? newData[newData.length - 1]._id : null\n  }\n}\n\nconst updateCacheInfScrollActivity = (\n  res, \n  client, \n  query, \n  gqlQuery, \n  cursorId\n) => {\n  \n  var readFeed  = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query,\n      cursorId: cursorId.current\n    },\n  })\n  \n  if (readFeed) {\n    var { fetchAllUserActivity } = readFeed;\n  }\n\n  var oldArr\n  var newData\n  \n  if (fetchAllUserActivity) {\n    console.log(fetchAllUserActivity)\n    oldArr = fetchAllUserActivity\n    newData = res.data.fetchAllUserActivity\n\n    var newArr = [...oldArr, ...newData]\n    \n    if (fetchAllUserActivity) {\n      client.writeQuery({\n        query: gqlQuery,\n        variables: {\n          query: query,\n          cursorId: cursorId.current\n        },\n        data: {\n          fetchAllUserActivity: newArr\n        }\n      })\n    }\n    \n    if (newData) {\n      cursorId.current = newData.length > 0 ? newData[newData.length - 1]._id : null\n    }\n  }\n}\n\nconst updateCacheInfScrollUserFollowers = (\n  res, \n  client, \n  query, \n  gqlQuery, \n  cursorId\n) => {\n  \n  var readFeed  = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query,\n      cursorId: cursorId.current\n    },\n  })\n  \n  if (readFeed) {\n    var { fetchUserFollowers } = readFeed;\n  }\n\n  var oldArr\n  var newData\n  var newArr\n  if (fetchUserFollowers) {\n    oldArr = fetchUserFollowers\n    newData = res.data.fetchUserFollowers\n    newArr = [...oldArr, ...newData]\n    \n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchUserFollowers: newArr\n      }\n    })\n  }\n\n  if (newData) {\n    cursorId.current = newData.length > 0 ? newData[newData.length - 1]._id : null\n  }\n}\n\nconst updateCacheInfScrollFollowedUsers = (\n  res, \n  client, \n  query, \n  gqlQuery, \n  cursorId\n) => {\n  \n  var readFeed  = client.readQuery({\n    query: gqlQuery,\n    variables: {\n      query: query,\n      cursorId: cursorId.current\n    },\n  })\n  \n  if (readFeed) {\n    var { fetchFollowedUsers } = readFeed;\n  }\n\n  var oldArr\n  var newData\n  var newArr\n  \n  if (fetchFollowedUsers) {\n    oldArr = fetchFollowedUsers\n    newData = res.data.fetchFollowedUsers\n    newArr = [...oldArr, ...newData]\n    \n    client.writeQuery({\n      query: gqlQuery,\n      variables: {\n        query: query,\n        cursorId: cursorId.current\n      },\n      data: {\n        fetchFollowedUsers: newArr\n      }\n    })\n  }\n\n  if (newData) {\n    cursorId.current = newData.length > 0 ? newData[newData.length - 1]._id : null\n  }\n}\n\nconst handleData = (data, feedArr, cursorId, endOfPosts) => {\n  var { fetchUserFeed,\n        fetchUserBlogFeed,\n        fetchTagFeed,\n        fetchAllUserActivity,\n        fetchUserFollowers,\n        fetchFollowedUsers,\n        fetchUserLikes } = data\n\n  if (fetchUserFeed) {\n    feedArr.current = fetchUserFeed\n  } else if (fetchUserBlogFeed) {\n    feedArr.current = fetchUserBlogFeed\n  } else if (fetchTagFeed) {\n    feedArr.current = fetchTagFeed\n  } else if (fetchAllUserActivity) {\n    var arr = [...fetchAllUserActivity]\n    arr.sort((a, b) => b.createdAt - a.createdAt)\n    feedArr.current = arr\n  } else if (fetchUserFollowers) {\n    feedArr.current = fetchUserFollowers\n  } else if (fetchFollowedUsers) {\n    feedArr.current = fetchFollowedUsers\n  } else if (fetchUserLikes) {\n    feedArr.current = fetchUserLikes\n  } else if (fetchFollowedUsers) {\n    feedArr.current = fetchFollowedUsers\n  } else if (fetchUserFollowers) {\n    feedArr.current = fetchUserFollowers\n  }\n  \n  endOfPosts.current = feedArr.current.length === 0 ? true : false\n  if (feedArr.current.length > 0) {\n    cursorId.current = feedArr.current[feedArr.current.length - 1]._id\n  }\n}\n\nconst setgqlQueryAndQueryFeed = (\n  tag, \n  user, \n  userLikes,\n  gqlQuery, \n  query,\n  FETCH_TAG_FEED,\n  FETCH_USER_BLOG_FEED,\n  FETCH_USER_LIKES,\n  currentUser\n) => {\n\n  if (tag) {\n    query.current = tag.title.slice(1)\n    gqlQuery.current = FETCH_TAG_FEED\n  } else if (user) {\n    query.current = user.blogName\n    gqlQuery.current = FETCH_USER_BLOG_FEED\n  } else if (userLikes) {\n    query.current = currentUser\n    gqlQuery.current = FETCH_USER_LIKES\n  } else {\n    query.current = currentUser\n  }\n}\n\nconst setgqlQueryUserFollowedOrFollowingOrActivity = (\n  historyParam,\n  gqlQuery,\n  FETCH_USER_FOLLOWERS,\n  FETCH_FOLLOWED_USERS,\n  FETCH_ALL_ACTIVITY\n) => {\n\n  if (historyParam === '/followers') {\n    gqlQuery.current = FETCH_USER_FOLLOWERS\n  } else if (historyParam === '/following') {\n    gqlQuery.current = FETCH_FOLLOWED_USERS\n  } else if (historyParam === '/activity') {\n    gqlQuery.current = FETCH_ALL_ACTIVITY\n  }\n}\n\n\n\nconst FeedUtil = { \n  header, updateCacheInfScroll,\n  infiniteScroll,\n  updateCacheInfScrollActivity,\n  updateCacheInfScrollUserFollowers,\n  updateCacheInfScrollFollowedUsers,\n  handlePostNotesScrollOutOfWindow,\n  handleData, setgqlQueryAndQueryFeed,\n  setgqlQueryUserFollowedOrFollowingOrActivity\n  // doesUserFollowUser\n}\n\nexport default FeedUtil;"]},"metadata":{},"sourceType":"module"}