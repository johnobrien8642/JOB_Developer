{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsfParser = void 0;\n\nconst type_1 = require(\"../type\");\n\nconst GUID_1 = require(\"./GUID\");\n\nconst AsfObject = require(\"./AsfObject\");\n\nconst _debug = require(\"debug\");\n\nconst BasicParser_1 = require(\"../common/BasicParser\");\n\nconst debug = _debug('music-metadata:parser:ASF');\n\nconst headerType = 'asf';\n/**\r\n * Windows Media Metadata Usage Guidelines\r\n *   Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\r\n *\r\n * Ref:\r\n *   https://tools.ietf.org/html/draft-fleischman-asf-01\r\n *   https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\r\n *   http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\r\n *   https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\r\n */\n\nclass AsfParser extends BasicParser_1.BasicParser {\n  async parse() {\n    const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\n\n    if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\n      throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\n    }\n\n    try {\n      await this.parseObjectHeader(header.numberOfHeaderObjects);\n    } catch (err) {\n      debug('Error while parsing ASF: %s', err);\n    }\n  }\n\n  async parseObjectHeader(numberOfObjectHeaders) {\n    let tags;\n\n    do {\n      // Parse common header of the ASF Object (3.1)\n      const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken); // Parse data part of the ASF Object\n\n      debug('header GUID=%s', header.objectId.str);\n\n      switch (header.objectId.str) {\n        case AsfObject.FilePropertiesObject.guid.str:\n          // 3.2\n          const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\n          this.metadata.setFormat('duration', fpo.playDuration / 10000000 - fpo.preroll / 1000);\n          this.metadata.setFormat('bitrate', fpo.maximumBitrate);\n          break;\n\n        case AsfObject.StreamPropertiesObject.guid.str:\n          // 3.3\n          const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\n          this.metadata.setFormat('container', 'ASF/' + spo.streamType);\n          break;\n\n        case AsfObject.HeaderExtensionObject.guid.str:\n          // 3.4\n          const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\n          await this.parseExtensionObject(extHeader.extensionDataSize);\n          break;\n\n        case AsfObject.ContentDescriptionObjectState.guid.str:\n          // 3.10\n          tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\n          this.addTags(tags);\n          break;\n\n        case AsfObject.ExtendedContentDescriptionObjectState.guid.str:\n          // 3.11\n          tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\n          this.addTags(tags);\n          break;\n\n        case GUID_1.default.CodecListObject.str:\n          const codecs = await AsfObject.readCodecEntries(this.tokenizer);\n          codecs.forEach(codec => {\n            this.metadata.addStreamInfo({\n              type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\n              codecName: codec.codecName\n            });\n          });\n          const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\n          this.metadata.setFormat('codec', audioCodecs);\n          break;\n\n        case GUID_1.default.StreamBitratePropertiesObject.str:\n          // ToDo?\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        case GUID_1.default.PaddingObject.str:\n          // ToDo: register bytes pad\n          debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        default:\n          this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n          debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\n          await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n      }\n    } while (--numberOfObjectHeaders); // done\n\n  }\n\n  addTags(tags) {\n    tags.forEach(tag => {\n      this.metadata.addTag(headerType, tag.id, tag.value);\n    });\n  }\n\n  async parseExtensionObject(extensionSize) {\n    do {\n      // Parse common header of the ASF Object (3.1)\n      const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken); // Parse data part of the ASF Object\n\n      switch (header.objectId.str) {\n        case AsfObject.ExtendedStreamPropertiesObjectState.guid.str:\n          // 4.1\n          // ToDo: extended stream header properties are ignored\n          await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\n          break;\n\n        case AsfObject.MetadataObjectState.guid.str:\n          // 4.7\n          const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\n          this.addTags(moTags);\n          break;\n\n        case AsfObject.MetadataLibraryObjectState.guid.str:\n          // 4.8\n          const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\n          this.addTags(mlTags);\n          break;\n\n        case GUID_1.default.PaddingObject.str:\n          // ToDo: register bytes pad\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        case GUID_1.default.CompatibilityObject.str:\n          this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        case GUID_1.default.ASF_Index_Placeholder_Object.str:\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        default:\n          this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str); // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\n\n          await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n          break;\n      }\n\n      extensionSize -= header.objectSize;\n    } while (extensionSize > 0);\n  }\n\n}\n\nexports.AsfParser = AsfParser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/asf/AsfParser.js"],"names":["Object","defineProperty","exports","value","AsfParser","type_1","require","GUID_1","AsfObject","_debug","BasicParser_1","debug","headerType","BasicParser","parse","header","tokenizer","readToken","TopLevelHeaderObjectToken","objectId","equals","default","HeaderObject","Error","str","parseObjectHeader","numberOfHeaderObjects","err","numberOfObjectHeaders","tags","HeaderObjectToken","FilePropertiesObject","guid","fpo","metadata","setFormat","playDuration","preroll","maximumBitrate","StreamPropertiesObject","spo","streamType","HeaderExtensionObject","extHeader","parseExtensionObject","extensionDataSize","ContentDescriptionObjectState","addTags","ExtendedContentDescriptionObjectState","CodecListObject","codecs","readCodecEntries","forEach","codec","addStreamInfo","type","videoCodec","TrackType","video","audio","codecName","audioCodecs","filter","audioCodec","map","join","StreamBitratePropertiesObject","ignore","objectSize","len","PaddingObject","addWarning","IgnoreObjectState","tag","addTag","id","extensionSize","ExtendedStreamPropertiesObjectState","MetadataObjectState","moTags","MetadataLibraryObjectState","mlTags","CompatibilityObject","ASF_Index_Placeholder_Object"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AsfParser = void 0;\r\nconst type_1 = require(\"../type\");\r\nconst GUID_1 = require(\"./GUID\");\r\nconst AsfObject = require(\"./AsfObject\");\r\nconst _debug = require(\"debug\");\r\nconst BasicParser_1 = require(\"../common/BasicParser\");\r\nconst debug = _debug('music-metadata:parser:ASF');\r\nconst headerType = 'asf';\r\n/**\r\n * Windows Media Metadata Usage Guidelines\r\n *   Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\r\n *\r\n * Ref:\r\n *   https://tools.ietf.org/html/draft-fleischman-asf-01\r\n *   https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\r\n *   http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\r\n *   https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\r\n */\r\nclass AsfParser extends BasicParser_1.BasicParser {\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\r\n        if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\r\n            throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\r\n        }\r\n        try {\r\n            await this.parseObjectHeader(header.numberOfHeaderObjects);\r\n        }\r\n        catch (err) {\r\n            debug('Error while parsing ASF: %s', err);\r\n        }\r\n    }\r\n    async parseObjectHeader(numberOfObjectHeaders) {\r\n        let tags;\r\n        do {\r\n            // Parse common header of the ASF Object (3.1)\r\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\r\n            // Parse data part of the ASF Object\r\n            debug('header GUID=%s', header.objectId.str);\r\n            switch (header.objectId.str) {\r\n                case AsfObject.FilePropertiesObject.guid.str: // 3.2\r\n                    const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\r\n                    this.metadata.setFormat('duration', fpo.playDuration / 10000000 - fpo.preroll / 1000);\r\n                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);\r\n                    break;\r\n                case AsfObject.StreamPropertiesObject.guid.str: // 3.3\r\n                    const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\r\n                    this.metadata.setFormat('container', 'ASF/' + spo.streamType);\r\n                    break;\r\n                case AsfObject.HeaderExtensionObject.guid.str: // 3.4\r\n                    const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\r\n                    await this.parseExtensionObject(extHeader.extensionDataSize);\r\n                    break;\r\n                case AsfObject.ContentDescriptionObjectState.guid.str: // 3.10\r\n                    tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\r\n                    this.addTags(tags);\r\n                    break;\r\n                case AsfObject.ExtendedContentDescriptionObjectState.guid.str: // 3.11\r\n                    tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\r\n                    this.addTags(tags);\r\n                    break;\r\n                case GUID_1.default.CodecListObject.str:\r\n                    const codecs = await AsfObject.readCodecEntries(this.tokenizer);\r\n                    codecs.forEach(codec => {\r\n                        this.metadata.addStreamInfo({\r\n                            type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\r\n                            codecName: codec.codecName\r\n                        });\r\n                    });\r\n                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\r\n                    this.metadata.setFormat('codec', audioCodecs);\r\n                    break;\r\n                case GUID_1.default.StreamBitratePropertiesObject.str:\r\n                    // ToDo?\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                case GUID_1.default.PaddingObject.str:\r\n                    // ToDo: register bytes pad\r\n                    debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                default:\r\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\r\n                    debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\r\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\r\n            }\r\n        } while (--numberOfObjectHeaders);\r\n        // done\r\n    }\r\n    addTags(tags) {\r\n        tags.forEach(tag => {\r\n            this.metadata.addTag(headerType, tag.id, tag.value);\r\n        });\r\n    }\r\n    async parseExtensionObject(extensionSize) {\r\n        do {\r\n            // Parse common header of the ASF Object (3.1)\r\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\r\n            // Parse data part of the ASF Object\r\n            switch (header.objectId.str) {\r\n                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str: // 4.1\r\n                    // ToDo: extended stream header properties are ignored\r\n                    await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\r\n                    break;\r\n                case AsfObject.MetadataObjectState.guid.str: // 4.7\r\n                    const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\r\n                    this.addTags(moTags);\r\n                    break;\r\n                case AsfObject.MetadataLibraryObjectState.guid.str: // 4.8\r\n                    const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\r\n                    this.addTags(mlTags);\r\n                    break;\r\n                case GUID_1.default.PaddingObject.str:\r\n                    // ToDo: register bytes pad\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                case GUID_1.default.CompatibilityObject.str:\r\n                    this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                case GUID_1.default.ASF_Index_Placeholder_Object.str:\r\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\r\n                    break;\r\n                default:\r\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\r\n                    // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\r\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\r\n                    break;\r\n            }\r\n            extensionSize -= header.objectSize;\r\n        } while (extensionSize > 0);\r\n    }\r\n}\r\nexports.AsfParser = AsfParser;\r\n"]},"metadata":{},"sourceType":"script"}