{"ast":null,"code":"/*!\n * media-typer\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\n\nvar SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;\nvar TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;\nvar TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;\n/**\n * Module exports.\n */\n\nexports.format = format;\nexports.parse = parse;\nexports.test = test;\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required');\n  }\n\n  var subtype = obj.subtype;\n  var suffix = obj.suffix;\n  var type = obj.type;\n\n  if (!type || !TYPE_NAME_REGEXP.test(type)) {\n    throw new TypeError('invalid type');\n  }\n\n  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {\n    throw new TypeError('invalid subtype');\n  } // format as type/subtype\n\n\n  var string = type + '/' + subtype; // append +suffix\n\n  if (suffix) {\n    if (!TYPE_NAME_REGEXP.test(suffix)) {\n      throw new TypeError('invalid suffix');\n    }\n\n    string += '+' + suffix;\n  }\n\n  return string;\n}\n/**\n * Test media type.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\n\nfunction test(string) {\n  if (!string) {\n    throw new TypeError('argument string is required');\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string');\n  }\n\n  return TYPE_REGEXP.test(string.toLowerCase());\n}\n/**\n * Parse media type to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\n\nfunction parse(string) {\n  if (!string) {\n    throw new TypeError('argument string is required');\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string');\n  }\n\n  var match = TYPE_REGEXP.exec(string.toLowerCase());\n\n  if (!match) {\n    throw new TypeError('invalid media type');\n  }\n\n  var type = match[1];\n  var subtype = match[2];\n  var suffix; // suffix after last +\n\n  var index = subtype.lastIndexOf('+');\n\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1);\n    subtype = subtype.substr(0, index);\n  }\n\n  return new MediaType(type, subtype, suffix);\n}\n/**\n * Class for MediaType object.\n * @public\n */\n\n\nfunction MediaType(type, subtype, suffix) {\n  this.type = type;\n  this.subtype = subtype;\n  this.suffix = suffix;\n}","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/media-typer/index.js"],"names":["SUBTYPE_NAME_REGEXP","TYPE_NAME_REGEXP","TYPE_REGEXP","exports","format","parse","test","obj","TypeError","subtype","suffix","type","string","toLowerCase","match","exec","index","lastIndexOf","substr","MediaType"],"mappings":"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","sourcesContent":["/*!\n * media-typer\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nvar SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\nvar TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\nvar TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/\n\n/**\n * Module exports.\n */\n\nexports.format = format\nexports.parse = parse\nexports.test = test\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var subtype = obj.subtype\n  var suffix = obj.suffix\n  var type = obj.type\n\n  if (!type || !TYPE_NAME_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {\n    throw new TypeError('invalid subtype')\n  }\n\n  // format as type/subtype\n  var string = type + '/' + subtype\n\n  // append +suffix\n  if (suffix) {\n    if (!TYPE_NAME_REGEXP.test(suffix)) {\n      throw new TypeError('invalid suffix')\n    }\n\n    string += '+' + suffix\n  }\n\n  return string\n}\n\n/**\n * Test media type.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction test (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  return TYPE_REGEXP.test(string.toLowerCase())\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var match = TYPE_REGEXP.exec(string.toLowerCase())\n\n  if (!match) {\n    throw new TypeError('invalid media type')\n  }\n\n  var type = match[1]\n  var subtype = match[2]\n  var suffix\n\n  // suffix after last +\n  var index = subtype.lastIndexOf('+')\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1)\n    subtype = subtype.substr(0, index)\n  }\n\n  return new MediaType(type, subtype, suffix)\n}\n\n/**\n * Class for MediaType object.\n * @public\n */\n\nfunction MediaType (type, subtype, suffix) {\n  this.type = type\n  this.subtype = subtype\n  this.suffix = suffix\n}\n"]},"metadata":{},"sourceType":"script"}