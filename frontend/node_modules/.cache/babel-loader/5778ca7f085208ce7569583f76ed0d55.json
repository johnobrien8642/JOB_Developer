{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ID3v2Parser = void 0;\n\nconst Token = require(\"token-types\");\n\nconst Util_1 = require(\"../common/Util\");\n\nconst FrameParser_1 = require(\"./FrameParser\");\n\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\n\nclass ID3v2Parser {\n  static removeUnsyncBytes(buffer) {\n    let readI = 0;\n    let writeI = 0;\n\n    while (readI < buffer.length - 1) {\n      if (readI !== writeI) {\n        buffer[writeI] = buffer[readI];\n      }\n\n      readI += buffer[readI] === 0xFF && buffer[readI + 1] === 0 ? 2 : 1;\n      writeI++;\n    }\n\n    if (readI < buffer.length) {\n      buffer[writeI++] = buffer[readI];\n    }\n\n    return buffer.slice(0, writeI);\n  }\n\n  static getFrameHeaderLength(majorVer) {\n    switch (majorVer) {\n      case 2:\n        return 6;\n\n      case 3:\n      case 4:\n        return 10;\n\n      default:\n        throw new Error('header versionIndex is incorrect');\n    }\n  }\n\n  static readFrameFlags(b) {\n    return {\n      status: {\n        tag_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 6),\n        file_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 5),\n        read_only: Util_1.default.strtokBITSET.get(b, 0, 4)\n      },\n      format: {\n        grouping_identity: Util_1.default.strtokBITSET.get(b, 1, 7),\n        compression: Util_1.default.strtokBITSET.get(b, 1, 3),\n        encryption: Util_1.default.strtokBITSET.get(b, 1, 2),\n        unsynchronisation: Util_1.default.strtokBITSET.get(b, 1, 1),\n        data_length_indicator: Util_1.default.strtokBITSET.get(b, 1, 0)\n      }\n    };\n  }\n\n  static readFrameData(buf, frameHeader, majorVer, includeCovers, warningCollector) {\n    const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\n\n    switch (majorVer) {\n      case 2:\n        return frameParser.readData(buf, frameHeader.id, includeCovers);\n\n      case 3:\n      case 4:\n        if (frameHeader.flags.format.unsynchronisation) {\n          buf = ID3v2Parser.removeUnsyncBytes(buf);\n        }\n\n        if (frameHeader.flags.format.data_length_indicator) {\n          buf = buf.slice(4, buf.length);\n        }\n\n        return frameParser.readData(buf, frameHeader.id, includeCovers);\n\n      default:\n        throw new Error('Unexpected majorVer: ' + majorVer);\n    }\n  }\n  /**\r\n   * Create a combined tag key, of tag & description\r\n   * @param {string} tag e.g.: COM\r\n   * @param {string} description e.g. iTunPGAP\r\n   * @returns {string} e.g. COM:iTunPGAP\r\n   */\n\n\n  static makeDescriptionTagName(tag, description) {\n    return tag + (description ? ':' + description : '');\n  }\n\n  async parse(metadata, tokenizer, options) {\n    this.tokenizer = tokenizer;\n    this.metadata = metadata;\n    this.options = options;\n    const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\n\n    if (id3Header.fileIdentifier !== 'ID3') {\n      throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\n    }\n\n    this.id3Header = id3Header;\n    this.headerType = 'ID3v2.' + id3Header.version.major;\n\n    if (id3Header.flags.isExtendedHeader) {\n      return this.parseExtendedHeader();\n    } else {\n      return this.parseId3Data(id3Header.size);\n    }\n  }\n\n  async parseExtendedHeader() {\n    const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\n    const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\n\n    if (dataRemaining > 0) {\n      return this.parseExtendedHeaderData(dataRemaining, extendedHeader.size);\n    } else {\n      return this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n  }\n\n  async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n    const buffer = Buffer.alloc(dataRemaining);\n    await this.tokenizer.readBuffer(buffer, {\n      length: dataRemaining\n    });\n    return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n  }\n\n  async parseId3Data(dataLen) {\n    const buffer = Buffer.alloc(dataLen);\n    await this.tokenizer.readBuffer(buffer, {\n      length: dataLen\n    });\n\n    for (const tag of this.parseMetadata(buffer)) {\n      if (tag.id === 'TXXX') {\n        if (tag.value) {\n          for (const text of tag.value.text) {\n            this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\n          }\n        }\n      } else if (tag.id === 'COM') {\n        for (const value of tag.value) {\n          this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\n        }\n      } else if (tag.id === 'COMM') {\n        for (const value of tag.value) {\n          this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\n        }\n      } else if (Array.isArray(tag.value)) {\n        for (const value of tag.value) {\n          this.addTag(tag.id, value);\n        }\n      } else {\n        this.addTag(tag.id, tag.value);\n      }\n    }\n  }\n\n  addTag(id, value) {\n    this.metadata.addTag(this.headerType, id, value);\n  }\n\n  parseMetadata(data) {\n    let offset = 0;\n    const tags = [];\n\n    while (true) {\n      if (offset === data.length) break;\n      const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n\n      if (offset + frameHeaderLength > data.length) {\n        this.metadata.addWarning('Illegal ID3v2 tag length');\n        break;\n      }\n\n      const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\n      const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n      const frameDataBytes = data.slice(offset, offset += frameHeader.length);\n      const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n\n      if (values) {\n        tags.push({\n          id: frameHeader.id,\n          value: values\n        });\n      }\n    }\n\n    return tags;\n  }\n\n  readFrameHeader(v, majorVer) {\n    let header;\n\n    switch (majorVer) {\n      case 2:\n        header = {\n          id: v.toString('ascii', 0, 3),\n          length: Token.UINT24_BE.get(v, 3)\n        };\n\n        if (!header.id.match(/[A-Z0-9]{3}/g)) {\n          this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n        }\n\n        break;\n\n      case 3:\n      case 4:\n        header = {\n          id: v.toString('ascii', 0, 4),\n          length: (majorVer === 4 ? ID3v2Token_1.UINT32SYNCSAFE : Token.UINT32_BE).get(v, 4),\n          flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\n        };\n\n        if (!header.id.match(/[A-Z0-9]{4}/g)) {\n          this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n        }\n\n        break;\n\n      default:\n        throw new Error('Unexpected majorVer: ' + majorVer);\n    }\n\n    return header;\n  }\n\n}\n\nexports.ID3v2Parser = ID3v2Parser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/JOB_Developer/client/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"names":["Object","defineProperty","exports","value","ID3v2Parser","Token","require","Util_1","FrameParser_1","ID3v2Token_1","removeUnsyncBytes","buffer","readI","writeI","length","slice","getFrameHeaderLength","majorVer","Error","readFrameFlags","b","status","tag_alter_preservation","default","strtokBITSET","get","file_alter_preservation","read_only","format","grouping_identity","compression","encryption","unsynchronisation","data_length_indicator","readFrameData","buf","frameHeader","includeCovers","warningCollector","frameParser","FrameParser","readData","id","flags","makeDescriptionTagName","tag","description","parse","metadata","tokenizer","options","id3Header","readToken","ID3v2Header","fileIdentifier","headerType","version","major","isExtendedHeader","parseExtendedHeader","parseId3Data","size","extendedHeader","ExtendedHeader","dataRemaining","len","parseExtendedHeaderData","extendedHeaderSize","Buffer","alloc","readBuffer","dataLen","parseMetadata","text","addTag","Array","isArray","data","offset","tags","frameHeaderLength","addWarning","frameHeaderBytes","readFrameHeader","frameDataBytes","values","skipCovers","push","v","header","toString","UINT24_BE","match","UINT32SYNCSAFE","UINT32_BE"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ID3v2Parser = void 0;\r\nconst Token = require(\"token-types\");\r\nconst Util_1 = require(\"../common/Util\");\r\nconst FrameParser_1 = require(\"./FrameParser\");\r\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\r\nclass ID3v2Parser {\r\n    static removeUnsyncBytes(buffer) {\r\n        let readI = 0;\r\n        let writeI = 0;\r\n        while (readI < buffer.length - 1) {\r\n            if (readI !== writeI) {\r\n                buffer[writeI] = buffer[readI];\r\n            }\r\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\r\n            writeI++;\r\n        }\r\n        if (readI < buffer.length) {\r\n            buffer[writeI++] = buffer[readI];\r\n        }\r\n        return buffer.slice(0, writeI);\r\n    }\r\n    static getFrameHeaderLength(majorVer) {\r\n        switch (majorVer) {\r\n            case 2:\r\n                return 6;\r\n            case 3:\r\n            case 4:\r\n                return 10;\r\n            default:\r\n                throw new Error('header versionIndex is incorrect');\r\n        }\r\n    }\r\n    static readFrameFlags(b) {\r\n        return {\r\n            status: {\r\n                tag_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 6),\r\n                file_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 5),\r\n                read_only: Util_1.default.strtokBITSET.get(b, 0, 4)\r\n            },\r\n            format: {\r\n                grouping_identity: Util_1.default.strtokBITSET.get(b, 1, 7),\r\n                compression: Util_1.default.strtokBITSET.get(b, 1, 3),\r\n                encryption: Util_1.default.strtokBITSET.get(b, 1, 2),\r\n                unsynchronisation: Util_1.default.strtokBITSET.get(b, 1, 1),\r\n                data_length_indicator: Util_1.default.strtokBITSET.get(b, 1, 0)\r\n            }\r\n        };\r\n    }\r\n    static readFrameData(buf, frameHeader, majorVer, includeCovers, warningCollector) {\r\n        const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\r\n        switch (majorVer) {\r\n            case 2:\r\n                return frameParser.readData(buf, frameHeader.id, includeCovers);\r\n            case 3:\r\n            case 4:\r\n                if (frameHeader.flags.format.unsynchronisation) {\r\n                    buf = ID3v2Parser.removeUnsyncBytes(buf);\r\n                }\r\n                if (frameHeader.flags.format.data_length_indicator) {\r\n                    buf = buf.slice(4, buf.length);\r\n                }\r\n                return frameParser.readData(buf, frameHeader.id, includeCovers);\r\n            default:\r\n                throw new Error('Unexpected majorVer: ' + majorVer);\r\n        }\r\n    }\r\n    /**\r\n     * Create a combined tag key, of tag & description\r\n     * @param {string} tag e.g.: COM\r\n     * @param {string} description e.g. iTunPGAP\r\n     * @returns {string} e.g. COM:iTunPGAP\r\n     */\r\n    static makeDescriptionTagName(tag, description) {\r\n        return tag + (description ? ':' + description : '');\r\n    }\r\n    async parse(metadata, tokenizer, options) {\r\n        this.tokenizer = tokenizer;\r\n        this.metadata = metadata;\r\n        this.options = options;\r\n        const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\r\n        if (id3Header.fileIdentifier !== 'ID3') {\r\n            throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\r\n        }\r\n        this.id3Header = id3Header;\r\n        this.headerType = ('ID3v2.' + id3Header.version.major);\r\n        if (id3Header.flags.isExtendedHeader) {\r\n            return this.parseExtendedHeader();\r\n        }\r\n        else {\r\n            return this.parseId3Data(id3Header.size);\r\n        }\r\n    }\r\n    async parseExtendedHeader() {\r\n        const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\r\n        const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\r\n        if (dataRemaining > 0) {\r\n            return this.parseExtendedHeaderData(dataRemaining, extendedHeader.size);\r\n        }\r\n        else {\r\n            return this.parseId3Data(this.id3Header.size - extendedHeader.size);\r\n        }\r\n    }\r\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\r\n        const buffer = Buffer.alloc(dataRemaining);\r\n        await this.tokenizer.readBuffer(buffer, { length: dataRemaining });\r\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\r\n    }\r\n    async parseId3Data(dataLen) {\r\n        const buffer = Buffer.alloc(dataLen);\r\n        await this.tokenizer.readBuffer(buffer, { length: dataLen });\r\n        for (const tag of this.parseMetadata(buffer)) {\r\n            if (tag.id === 'TXXX') {\r\n                if (tag.value) {\r\n                    for (const text of tag.value.text) {\r\n                        this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\r\n                    }\r\n                }\r\n            }\r\n            else if (tag.id === 'COM') {\r\n                for (const value of tag.value) {\r\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\r\n                }\r\n            }\r\n            else if (tag.id === 'COMM') {\r\n                for (const value of tag.value) {\r\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\r\n                }\r\n            }\r\n            else if (Array.isArray(tag.value)) {\r\n                for (const value of tag.value) {\r\n                    this.addTag(tag.id, value);\r\n                }\r\n            }\r\n            else {\r\n                this.addTag(tag.id, tag.value);\r\n            }\r\n        }\r\n    }\r\n    addTag(id, value) {\r\n        this.metadata.addTag(this.headerType, id, value);\r\n    }\r\n    parseMetadata(data) {\r\n        let offset = 0;\r\n        const tags = [];\r\n        while (true) {\r\n            if (offset === data.length)\r\n                break;\r\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\r\n            if (offset + frameHeaderLength > data.length) {\r\n                this.metadata.addWarning('Illegal ID3v2 tag length');\r\n                break;\r\n            }\r\n            const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\r\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\r\n            const frameDataBytes = data.slice(offset, offset += frameHeader.length);\r\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\r\n            if (values) {\r\n                tags.push({ id: frameHeader.id, value: values });\r\n            }\r\n        }\r\n        return tags;\r\n    }\r\n    readFrameHeader(v, majorVer) {\r\n        let header;\r\n        switch (majorVer) {\r\n            case 2:\r\n                header = {\r\n                    id: v.toString('ascii', 0, 3),\r\n                    length: Token.UINT24_BE.get(v, 3)\r\n                };\r\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\r\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\r\n                }\r\n                break;\r\n            case 3:\r\n            case 4:\r\n                header = {\r\n                    id: v.toString('ascii', 0, 4),\r\n                    length: (majorVer === 4 ? ID3v2Token_1.UINT32SYNCSAFE : Token.UINT32_BE).get(v, 4),\r\n                    flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\r\n                };\r\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\r\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('Unexpected majorVer: ' + majorVer);\r\n        }\r\n        return header;\r\n    }\r\n}\r\nexports.ID3v2Parser = ID3v2Parser;\r\n"]},"metadata":{},"sourceType":"script"}