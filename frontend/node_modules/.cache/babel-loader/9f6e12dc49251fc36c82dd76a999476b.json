{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FrameParser = exports.parseGenre = void 0;\n\nconst initDebug = require(\"debug\");\n\nconst Token = require(\"token-types\");\n\nconst Util_1 = require(\"../common/Util\");\n\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\n\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\n\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'iso-8859-1';\n\nfunction parseGenre(origVal) {\n  // match everything inside parentheses\n  const genres = [];\n  let code;\n  let word = '';\n\n  for (const c of origVal) {\n    if (typeof code === 'string') {\n      if (c === '(' && code === '') {\n        word += '(';\n        code = undefined;\n      } else if (c === ')') {\n        if (word !== '') {\n          genres.push(word);\n          word = '';\n        }\n\n        const genre = parseGenreCode(code);\n\n        if (genre) {\n          genres.push(genre);\n        }\n\n        code = undefined;\n      } else code += c;\n    } else if (c === '(') {\n      code = '';\n    } else {\n      word += c;\n    }\n  }\n\n  if (word) {\n    if (genres.length === 0 && word.match(/^\\d*$/)) {\n      word = ID3v1Parser_1.Genres[word];\n    }\n\n    genres.push(word);\n  }\n\n  return genres;\n}\n\nexports.parseGenre = parseGenre;\n\nfunction parseGenreCode(code) {\n  if (code === 'RX') return 'Remix';\n  if (code === 'CR') return 'Cover';\n\n  if (code.match(/^\\d*$/)) {\n    return ID3v1Parser_1.Genres[code];\n  }\n}\n\nclass FrameParser {\n  /**\r\n   * Create id3v2 frame parser\r\n   * @param major - Major version, e.g. (4) for  id3v2.4\r\n   * @param warningCollector - Used to collect decode issue\r\n   */\n  constructor(major, warningCollector) {\n    this.major = major;\n    this.warningCollector = warningCollector;\n  }\n\n  readData(b, type, includeCovers) {\n    if (b.length === 0) {\n      this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n      return;\n    }\n\n    const {\n      encoding,\n      bom\n    } = ID3v2Token_1.TextEncodingToken.get(b, 0);\n    const length = b.length;\n    let offset = 0;\n    let output = []; // ToDo\n\n    const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n    let fzero;\n    const out = {};\n    debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n\n    switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n      case 'T*': // 4.2.1. Text information frames - details\n\n      case 'IPLS': // v2.3: Involved people list\n\n      case 'MVIN':\n      case 'MVNM':\n      case 'PCS':\n      case 'PCST':\n        const text = Util_1.default.decodeString(b.slice(1), encoding).replace(/\\x00+$/, '');\n\n        switch (type) {\n          case 'TMCL': // Musician credits list\n\n          case 'TIPL': // Involved people list\n\n          case 'IPLS':\n            // Involved people list\n            output = this.splitValue(type, text);\n            output = FrameParser.functionList(output);\n            break;\n\n          case 'TRK':\n          case 'TRCK':\n          case 'TPOS':\n            output = text;\n            break;\n\n          case 'TCOM':\n          case 'TEXT':\n          case 'TOLY':\n          case 'TOPE':\n          case 'TPE1':\n          case 'TSRC':\n            // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n            output = this.splitValue(type, text);\n            break;\n\n          case 'TCO':\n          case 'TCON':\n            output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n            break;\n\n          case 'PCS':\n          case 'PCST':\n            // TODO: Why `default` not results `1` but `''`?\n            output = this.major >= 4 ? this.splitValue(type, text) : [text];\n            output = Array.isArray(output) && output[0] === '' ? 1 : 0;\n            break;\n\n          default:\n            output = this.major >= 4 ? this.splitValue(type, text) : [text];\n        }\n\n        break;\n\n      case 'TXXX':\n        output = FrameParser.readIdentifierAndData(b, offset + 1, length, encoding);\n        output = {\n          description: output.id,\n          text: this.splitValue(type, Util_1.default.decodeString(output.data, encoding).replace(/\\x00+$/, ''))\n        };\n        break;\n\n      case 'PIC':\n      case 'APIC':\n        if (includeCovers) {\n          const pic = {};\n          offset += 1;\n\n          switch (this.major) {\n            case 2:\n              pic.format = Util_1.default.decodeString(b.slice(offset, offset + 3), 'iso-8859-1');\n              offset += 3;\n              break;\n\n            case 3:\n            case 4:\n              fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\n              pic.format = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n              offset = fzero + 1;\n              break;\n\n            default:\n              throw new Error('Warning: unexpected major versionIndex: ' + this.major);\n          }\n\n          pic.format = FrameParser.fixPictureMimeType(pic.format);\n          pic.type = ID3v2Token_1.AttachedPictureType[b[offset]];\n          offset += 1;\n          fzero = Util_1.default.findZero(b, offset, length, encoding);\n          pic.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n          offset = fzero + nullTerminatorLength;\n          pic.data = Buffer.from(b.slice(offset, length));\n          output = pic;\n        }\n\n        break;\n\n      case 'CNT':\n      case 'PCNT':\n        output = Token.UINT32_BE.get(b, 0);\n        break;\n\n      case 'SYLT':\n        // skip text encoding (1 byte),\n        //      language (3 bytes),\n        //      time stamp format (1 byte),\n        //      content tagTypes (1 byte),\n        //      content descriptor (1 byte)\n        offset += 7;\n        output = [];\n\n        while (offset < length) {\n          const txt = b.slice(offset, offset = Util_1.default.findZero(b, offset, length, encoding));\n          offset += 5; // push offset forward one +  4 byte timestamp\n\n          output.push(Util_1.default.decodeString(txt, encoding));\n        }\n\n        break;\n\n      case 'ULT':\n      case 'USLT':\n      case 'COM':\n      case 'COMM':\n        offset += 1;\n        out.language = Util_1.default.decodeString(b.slice(offset, offset + 3), defaultEnc);\n        offset += 3;\n        fzero = Util_1.default.findZero(b, offset, length, encoding);\n        out.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n        offset = fzero + nullTerminatorLength;\n        out.text = Util_1.default.decodeString(b.slice(offset, length), encoding).replace(/\\x00+$/, '');\n        output = [out];\n        break;\n\n      case 'UFID':\n        output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\n        output = {\n          owner_identifier: output.id,\n          identifier: output.data\n        };\n        break;\n\n      case 'PRIV':\n        // private frame\n        output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\n        output = {\n          owner_identifier: output.id,\n          data: output.data\n        };\n        break;\n\n      case 'POPM':\n        // Popularimeter\n        fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\n        const email = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n        offset = fzero + 1;\n        const dataLen = length - offset;\n        output = {\n          email,\n          rating: b.readUInt8(offset),\n          counter: dataLen >= 5 ? b.readUInt32BE(offset + 1) : undefined\n        };\n        break;\n\n      case 'GEOB':\n        {\n          // General encapsulated object\n          fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\n          const mimeType = Util_1.default.decodeString(b.slice(offset + 1, fzero), defaultEnc);\n          offset = fzero + 1;\n          fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\n          const filename = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n          offset = fzero + 1;\n          fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\n          const description = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n          output = {\n            type: mimeType,\n            filename,\n            description,\n            data: b.slice(offset + 1, length)\n          };\n          break;\n        }\n      // W-Frames:\n\n      case 'WCOM':\n      case 'WCOP':\n      case 'WOAF':\n      case 'WOAR':\n      case 'WOAS':\n      case 'WORS':\n      case 'WPAY':\n      case 'WPUB':\n        // Decode URL\n        output = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n        break;\n\n      case 'WXXX':\n        {\n          // Decode URL\n          fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\n          const description = Util_1.default.decodeString(b.slice(offset + 1, fzero), encoding);\n          offset = fzero + (encoding === 'utf16' ? 2 : 1);\n          output = {\n            description,\n            url: Util_1.default.decodeString(b.slice(offset, length), defaultEnc)\n          };\n          break;\n        }\n\n      case 'WFD':\n      case 'WFED':\n        output = Util_1.default.decodeString(b.slice(offset + 1, Util_1.default.findZero(b, offset + 1, length, encoding)), encoding);\n        break;\n\n      case 'MCDI':\n        {\n          // Music CD identifier\n          output = b.slice(0, length);\n          break;\n        }\n\n      default:\n        debug('Warning: unsupported id3v2-tag-type: ' + type);\n        break;\n    }\n\n    return output;\n  }\n\n  static fixPictureMimeType(pictureType) {\n    pictureType = pictureType.toLocaleLowerCase();\n\n    switch (pictureType) {\n      case 'jpg':\n        return 'image/jpeg';\n\n      case 'png':\n        return 'image/png';\n    }\n\n    return pictureType;\n  }\n  /**\r\n   * Converts TMCL (Musician credits list) or TIPL (Involved people list)\r\n   * @param entries\r\n   */\n\n\n  static functionList(entries) {\n    const res = {};\n\n    for (let i = 0; i + 1 < entries.length; i += 2) {\n      const names = entries[i + 1].split(',');\n      res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;\n    }\n\n    return res;\n  }\n  /**\r\n   * id3v2.4 defines that multiple T* values are separated by 0x00\r\n   * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\r\n   * @param tag - Tag name\r\n   * @param text - Concatenated tag value\r\n   * @returns Split tag value\r\n   */\n\n\n  splitValue(tag, text) {\n    let values;\n\n    if (this.major < 4) {\n      values = text.split(/\\x00/g);\n\n      if (values.length > 1) {\n        this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n      } else {\n        values = text.split(/\\//g);\n      }\n    } else {\n      values = text.split(/\\x00/g);\n    }\n\n    return FrameParser.trimArray(values);\n  }\n\n  static trimArray(values) {\n    return values.map(value => value.replace(/\\x00+$/, '').trim());\n  }\n\n  static readIdentifierAndData(b, offset, length, encoding) {\n    const fzero = Util_1.default.findZero(b, offset, length, encoding);\n    const id = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n    offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n    return {\n      id,\n      data: b.slice(offset, length)\n    };\n  }\n\n  static getNullTerminatorLength(enc) {\n    return enc === 'utf16' ? 2 : 1;\n  }\n\n}\n\nexports.FrameParser = FrameParser;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/id3v2/FrameParser.js"],"names":["Object","defineProperty","exports","value","FrameParser","parseGenre","initDebug","require","Token","Util_1","ID3v2Token_1","ID3v1Parser_1","debug","defaultEnc","origVal","genres","code","word","c","undefined","push","genre","parseGenreCode","length","match","Genres","constructor","major","warningCollector","readData","b","type","includeCovers","addWarning","encoding","bom","TextEncodingToken","get","offset","output","nullTerminatorLength","getNullTerminatorLength","fzero","out","text","default","decodeString","slice","replace","splitValue","functionList","map","v","reduce","acc","val","concat","Array","isArray","readIdentifierAndData","description","id","data","pic","format","findZero","Error","fixPictureMimeType","AttachedPictureType","Buffer","from","UINT32_BE","txt","language","owner_identifier","identifier","email","dataLen","rating","readUInt8","counter","readUInt32BE","mimeType","filename","url","pictureType","toLocaleLowerCase","entries","res","i","names","split","hasOwnProperty","tag","values","trimArray","trim","enc"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FrameParser = exports.parseGenre = void 0;\r\nconst initDebug = require(\"debug\");\r\nconst Token = require(\"token-types\");\r\nconst Util_1 = require(\"../common/Util\");\r\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\r\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\r\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\r\nconst defaultEnc = 'iso-8859-1';\r\nfunction parseGenre(origVal) {\r\n    // match everything inside parentheses\r\n    const genres = [];\r\n    let code;\r\n    let word = '';\r\n    for (const c of origVal) {\r\n        if (typeof code === 'string') {\r\n            if (c === '(' && code === '') {\r\n                word += '(';\r\n                code = undefined;\r\n            }\r\n            else if (c === ')') {\r\n                if (word !== '') {\r\n                    genres.push(word);\r\n                    word = '';\r\n                }\r\n                const genre = parseGenreCode(code);\r\n                if (genre) {\r\n                    genres.push(genre);\r\n                }\r\n                code = undefined;\r\n            }\r\n            else\r\n                code += c;\r\n        }\r\n        else if (c === '(') {\r\n            code = '';\r\n        }\r\n        else {\r\n            word += c;\r\n        }\r\n    }\r\n    if (word) {\r\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\r\n            word = ID3v1Parser_1.Genres[word];\r\n        }\r\n        genres.push(word);\r\n    }\r\n    return genres;\r\n}\r\nexports.parseGenre = parseGenre;\r\nfunction parseGenreCode(code) {\r\n    if (code === 'RX')\r\n        return 'Remix';\r\n    if (code === 'CR')\r\n        return 'Cover';\r\n    if (code.match(/^\\d*$/)) {\r\n        return ID3v1Parser_1.Genres[code];\r\n    }\r\n}\r\nclass FrameParser {\r\n    /**\r\n     * Create id3v2 frame parser\r\n     * @param major - Major version, e.g. (4) for  id3v2.4\r\n     * @param warningCollector - Used to collect decode issue\r\n     */\r\n    constructor(major, warningCollector) {\r\n        this.major = major;\r\n        this.warningCollector = warningCollector;\r\n    }\r\n    readData(b, type, includeCovers) {\r\n        if (b.length === 0) {\r\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\r\n            return;\r\n        }\r\n        const { encoding, bom } = ID3v2Token_1.TextEncodingToken.get(b, 0);\r\n        const length = b.length;\r\n        let offset = 0;\r\n        let output = []; // ToDo\r\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\r\n        let fzero;\r\n        const out = {};\r\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\r\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\r\n            case 'T*': // 4.2.1. Text information frames - details\r\n            case 'IPLS': // v2.3: Involved people list\r\n            case 'MVIN':\r\n            case 'MVNM':\r\n            case 'PCS':\r\n            case 'PCST':\r\n                const text = Util_1.default.decodeString(b.slice(1), encoding).replace(/\\x00+$/, '');\r\n                switch (type) {\r\n                    case 'TMCL': // Musician credits list\r\n                    case 'TIPL': // Involved people list\r\n                    case 'IPLS': // Involved people list\r\n                        output = this.splitValue(type, text);\r\n                        output = FrameParser.functionList(output);\r\n                        break;\r\n                    case 'TRK':\r\n                    case 'TRCK':\r\n                    case 'TPOS':\r\n                        output = text;\r\n                        break;\r\n                    case 'TCOM':\r\n                    case 'TEXT':\r\n                    case 'TOLY':\r\n                    case 'TOPE':\r\n                    case 'TPE1':\r\n                    case 'TSRC':\r\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\r\n                        output = this.splitValue(type, text);\r\n                        break;\r\n                    case 'TCO':\r\n                    case 'TCON':\r\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\r\n                        break;\r\n                    case 'PCS':\r\n                    case 'PCST':\r\n                        // TODO: Why `default` not results `1` but `''`?\r\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\r\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\r\n                        break;\r\n                    default:\r\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\r\n                }\r\n                break;\r\n            case 'TXXX':\r\n                output = FrameParser.readIdentifierAndData(b, offset + 1, length, encoding);\r\n                output = {\r\n                    description: output.id,\r\n                    text: this.splitValue(type, Util_1.default.decodeString(output.data, encoding).replace(/\\x00+$/, ''))\r\n                };\r\n                break;\r\n            case 'PIC':\r\n            case 'APIC':\r\n                if (includeCovers) {\r\n                    const pic = {};\r\n                    offset += 1;\r\n                    switch (this.major) {\r\n                        case 2:\r\n                            pic.format = Util_1.default.decodeString(b.slice(offset, offset + 3), 'iso-8859-1');\r\n                            offset += 3;\r\n                            break;\r\n                        case 3:\r\n                        case 4:\r\n                            fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\r\n                            pic.format = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                            offset = fzero + 1;\r\n                            break;\r\n                        default:\r\n                            throw new Error('Warning: unexpected major versionIndex: ' + this.major);\r\n                    }\r\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\r\n                    pic.type = ID3v2Token_1.AttachedPictureType[b[offset]];\r\n                    offset += 1;\r\n                    fzero = Util_1.default.findZero(b, offset, length, encoding);\r\n                    pic.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\r\n                    offset = fzero + nullTerminatorLength;\r\n                    pic.data = Buffer.from(b.slice(offset, length));\r\n                    output = pic;\r\n                }\r\n                break;\r\n            case 'CNT':\r\n            case 'PCNT':\r\n                output = Token.UINT32_BE.get(b, 0);\r\n                break;\r\n            case 'SYLT':\r\n                // skip text encoding (1 byte),\r\n                //      language (3 bytes),\r\n                //      time stamp format (1 byte),\r\n                //      content tagTypes (1 byte),\r\n                //      content descriptor (1 byte)\r\n                offset += 7;\r\n                output = [];\r\n                while (offset < length) {\r\n                    const txt = b.slice(offset, offset = Util_1.default.findZero(b, offset, length, encoding));\r\n                    offset += 5; // push offset forward one +  4 byte timestamp\r\n                    output.push(Util_1.default.decodeString(txt, encoding));\r\n                }\r\n                break;\r\n            case 'ULT':\r\n            case 'USLT':\r\n            case 'COM':\r\n            case 'COMM':\r\n                offset += 1;\r\n                out.language = Util_1.default.decodeString(b.slice(offset, offset + 3), defaultEnc);\r\n                offset += 3;\r\n                fzero = Util_1.default.findZero(b, offset, length, encoding);\r\n                out.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\r\n                offset = fzero + nullTerminatorLength;\r\n                out.text = Util_1.default.decodeString(b.slice(offset, length), encoding).replace(/\\x00+$/, '');\r\n                output = [out];\r\n                break;\r\n            case 'UFID':\r\n                output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\r\n                output = { owner_identifier: output.id, identifier: output.data };\r\n                break;\r\n            case 'PRIV': // private frame\r\n                output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\r\n                output = { owner_identifier: output.id, data: output.data };\r\n                break;\r\n            case 'POPM': // Popularimeter\r\n                fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\r\n                const email = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                offset = fzero + 1;\r\n                const dataLen = length - offset;\r\n                output = {\r\n                    email,\r\n                    rating: b.readUInt8(offset),\r\n                    counter: dataLen >= 5 ? b.readUInt32BE(offset + 1) : undefined\r\n                };\r\n                break;\r\n            case 'GEOB': { // General encapsulated object\r\n                fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\r\n                const mimeType = Util_1.default.decodeString(b.slice(offset + 1, fzero), defaultEnc);\r\n                offset = fzero + 1;\r\n                fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\r\n                const filename = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                offset = fzero + 1;\r\n                fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\r\n                const description = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                output = {\r\n                    type: mimeType,\r\n                    filename,\r\n                    description,\r\n                    data: b.slice(offset + 1, length)\r\n                };\r\n                break;\r\n            }\r\n            // W-Frames:\r\n            case 'WCOM':\r\n            case 'WCOP':\r\n            case 'WOAF':\r\n            case 'WOAR':\r\n            case 'WOAS':\r\n            case 'WORS':\r\n            case 'WPAY':\r\n            case 'WPUB':\r\n                // Decode URL\r\n                output = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\r\n                break;\r\n            case 'WXXX': {\r\n                // Decode URL\r\n                fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\r\n                const description = Util_1.default.decodeString(b.slice(offset + 1, fzero), encoding);\r\n                offset = fzero + (encoding === 'utf16' ? 2 : 1);\r\n                output = { description, url: Util_1.default.decodeString(b.slice(offset, length), defaultEnc) };\r\n                break;\r\n            }\r\n            case 'WFD':\r\n            case 'WFED':\r\n                output = Util_1.default.decodeString(b.slice(offset + 1, Util_1.default.findZero(b, offset + 1, length, encoding)), encoding);\r\n                break;\r\n            case 'MCDI': {\r\n                // Music CD identifier\r\n                output = b.slice(0, length);\r\n                break;\r\n            }\r\n            default:\r\n                debug('Warning: unsupported id3v2-tag-type: ' + type);\r\n                break;\r\n        }\r\n        return output;\r\n    }\r\n    static fixPictureMimeType(pictureType) {\r\n        pictureType = pictureType.toLocaleLowerCase();\r\n        switch (pictureType) {\r\n            case 'jpg':\r\n                return 'image/jpeg';\r\n            case 'png':\r\n                return 'image/png';\r\n        }\r\n        return pictureType;\r\n    }\r\n    /**\r\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\r\n     * @param entries\r\n     */\r\n    static functionList(entries) {\r\n        const res = {};\r\n        for (let i = 0; i + 1 < entries.length; i += 2) {\r\n            const names = entries[i + 1].split(',');\r\n            res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * id3v2.4 defines that multiple T* values are separated by 0x00\r\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\r\n     * @param tag - Tag name\r\n     * @param text - Concatenated tag value\r\n     * @returns Split tag value\r\n     */\r\n    splitValue(tag, text) {\r\n        let values;\r\n        if (this.major < 4) {\r\n            values = text.split(/\\x00/g);\r\n            if (values.length > 1) {\r\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\r\n            }\r\n            else {\r\n                values = text.split(/\\//g);\r\n            }\r\n        }\r\n        else {\r\n            values = text.split(/\\x00/g);\r\n        }\r\n        return FrameParser.trimArray(values);\r\n    }\r\n    static trimArray(values) {\r\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\r\n    }\r\n    static readIdentifierAndData(b, offset, length, encoding) {\r\n        const fzero = Util_1.default.findZero(b, offset, length, encoding);\r\n        const id = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\r\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\r\n        return { id, data: b.slice(offset, length) };\r\n    }\r\n    static getNullTerminatorLength(enc) {\r\n        return enc === 'utf16' ? 2 : 1;\r\n    }\r\n}\r\nexports.FrameParser = FrameParser;\r\n"]},"metadata":{},"sourceType":"script"}