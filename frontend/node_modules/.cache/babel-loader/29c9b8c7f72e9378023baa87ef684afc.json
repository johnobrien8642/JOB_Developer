{"ast":null,"code":"var _jsxFileName = \"/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/types/create/LinkPostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Cookies from 'js-cookie';\nimport randomstring from 'randomstring';\nimport LinkPreview from '../../util/components/forms/Link_Preview';\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text';\nimport Tags from '../../util/components/forms/Tags';\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close';\nimport Mutations from '../../../../graphql/mutations.js';\nimport Queries from '../../../../graphql/queries.js';\nimport PostFormUtil from '../../util/functions/post_form_util.js';\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  postCreate,\n  postUpdate\n} = UpdateCacheUtil;\nconst {\n  bodyPost,\n  handleFormData,\n  stripAllImgs,\n  handleUploadedFiles,\n  resetDisplayIdx,\n  fetchUrlMetadata,\n  handleMentions,\n  discardMentions,\n  handleAllTextLinkPost,\n  preventScroll,\n  allowScroll,\n  handleTagInput\n} = PostFormUtil;\nconst {\n  CREATE_OR_UPDATE_POST\n} = Mutations;\nconst {\n  FETCH_USER_FEED\n} = Queries;\n\nconst LinkPostForm = ({\n  mobile,\n  user,\n  post,\n  update,\n  setUpdate,\n  linkPostActive,\n  setLinkPostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  _s();\n\n  let [link, setLink] = useState('');\n  let [pastLink, setPastLink] = useState('');\n  let [siteName, setSiteName] = useState('');\n  let [imageUrl, setImageUrl] = useState('');\n  let [title, setTitle] = useState('');\n  let [linkDescription, setLinkDescription] = useState('');\n  let [result, setResult] = useState('');\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0);\n  let [confirmClose, setConfirmClose] = useState(false);\n  let [displayBodyImageAndTextInput, setDisplayBodyImageAndTextInput] = useState(false);\n  const formId = 'linkPostForm';\n  const formInputId = 'linkPostInput';\n  useEffect(() => {\n    preventScroll(linkPostActive, document);\n  }, [linkPostActive]);\n  useEffect(() => {\n    resetDisplayIdx(body);\n  });\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, {\n      data\n    }) {\n      const {\n        createOrUpdatePost\n      } = data;\n      var currentUser = Cookies.get('currentUser');\n      var query = FETCH_USER_FEED;\n\n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query);\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query);\n      }\n    },\n\n    onCompleted() {\n      resetInputs();\n\n      if (post) {\n        setUpdate(update = false);\n        setUploading(uploading = false);\n      } else {\n        allowScroll(document);\n        setLinkPostActive(linkPostActive = false);\n\n        if (mobile) {\n          setPostFormOpen(postFormOpen = false);\n        }\n\n        setUploading(uploading = false);\n      }\n    },\n\n    onError(error) {\n      console.log(error);\n    }\n\n  });\n\n  const resetInputs = () => {\n    setLink(link = '');\n    setPastLink(pastLink = '');\n    setResult(result = '');\n    setTitle(title = '');\n    setSiteName(siteName = '');\n    setImageUrl(imageUrl = '');\n    setLinkDescription(linkDescription = '');\n    setBodyImageFiles(bodyImageFiles = []);\n    body.current = [];\n    allText.current = '';\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n    setDisplayBodyImageAndTextInput(displayBodyImageAndTextInput = false);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    var bodyImagesFormData = handleFormData(bodyImageFiles);\n    Promise.all([bodyPost(bodyImagesFormData)]).then(([bodyUploads]) => {\n      var mentions = handleMentions(body, stripAllImgs);\n      discardMentions(post, mentions, objsToClean);\n      var descriptions = stripAllImgs(body);\n      var linkObj = {\n        link,\n        siteName,\n        imageUrl,\n        title,\n        linkDescription\n      };\n      handleAllTextLinkPost(allText, descriptions, linkObj);\n      var instanceData = {\n        variants: {\n          linkObj: linkObj\n        },\n        allText: allText.current,\n        descriptions: descriptions,\n        descriptionImages: handleUploadedFiles(body, bodyUploads),\n        mentions: mentions,\n        user: Cookies.get('currentUser'),\n        tags,\n        kind: 'LinkPost',\n        objsToClean: objsToClean.current,\n        postId: post ? post._id : null\n      };\n      createOrUpdatePost({\n        variables: {\n          instanceData: instanceData\n        }\n      });\n    });\n  };\n\n  const handleLinkPreview = () => {\n    if (link !== pastLink && link !== '') {\n      setPastLink(pastLink = link);\n      fetchUrlMetadata(link).then(res => {\n        if (res.data.success === true) {\n          if (res.data.hasOwnProperty('ogImage')) {\n            setSiteName(siteName = res.data.ogSiteName || '');\n            setImageUrl(imageUrl = res.data.ogImage.url);\n            setTitle(title = res.data.ogTitle);\n            setLinkDescription(linkDescription = res.data.ogDescription);\n            setResult(result = res);\n          } else {\n            setSiteName(siteName = res.data.ogSiteName || '');\n            setImageUrl(imageUrl = '');\n            setTitle(title = res.data.ogTitle);\n            setLinkDescription(linkDescription = res.data.ogDescription);\n            setResult(result = res);\n          }\n        }\n      });\n    }\n  };\n\n  const resetLink = () => {\n    setLink(link = '');\n    setPastLink(pastLink = '');\n    setResult(result = '');\n    setDisplayBodyImageAndTextInput(displayBodyImageAndTextInput = false);\n  };\n\n  const disabledBool = () => {\n    return !link && body.current.length === 0 && !description;\n  };\n\n  const handleLinkPostFormClass = () => {\n    if (linkPostActive && !uploading || update) {\n      return 'postForm linkPostForm active';\n    } else if (linkPostActive && uploading || uploading) {\n      return 'postForm linkPostForm hidden';\n    } else {\n      return 'postForm linkPostForm none';\n    }\n  };\n\n  if (linkPostActive || update) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: update ? 'postFormContainer update' : 'postFormContainer',\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        user: update ? post.user : user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: handleLinkPostFormClass(),\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          id: formId,\n          onSubmit: e => handleSubmit(e),\n          onKeyPress: e => {\n            e.key === 'Enter' && e.preventDefault();\n          },\n          encType: 'multipart/form-data',\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"userNameHeader\",\n            children: update ? post.user.blogName : user.blogName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 9\n          }, this), handleLinkPreview(), /*#__PURE__*/_jsxDEV(LinkPreview, {\n            displayBodyImageAndTextInput: displayBodyImageAndTextInput,\n            setDisplayBodyImageAndTextInput: setDisplayBodyImageAndTextInput,\n            post: post,\n            update: update,\n            link: link,\n            setLink: setLink,\n            pastLink: pastLink,\n            setPastLink: setPastLink,\n            result: result,\n            siteName: siteName,\n            setSiteName: setSiteName,\n            imageUrl: imageUrl,\n            setImageUrl: setImageUrl,\n            title: title,\n            setTitle: setTitle,\n            linkDescription: linkDescription,\n            setLinkDescription: setLinkDescription,\n            resetLink: resetLink\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(BodyImageAndText, {\n            displayBodyImageAndTextInput: displayBodyImageAndTextInput,\n            post: post,\n            update: update,\n            formId: formId,\n            formInputId: formInputId,\n            objsToClean: objsToClean,\n            body: body,\n            bodyImageFiles: bodyImageFiles,\n            setBodyImageFiles: setBodyImageFiles,\n            description: description,\n            setDescription: setDescription,\n            render: render,\n            setRender: setRender,\n            errMessage: errMessage,\n            setErrMessage: setErrMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Tags, {\n            post: post,\n            tag: tag,\n            setTag: setTag,\n            tags: tags,\n            setTags: setTags\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"closeOrPostContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"closeBtn\",\n              onClick: () => {\n                if (disabledBool()) {\n                  resetInputs();\n                  allowScroll(document);\n                  setDisplayBodyImageAndTextInput(displayBodyImageAndTextInput = false);\n\n                  if (!update) {\n                    setLinkPostActive(linkPostActive = false);\n                    setPostFormModal(postFormModal = false);\n                  } else {\n                    setUpdate(update = false);\n                  }\n\n                  if (mobile) {\n                    setPostFormOpen(postFormOpen = false);\n                  }\n                } else {\n                  setConfirmClose(confirmClose = true);\n                }\n              },\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(ConfirmClose, {\n              mobile: mobile,\n              update: update,\n              setUpdate: setUpdate,\n              confirmClose: confirmClose,\n              setConfirmClose: setConfirmClose,\n              allowScroll: allowScroll,\n              resetInputs: resetInputs,\n              setFormActive: setLinkPostActive,\n              formActive: linkPostActive,\n              setPostFormModal: setPostFormModal,\n              postFormModal: postFormModal,\n              postFormOpen: postFormOpen,\n              setPostFormOpen: setPostFormOpen\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn',\n              disabled: disabledBool(),\n              onClick: () => {\n                if (description) {\n                  var textObj = {\n                    kind: 'text',\n                    srcType: 'text',\n                    content: description,\n                    displayIdx: body.current.length,\n                    uniqId: randomstring.generate({\n                      length: 12,\n                      charset: 'alphabetic'\n                    })\n                  };\n                  body.current.push(textObj);\n                  setDescription(description = '');\n                }\n\n                if (tag) {\n                  handleTagInput(tag, setTag, tags, setTags);\n                }\n\n                if (!update) {\n                  setPostFormModal(postFormModal = false);\n                }\n\n                setUploading(uploading = true);\n              },\n              children: post ? 'Update' : 'Post'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(LinkPostForm, \"g9LXW7qRG0gOCw6GX5020Lhm3Lk=\", false, function () {\n  return [useMutation];\n});\n\n_c = LinkPostForm;\nexport default LinkPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LinkPostForm\");","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/src/components/posts/types/create/LinkPostForm.js"],"names":["React","useState","useRef","useEffect","useMutation","Cookies","randomstring","LinkPreview","BodyImageAndText","Tags","ProfilePic","ConfirmClose","Mutations","Queries","PostFormUtil","UpdateCacheUtil","postCreate","postUpdate","bodyPost","handleFormData","stripAllImgs","handleUploadedFiles","resetDisplayIdx","fetchUrlMetadata","handleMentions","discardMentions","handleAllTextLinkPost","preventScroll","allowScroll","handleTagInput","CREATE_OR_UPDATE_POST","FETCH_USER_FEED","LinkPostForm","mobile","user","post","update","setUpdate","linkPostActive","setLinkPostActive","postFormModal","setPostFormModal","postFormOpen","setPostFormOpen","uploading","setUploading","link","setLink","pastLink","setPastLink","siteName","setSiteName","imageUrl","setImageUrl","title","setTitle","linkDescription","setLinkDescription","result","setResult","objsToClean","description","setDescription","bodyImageFiles","setBodyImageFiles","body","allText","tag","setTag","tags","setTags","errMessage","setErrMessage","render","setRender","confirmClose","setConfirmClose","displayBodyImageAndTextInput","setDisplayBodyImageAndTextInput","formId","formInputId","document","createOrUpdatePost","client","data","currentUser","get","query","onCompleted","resetInputs","onError","error","console","log","current","handleSubmit","e","preventDefault","bodyImagesFormData","Promise","all","then","bodyUploads","mentions","descriptions","linkObj","instanceData","variants","descriptionImages","kind","postId","_id","variables","handleLinkPreview","res","success","hasOwnProperty","ogSiteName","ogImage","url","ogTitle","ogDescription","resetLink","disabledBool","length","handleLinkPostFormClass","key","blogName","textObj","srcType","content","displayIdx","uniqId","generate","charset","push"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Cookies from 'js-cookie';\nimport randomstring from 'randomstring';\n\nimport LinkPreview from '../../util/components/forms/Link_Preview'\nimport BodyImageAndText from '../../util/components/forms/Body_Image_And_Text'\nimport Tags from '../../util/components/forms/Tags'\nimport ProfilePic from '../../../user/util/components/Profile_Pic';\nimport ConfirmClose from '../../../nav/Confirm_Close';\n\nimport Mutations from '../../../../graphql/mutations.js';\nimport Queries from '../../../../graphql/queries.js';\nimport PostFormUtil from '../../util/functions/post_form_util.js'\nimport UpdateCacheUtil from '../../util/functions/update_cache_util.js';\nconst { postCreate, postUpdate } = UpdateCacheUtil;\nconst { bodyPost, handleFormData, stripAllImgs,\n        handleUploadedFiles, resetDisplayIdx, \n        fetchUrlMetadata, handleMentions, \n        discardMentions, handleAllTextLinkPost,\n        preventScroll, allowScroll, handleTagInput } = PostFormUtil;\nconst { CREATE_OR_UPDATE_POST } = Mutations;\nconst { FETCH_USER_FEED } = Queries;\n\n\nconst LinkPostForm = ({\n  mobile,\n  user,\n  post, \n  update,\n  setUpdate,\n  linkPostActive,\n  setLinkPostActive,\n  postFormModal,\n  setPostFormModal,\n  postFormOpen,\n  setPostFormOpen,\n  uploading,\n  setUploading\n}) => {\n  let [link, setLink] = useState('');\n  let [pastLink, setPastLink] = useState('')\n  let [siteName, setSiteName] = useState('');\n  let [imageUrl, setImageUrl] = useState('');\n  let [title, setTitle] = useState('');\n  let [linkDescription, setLinkDescription] = useState('');\n  let [result, setResult] = useState('');\n\n  let objsToClean = useRef([]);\n  let [description, setDescription] = useState('');\n  let [bodyImageFiles, setBodyImageFiles] = useState([]);\n  let body = useRef([]);\n  let allText = useRef('');\n  let [tag, setTag] = useState('');\n  let [tags, setTags] = useState([]);\n  let [errMessage, setErrMessage] = useState('');\n  let [render, setRender] = useState(0);\n  let [confirmClose, setConfirmClose] = useState(false);\n  let [displayBodyImageAndTextInput, setDisplayBodyImageAndTextInput] = useState(false);\n  const formId = 'linkPostForm';\n  const formInputId = 'linkPostInput';\n  \n  useEffect(() => {\n    \n    preventScroll(linkPostActive, document)\n\n  }, [linkPostActive])\n\n  useEffect(() => {\n    resetDisplayIdx(body)\n  })\n\n  let [createOrUpdatePost] = useMutation(CREATE_OR_UPDATE_POST, {\n    update(client, { data }) {\n      const { createOrUpdatePost } = data;\n      var currentUser = Cookies.get('currentUser')\n      var query = FETCH_USER_FEED\n      \n      if (post) {\n        postUpdate(client, createOrUpdatePost, currentUser, query)\n      } else {\n        postCreate(client, createOrUpdatePost, currentUser, query)\n      }\n    },\n    onCompleted() {\n      resetInputs();\n      if (post) {\n        setUpdate(update = false)\n        setUploading(uploading = false)\n      } else {\n        allowScroll(document)\n        setLinkPostActive(linkPostActive = false)\n        \n        if (mobile) {\n          setPostFormOpen(postFormOpen = false)\n        }\n        setUploading(uploading = false)\n      }\n    },\n    onError(error) {\n      console.log(error)\n    }\n  });\n\n  const resetInputs = () => {\n    setLink(link = '');\n    setPastLink(pastLink = '');\n    setResult(result = '');\n    setTitle(title = '');\n    setSiteName(siteName = '');\n    setImageUrl(imageUrl = '');\n    setLinkDescription(linkDescription = '');\n    setBodyImageFiles(bodyImageFiles = []);\n    body.current = [];\n    allText.current = '';\n    setTag(tag = '');\n    setTags(tags = []);\n    setErrMessage(errMessage = '');\n    setDisplayBodyImageAndTextInput(displayBodyImageAndTextInput = false)\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    var bodyImagesFormData = handleFormData(bodyImageFiles)\n\n    Promise.all([\n      bodyPost(bodyImagesFormData)\n    ]).then(\n      ([bodyUploads]) => {\n\n        var mentions = handleMentions(body, stripAllImgs)\n        \n        discardMentions(post, mentions, objsToClean)\n\n        var descriptions = stripAllImgs(body)\n        \n        var linkObj = {\n          link, siteName, imageUrl,\n          title, linkDescription\n        }\n\n        handleAllTextLinkPost(allText, descriptions, linkObj)\n          \n        var instanceData = {\n          variants: {\n            linkObj: linkObj\n          },\n          allText: allText.current,\n          descriptions: descriptions,\n          descriptionImages: handleUploadedFiles(body, bodyUploads),\n          mentions: mentions,\n          user: Cookies.get('currentUser'),\n          tags, kind: 'LinkPost',\n          objsToClean: objsToClean.current,\n          postId: post ? post._id : null\n        };\n        \n        createOrUpdatePost({\n          variables: {\n            instanceData: instanceData\n          }\n        })\n      }\n    )\n  }\n  \n  const handleLinkPreview = () => {\n    if (link !== pastLink && link !== '') {\n      setPastLink(pastLink = link)\n      fetchUrlMetadata(link).then(res => {\n        if (res.data.success === true) {\n          if (res.data.hasOwnProperty('ogImage')) {\n            setSiteName(siteName = res.data.ogSiteName || '')\n            setImageUrl(imageUrl = res.data.ogImage.url)\n            setTitle(title = res.data.ogTitle)\n            setLinkDescription(linkDescription = res.data.ogDescription)\n            setResult(result = res)\n          } else {\n            setSiteName(siteName = res.data.ogSiteName || '')\n            setImageUrl(imageUrl = '')\n            setTitle(title = res.data.ogTitle)\n            setLinkDescription(linkDescription = res.data.ogDescription)\n            setResult(result = res)\n          }\n        }\n      })\n    }\n  }\n\n  const resetLink = () => {\n    setLink(link = '')\n    setPastLink(pastLink = '')\n    setResult(result = '')\n    setDisplayBodyImageAndTextInput(displayBodyImageAndTextInput = false)\n  }\n\n  const disabledBool = () => {\n    return !link && \n    body.current.length === 0 && \n    !description\n  }\n\n  const handleLinkPostFormClass = () => {\n    if ((linkPostActive && !uploading) || update) {\n      return 'postForm linkPostForm active'\n    } else if ((linkPostActive && uploading) || uploading) {\n      return 'postForm linkPostForm hidden'\n    } else {\n      return 'postForm linkPostForm none'\n    }\n  }\n  \n  if (linkPostActive || update) {\n    return (\n      <div\n        className={update ? 'postFormContainer update' : 'postFormContainer'}\n      >\n\n      <ProfilePic user={update ? post.user : user} />\n\n      <div\n        className={handleLinkPostFormClass()}\n      >\n        <form\n          id={formId}\n          onSubmit={e => handleSubmit(e)}\n          onKeyPress={e => { e.key === 'Enter' && e.preventDefault() }}\n          encType={'multipart/form-data'}\n        >\n        \n        <h3\n          className='userNameHeader'\n        >{update ? post.user.blogName : user.blogName}</h3>\n  \n        {handleLinkPreview()}\n        \n        <LinkPreview\n          displayBodyImageAndTextInput={displayBodyImageAndTextInput}\n          setDisplayBodyImageAndTextInput={setDisplayBodyImageAndTextInput}\n          post={post}\n          update={update}\n          link={link}\n          setLink={setLink}\n          pastLink={pastLink}\n          setPastLink={setPastLink}\n          result={result}\n          siteName={siteName}\n          setSiteName={setSiteName}\n          imageUrl={imageUrl}\n          setImageUrl={setImageUrl}\n          title={title}\n          setTitle={setTitle}\n          linkDescription={linkDescription}\n          setLinkDescription={setLinkDescription}\n          resetLink={resetLink}\n        />\n  \n        <BodyImageAndText\n          displayBodyImageAndTextInput={displayBodyImageAndTextInput}\n          post={post}\n          update={update}\n          formId={formId}\n          formInputId={formInputId}\n          objsToClean={objsToClean}\n          body={body}\n          bodyImageFiles={bodyImageFiles}\n          setBodyImageFiles={setBodyImageFiles}\n          description={description}\n          setDescription={setDescription}\n          render={render}\n          setRender={setRender}\n          errMessage={errMessage}\n          setErrMessage={setErrMessage}\n        />\n  \n        <Tags\n          post={post}\n          tag={tag}\n          setTag={setTag}\n          tags={tags}\n          setTags={setTags}\n        />\n      \n        <div\n          className='closeOrPostContainer'\n        >\n          <div\n            className='closeBtn'\n            onClick={() => {\n              if (disabledBool()) {\n                  resetInputs()\n                  allowScroll(document)\n                  setDisplayBodyImageAndTextInput(displayBodyImageAndTextInput = false)\n                  \n                  if (!update) {\n                    setLinkPostActive(linkPostActive = false)\n                    setPostFormModal(postFormModal = false)\n                  } else {\n                    setUpdate(update = false)\n                  }\n\n                  if (mobile) {\n                    setPostFormOpen(postFormOpen = false)\n                  }\n              } else {\n                setConfirmClose(confirmClose = true)\n              }\n            }}\n          >\n            Close\n          </div>\n\n          <ConfirmClose\n            mobile={mobile}\n            update={update}\n            setUpdate={setUpdate}\n            confirmClose={confirmClose}\n            setConfirmClose={setConfirmClose}\n            allowScroll={allowScroll}\n            resetInputs={resetInputs}\n            setFormActive={setLinkPostActive}\n            formActive={linkPostActive}\n            setPostFormModal={setPostFormModal}\n            postFormModal={postFormModal}\n            postFormOpen={postFormOpen}\n            setPostFormOpen={setPostFormOpen}\n          />\n\n\n          <button\n            type='submit'\n            className={disabledBool() ? 'formSubmitBtn disabled' : 'formSubmitBtn'}\n            disabled={disabledBool()}\n            onClick={() => {\n              if (description) {\n                var textObj = {\n                  kind: 'text',\n                  srcType: 'text',\n                  content: description,\n                  displayIdx: body.current.length,\n                  uniqId: randomstring.generate({\n                    length: 12,\n                    charset: 'alphabetic'\n                  })\n                }\n\n                body.current.push(textObj)\n              \n                setDescription(description = '')\n              }\n              \n              if (tag) {\n                handleTagInput(\n                  tag, setTag,\n                  tags, setTags\n                )\n              }\n              \n              if (!update) {\n                setPostFormModal(postFormModal = false)\n              }\n\n              setUploading(uploading = true)\n            }}\n          >\n            {post ? 'Update' : 'Post'}\n          </button>\n        </div>\n        </form>\n      </div>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default LinkPostForm;"]},"metadata":{},"sourceType":"module"}