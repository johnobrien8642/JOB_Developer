{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Common = void 0;\n\nconst Token = require(\"token-types\");\n\nconst FourCC_1 = require(\"../common/FourCC\");\n\nclass Common {\n  constructor(header, isAifc) {\n    this.isAifc = isAifc;\n    const minimumChunkSize = isAifc ? 22 : 18;\n    if (header.chunkSize < minimumChunkSize) throw new Error(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\n    this.len = header.chunkSize;\n  }\n\n  get(buf, off) {\n    // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\n    const shift = buf.readUInt16BE(off + 8) - 16398;\n    const baseSampleRate = buf.readUInt16BE(off + 8 + 2);\n    const res = {\n      numChannels: buf.readUInt16BE(off),\n      numSampleFrames: buf.readUInt32BE(off + 2),\n      sampleSize: buf.readUInt16BE(off + 6),\n      sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\n    };\n\n    if (this.isAifc) {\n      res.compressionType = FourCC_1.FourCcToken.get(buf, off + 18);\n\n      if (this.len > 22) {\n        const strLen = buf.readInt8(off + 22);\n        const padding = (strLen + 1) % 2;\n\n        if (23 + strLen + padding === this.len) {\n          res.compressionName = new Token.StringType(strLen, 'binary').get(buf, off + 23);\n        } else {\n          throw new Error('Illegal pstring length');\n        }\n      }\n    } else {\n      res.compressionName = 'PCM';\n    }\n\n    return res;\n  }\n\n}\n\nexports.Common = Common;","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/aiff/AiffToken.js"],"names":["Object","defineProperty","exports","value","Common","Token","require","FourCC_1","constructor","header","isAifc","minimumChunkSize","chunkSize","Error","len","get","buf","off","shift","readUInt16BE","baseSampleRate","res","numChannels","numSampleFrames","readUInt32BE","sampleSize","sampleRate","Math","abs","compressionType","FourCcToken","strLen","readInt8","padding","compressionName","StringType"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAMF,MAAN,CAAa;AACTI,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AACxB,SAAKA,MAAL,GAAcA,MAAd;AACA,UAAMC,gBAAgB,GAAGD,MAAM,GAAG,EAAH,GAAQ,EAAvC;AACA,QAAID,MAAM,CAACG,SAAP,GAAmBD,gBAAvB,EACI,MAAM,IAAIE,KAAJ,CAAW,+CAA8CF,gBAAiB,EAA1E,CAAN;AACJ,SAAKG,GAAL,GAAWL,MAAM,CAACG,SAAlB;AACH;;AACDG,EAAAA,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAW;AACV;AACA,UAAMC,KAAK,GAAGF,GAAG,CAACG,YAAJ,CAAiBF,GAAG,GAAG,CAAvB,IAA4B,KAA1C;AACA,UAAMG,cAAc,GAAGJ,GAAG,CAACG,YAAJ,CAAiBF,GAAG,GAAG,CAAN,GAAU,CAA3B,CAAvB;AACA,UAAMI,GAAG,GAAG;AACRC,MAAAA,WAAW,EAAEN,GAAG,CAACG,YAAJ,CAAiBF,GAAjB,CADL;AAERM,MAAAA,eAAe,EAAEP,GAAG,CAACQ,YAAJ,CAAiBP,GAAG,GAAG,CAAvB,CAFT;AAGRQ,MAAAA,UAAU,EAAET,GAAG,CAACG,YAAJ,CAAiBF,GAAG,GAAG,CAAvB,CAHJ;AAIRS,MAAAA,UAAU,EAAER,KAAK,GAAG,CAAR,GAAYE,cAAc,IAAIO,IAAI,CAACC,GAAL,CAASV,KAAT,CAA9B,GAAgDE,cAAc,IAAIF;AAJtE,KAAZ;;AAMA,QAAI,KAAKR,MAAT,EAAiB;AACbW,MAAAA,GAAG,CAACQ,eAAJ,GAAsBtB,QAAQ,CAACuB,WAAT,CAAqBf,GAArB,CAAyBC,GAAzB,EAA8BC,GAAG,GAAG,EAApC,CAAtB;;AACA,UAAI,KAAKH,GAAL,GAAW,EAAf,EAAmB;AACf,cAAMiB,MAAM,GAAGf,GAAG,CAACgB,QAAJ,CAAaf,GAAG,GAAG,EAAnB,CAAf;AACA,cAAMgB,OAAO,GAAG,CAACF,MAAM,GAAG,CAAV,IAAe,CAA/B;;AACA,YAAI,KAAKA,MAAL,GAAcE,OAAd,KAA0B,KAAKnB,GAAnC,EAAwC;AACpCO,UAAAA,GAAG,CAACa,eAAJ,GAAsB,IAAI7B,KAAK,CAAC8B,UAAV,CAAqBJ,MAArB,EAA6B,QAA7B,EAAuChB,GAAvC,CAA2CC,GAA3C,EAAgDC,GAAG,GAAG,EAAtD,CAAtB;AACH,SAFD,MAGK;AACD,gBAAM,IAAIJ,KAAJ,CAAU,wBAAV,CAAN;AACH;AACJ;AACJ,KAZD,MAaK;AACDQ,MAAAA,GAAG,CAACa,eAAJ,GAAsB,KAAtB;AACH;;AACD,WAAOb,GAAP;AACH;;AAnCQ;;AAqCbnB,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Common = void 0;\r\nconst Token = require(\"token-types\");\r\nconst FourCC_1 = require(\"../common/FourCC\");\r\nclass Common {\r\n    constructor(header, isAifc) {\r\n        this.isAifc = isAifc;\r\n        const minimumChunkSize = isAifc ? 22 : 18;\r\n        if (header.chunkSize < minimumChunkSize)\r\n            throw new Error(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\r\n        this.len = header.chunkSize;\r\n    }\r\n    get(buf, off) {\r\n        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\r\n        const shift = buf.readUInt16BE(off + 8) - 16398;\r\n        const baseSampleRate = buf.readUInt16BE(off + 8 + 2);\r\n        const res = {\r\n            numChannels: buf.readUInt16BE(off),\r\n            numSampleFrames: buf.readUInt32BE(off + 2),\r\n            sampleSize: buf.readUInt16BE(off + 6),\r\n            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\r\n        };\r\n        if (this.isAifc) {\r\n            res.compressionType = FourCC_1.FourCcToken.get(buf, off + 18);\r\n            if (this.len > 22) {\r\n                const strLen = buf.readInt8(off + 22);\r\n                const padding = (strLen + 1) % 2;\r\n                if (23 + strLen + padding === this.len) {\r\n                    res.compressionName = new Token.StringType(strLen, 'binary').get(buf, off + 23);\r\n                }\r\n                else {\r\n                    throw new Error('Illegal pstring length');\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            res.compressionName = 'PCM';\r\n        }\r\n        return res;\r\n    }\r\n}\r\nexports.Common = Common;\r\n"]},"metadata":{},"sourceType":"script"}