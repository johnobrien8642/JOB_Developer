{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Header = void 0;\n\nconst Token = require(\"token-types\");\n\nconst Util_1 = require(\"../../common/Util\");\n/**\r\n * Speex Header Packet\r\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\r\n */\n\n\nexports.Header = {\n  len: 80,\n  get: (buf, off) => {\n    return {\n      speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\n      version: Util_1.default.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\n      version_id: buf.readInt32LE(off + 28),\n      header_size: buf.readInt32LE(off + 32),\n      rate: buf.readInt32LE(off + 36),\n      mode: buf.readInt32LE(off + 40),\n      mode_bitstream_version: buf.readInt32LE(off + 44),\n      nb_channels: buf.readInt32LE(off + 48),\n      bitrate: buf.readInt32LE(off + 52),\n      frame_size: buf.readInt32LE(off + 56),\n      vbr: buf.readInt32LE(off + 60),\n      frames_per_packet: buf.readInt32LE(off + 64),\n      extra_headers: buf.readInt32LE(off + 68),\n      reserved1: buf.readInt32LE(off + 72),\n      reserved2: buf.readInt32LE(off + 76)\n    };\n  }\n};","map":{"version":3,"sources":["/Users/johnobrien/Desktop/Rumblr_PROD/client/node_modules/music-metadata/lib/ogg/speex/Speex.js"],"names":["Object","defineProperty","exports","value","Header","Token","require","Util_1","len","get","buf","off","speex","StringType","version","default","trimRightNull","version_id","readInt32LE","header_size","rate","mode","mode_bitstream_version","nb_channels","bitrate","frame_size","vbr","frames_per_packet","extra_headers","reserved1","reserved2"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAAtB;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACE,MAAR,GAAiB;AACbI,EAAAA,GAAG,EAAE,EADQ;AAEbC,EAAAA,GAAG,EAAE,CAACC,GAAD,EAAMC,GAAN,KAAc;AACf,WAAO;AACHC,MAAAA,KAAK,EAAE,IAAIP,KAAK,CAACQ,UAAV,CAAqB,CAArB,EAAwB,OAAxB,EAAiCJ,GAAjC,CAAqCC,GAArC,EAA0CC,GAAG,GAAG,CAAhD,CADJ;AAEHG,MAAAA,OAAO,EAAEP,MAAM,CAACQ,OAAP,CAAeC,aAAf,CAA6B,IAAIX,KAAK,CAACQ,UAAV,CAAqB,EAArB,EAAyB,OAAzB,EAAkCJ,GAAlC,CAAsCC,GAAtC,EAA2CC,GAAG,GAAG,CAAjD,CAA7B,CAFN;AAGHM,MAAAA,UAAU,EAAEP,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CAHT;AAIHQ,MAAAA,WAAW,EAAET,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CAJV;AAKHS,MAAAA,IAAI,EAAEV,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CALH;AAMHU,MAAAA,IAAI,EAAEX,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CANH;AAOHW,MAAAA,sBAAsB,EAAEZ,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CAPrB;AAQHY,MAAAA,WAAW,EAAEb,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CARV;AASHa,MAAAA,OAAO,EAAEd,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CATN;AAUHc,MAAAA,UAAU,EAAEf,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CAVT;AAWHe,MAAAA,GAAG,EAAEhB,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CAXF;AAYHgB,MAAAA,iBAAiB,EAAEjB,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CAZhB;AAaHiB,MAAAA,aAAa,EAAElB,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CAbZ;AAcHkB,MAAAA,SAAS,EAAEnB,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB,CAdR;AAeHmB,MAAAA,SAAS,EAAEpB,GAAG,CAACQ,WAAJ,CAAgBP,GAAG,GAAG,EAAtB;AAfR,KAAP;AAiBH;AApBY,CAAjB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Header = void 0;\r\nconst Token = require(\"token-types\");\r\nconst Util_1 = require(\"../../common/Util\");\r\n/**\r\n * Speex Header Packet\r\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\r\n */\r\nexports.Header = {\r\n    len: 80,\r\n    get: (buf, off) => {\r\n        return {\r\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\r\n            version: Util_1.default.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\r\n            version_id: buf.readInt32LE(off + 28),\r\n            header_size: buf.readInt32LE(off + 32),\r\n            rate: buf.readInt32LE(off + 36),\r\n            mode: buf.readInt32LE(off + 40),\r\n            mode_bitstream_version: buf.readInt32LE(off + 44),\r\n            nb_channels: buf.readInt32LE(off + 48),\r\n            bitrate: buf.readInt32LE(off + 52),\r\n            frame_size: buf.readInt32LE(off + 56),\r\n            vbr: buf.readInt32LE(off + 60),\r\n            frames_per_packet: buf.readInt32LE(off + 64),\r\n            extra_headers: buf.readInt32LE(off + 68),\r\n            reserved1: buf.readInt32LE(off + 72),\r\n            reserved2: buf.readInt32LE(off + 76)\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}